
PSW_Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ac4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  08008c68  08008c68  00009c68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009024  08009024  0000b1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009024  08009024  0000a024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800902c  0800902c  0000b1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800902c  0800902c  0000a02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009030  08009030  0000a030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08009034  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1dc  2**0
                  CONTENTS
 10 .bss          000002e8  200001dc  200001dc  0000b1dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004c4  200004c4  0000b1dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000114ea  00000000  00000000  0000b20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000247c  00000000  00000000  0001c6f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f98  00000000  00000000  0001eb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c33  00000000  00000000  0001fb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022925  00000000  00000000  00020743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000140cb  00000000  00000000  00043068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5488  00000000  00000000  00057133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012c5bb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005220  00000000  00000000  0012c600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000ba  00000000  00000000  00131820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008c4c 	.word	0x08008c4c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08008c4c 	.word	0x08008c4c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__io_putchar>:
int32_t dir  = 1;

uint16_t Joystick[] = {0, 0};

int __io_putchar(int ch)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000bc0:	1d39      	adds	r1, r7, #4
 8000bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4803      	ldr	r0, [pc, #12]	@ (8000bd8 <__io_putchar+0x20>)
 8000bca:	f004 ff31 	bl	8005a30 <HAL_UART_Transmit>

    return 1;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	200002d8 	.word	0x200002d8

08000bdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be0:	f000 fd24 	bl	800162c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be4:	f000 f864 	bl	8000cb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be8:	f000 fa28 	bl	800103c <MX_GPIO_Init>
  MX_DMA_Init();
 8000bec:	f000 fa08 	bl	8001000 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000bf0:	f000 f9d6 	bl	8000fa0 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8000bf4:	f000 f8be 	bl	8000d74 <MX_ADC2_Init>
  MX_TIM1_Init();
 8000bf8:	f000 f926 	bl	8000e48 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc2, (long unsigned int *)Joystick, 2);
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	4923      	ldr	r1, [pc, #140]	@ (8000c8c <main+0xb0>)
 8000c00:	4823      	ldr	r0, [pc, #140]	@ (8000c90 <main+0xb4>)
 8000c02:	f000 ff91 	bl	8001b28 <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c06:	2100      	movs	r1, #0
 8000c08:	4822      	ldr	r0, [pc, #136]	@ (8000c94 <main+0xb8>)
 8000c0a:	f003 fe57 	bl	80048bc <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 currentTC = HAL_GetTick();
 8000c0e:	f000 fd67 	bl	80016e0 <HAL_GetTick>
 8000c12:	4603      	mov	r3, r0
 8000c14:	4a20      	ldr	r2, [pc, #128]	@ (8000c98 <main+0xbc>)
 8000c16:	6013      	str	r3, [r2, #0]
	 if ((currentTC - previousTC) > period){
 8000c18:	4b1f      	ldr	r3, [pc, #124]	@ (8000c98 <main+0xbc>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c9c <main+0xc0>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	1ad2      	subs	r2, r2, r3
 8000c22:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca0 <main+0xc4>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d9f1      	bls.n	8000c0e <main+0x32>
		 printf("%d %d \n \r", Joystick[0], Joystick[1]);
 8000c2a:	4b18      	ldr	r3, [pc, #96]	@ (8000c8c <main+0xb0>)
 8000c2c:	881b      	ldrh	r3, [r3, #0]
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4b16      	ldr	r3, [pc, #88]	@ (8000c8c <main+0xb0>)
 8000c32:	885b      	ldrh	r3, [r3, #2]
 8000c34:	461a      	mov	r2, r3
 8000c36:	481b      	ldr	r0, [pc, #108]	@ (8000ca4 <main+0xc8>)
 8000c38:	f006 f88a 	bl	8006d50 <iprintf>

		 	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty);
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca8 <main+0xcc>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	4b14      	ldr	r3, [pc, #80]	@ (8000c94 <main+0xb8>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	635a      	str	r2, [r3, #52]	@ 0x34
		    duty += dir;
 8000c46:	4b18      	ldr	r3, [pc, #96]	@ (8000ca8 <main+0xcc>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	4b18      	ldr	r3, [pc, #96]	@ (8000cac <main+0xd0>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4413      	add	r3, r2
 8000c50:	4a15      	ldr	r2, [pc, #84]	@ (8000ca8 <main+0xcc>)
 8000c52:	6013      	str	r3, [r2, #0]

		    if (duty >= 100)
 8000c54:	4b14      	ldr	r3, [pc, #80]	@ (8000ca8 <main+0xcc>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b63      	cmp	r3, #99	@ 0x63
 8000c5a:	dd07      	ble.n	8000c6c <main+0x90>
		    {
		        duty = 100;
 8000c5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ca8 <main+0xcc>)
 8000c5e:	2264      	movs	r2, #100	@ 0x64
 8000c60:	601a      	str	r2, [r3, #0]
		        dir  = -1;
 8000c62:	4b12      	ldr	r3, [pc, #72]	@ (8000cac <main+0xd0>)
 8000c64:	f04f 32ff 	mov.w	r2, #4294967295
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	e009      	b.n	8000c80 <main+0xa4>
		    }
		    else if (duty <= 0)
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca8 <main+0xcc>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	dc05      	bgt.n	8000c80 <main+0xa4>
		    {
		        duty = 0;
 8000c74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca8 <main+0xcc>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
		        dir  = +1;
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <main+0xd0>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	601a      	str	r2, [r3, #0]
		    }

		 previousTC = currentTC;
 8000c80:	4b05      	ldr	r3, [pc, #20]	@ (8000c98 <main+0xbc>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a05      	ldr	r2, [pc, #20]	@ (8000c9c <main+0xc0>)
 8000c86:	6013      	str	r3, [r2, #0]
	 currentTC = HAL_GetTick();
 8000c88:	e7c1      	b.n	8000c0e <main+0x32>
 8000c8a:	bf00      	nop
 8000c8c:	2000036c 	.word	0x2000036c
 8000c90:	200001f8 	.word	0x200001f8
 8000c94:	2000028c 	.word	0x2000028c
 8000c98:	20000360 	.word	0x20000360
 8000c9c:	20000364 	.word	0x20000364
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	08008c68 	.word	0x08008c68
 8000ca8:	20000368 	.word	0x20000368
 8000cac:	20000004 	.word	0x20000004

08000cb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b0a6      	sub	sp, #152	@ 0x98
 8000cb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000cba:	2228      	movs	r2, #40	@ 0x28
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f006 f89b 	bl	8006dfa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	2258      	movs	r2, #88	@ 0x58
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f006 f88d 	bl	8006dfa <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce8:	2310      	movs	r3, #16
 8000cea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cf4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cf8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cfc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000d00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d0a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f002 f8ca 	bl	8002ea8 <HAL_RCC_OscConfig>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d1a:	f000 fa0d 	bl	8001138 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d1e:	230f      	movs	r3, #15
 8000d20:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d22:	2302      	movs	r3, #2
 8000d24:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d26:	2300      	movs	r3, #0
 8000d28:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d2e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d30:	2300      	movs	r3, #0
 8000d32:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d34:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d38:	2102      	movs	r1, #2
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f003 f8d8 	bl	8003ef0 <HAL_RCC_ClockConfig>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d46:	f000 f9f7 	bl	8001138 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1;
 8000d4a:	f241 0302 	movw	r3, #4098	@ 0x1002
 8000d4e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d50:	2300      	movs	r3, #0
 8000d52:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000d54:	2300      	movs	r3, #0
 8000d56:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f003 fada 	bl	8004314 <HAL_RCCEx_PeriphCLKConfig>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000d66:	f000 f9e7 	bl	8001138 <Error_Handler>
  }
}
 8000d6a:	bf00      	nop
 8000d6c:	3798      	adds	r7, #152	@ 0x98
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
 8000d88:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d8a:	4b2d      	ldr	r3, [pc, #180]	@ (8000e40 <MX_ADC2_Init+0xcc>)
 8000d8c:	4a2d      	ldr	r2, [pc, #180]	@ (8000e44 <MX_ADC2_Init+0xd0>)
 8000d8e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d90:	4b2b      	ldr	r3, [pc, #172]	@ (8000e40 <MX_ADC2_Init+0xcc>)
 8000d92:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000d96:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000d98:	4b29      	ldr	r3, [pc, #164]	@ (8000e40 <MX_ADC2_Init+0xcc>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d9e:	4b28      	ldr	r3, [pc, #160]	@ (8000e40 <MX_ADC2_Init+0xcc>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000da4:	4b26      	ldr	r3, [pc, #152]	@ (8000e40 <MX_ADC2_Init+0xcc>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000daa:	4b25      	ldr	r3, [pc, #148]	@ (8000e40 <MX_ADC2_Init+0xcc>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000db2:	4b23      	ldr	r3, [pc, #140]	@ (8000e40 <MX_ADC2_Init+0xcc>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000db8:	4b21      	ldr	r3, [pc, #132]	@ (8000e40 <MX_ADC2_Init+0xcc>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dbe:	4b20      	ldr	r3, [pc, #128]	@ (8000e40 <MX_ADC2_Init+0xcc>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8000dc4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e40 <MX_ADC2_Init+0xcc>)
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000dca:	4b1d      	ldr	r3, [pc, #116]	@ (8000e40 <MX_ADC2_Init+0xcc>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e40 <MX_ADC2_Init+0xcc>)
 8000dd4:	2204      	movs	r2, #4
 8000dd6:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000dd8:	4b19      	ldr	r3, [pc, #100]	@ (8000e40 <MX_ADC2_Init+0xcc>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000dde:	4b18      	ldr	r3, [pc, #96]	@ (8000e40 <MX_ADC2_Init+0xcc>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000de4:	4816      	ldr	r0, [pc, #88]	@ (8000e40 <MX_ADC2_Init+0xcc>)
 8000de6:	f000 fca5 	bl	8001734 <HAL_ADC_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000df0:	f000 f9a2 	bl	8001138 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000df4:	2306      	movs	r3, #6
 8000df6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000e00:	2307      	movs	r3, #7
 8000e02:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e0c:	463b      	mov	r3, r7
 8000e0e:	4619      	mov	r1, r3
 8000e10:	480b      	ldr	r0, [pc, #44]	@ (8000e40 <MX_ADC2_Init+0xcc>)
 8000e12:	f000 ffa5 	bl	8001d60 <HAL_ADC_ConfigChannel>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000e1c:	f000 f98c 	bl	8001138 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e20:	2302      	movs	r3, #2
 8000e22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e24:	463b      	mov	r3, r7
 8000e26:	4619      	mov	r1, r3
 8000e28:	4805      	ldr	r0, [pc, #20]	@ (8000e40 <MX_ADC2_Init+0xcc>)
 8000e2a:	f000 ff99 	bl	8001d60 <HAL_ADC_ConfigChannel>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_ADC2_Init+0xc4>
  {
    Error_Handler();
 8000e34:	f000 f980 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e38:	bf00      	nop
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	200001f8 	.word	0x200001f8
 8000e44:	50000100 	.word	0x50000100

08000e48 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b09a      	sub	sp, #104	@ 0x68
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e4e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e5c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e68:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
 8000e78:	615a      	str	r2, [r3, #20]
 8000e7a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	222c      	movs	r2, #44	@ 0x2c
 8000e80:	2100      	movs	r1, #0
 8000e82:	4618      	mov	r0, r3
 8000e84:	f005 ffb9 	bl	8006dfa <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e88:	4b43      	ldr	r3, [pc, #268]	@ (8000f98 <MX_TIM1_Init+0x150>)
 8000e8a:	4a44      	ldr	r2, [pc, #272]	@ (8000f9c <MX_TIM1_Init+0x154>)
 8000e8c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200;
 8000e8e:	4b42      	ldr	r3, [pc, #264]	@ (8000f98 <MX_TIM1_Init+0x150>)
 8000e90:	22c8      	movs	r2, #200	@ 0xc8
 8000e92:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e94:	4b40      	ldr	r3, [pc, #256]	@ (8000f98 <MX_TIM1_Init+0x150>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000e9a:	4b3f      	ldr	r3, [pc, #252]	@ (8000f98 <MX_TIM1_Init+0x150>)
 8000e9c:	2264      	movs	r2, #100	@ 0x64
 8000e9e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea0:	4b3d      	ldr	r3, [pc, #244]	@ (8000f98 <MX_TIM1_Init+0x150>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ea6:	4b3c      	ldr	r3, [pc, #240]	@ (8000f98 <MX_TIM1_Init+0x150>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eac:	4b3a      	ldr	r3, [pc, #232]	@ (8000f98 <MX_TIM1_Init+0x150>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000eb2:	4839      	ldr	r0, [pc, #228]	@ (8000f98 <MX_TIM1_Init+0x150>)
 8000eb4:	f003 fc4a 	bl	800474c <HAL_TIM_Base_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000ebe:	f000 f93b 	bl	8001138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ec2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ec6:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ec8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4832      	ldr	r0, [pc, #200]	@ (8000f98 <MX_TIM1_Init+0x150>)
 8000ed0:	f003 ff14 	bl	8004cfc <HAL_TIM_ConfigClockSource>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000eda:	f000 f92d 	bl	8001138 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ede:	482e      	ldr	r0, [pc, #184]	@ (8000f98 <MX_TIM1_Init+0x150>)
 8000ee0:	f003 fc8b 	bl	80047fa <HAL_TIM_PWM_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000eea:	f000 f925 	bl	8001138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000efa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000efe:	4619      	mov	r1, r3
 8000f00:	4825      	ldr	r0, [pc, #148]	@ (8000f98 <MX_TIM1_Init+0x150>)
 8000f02:	f004 fc35 	bl	8005770 <HAL_TIMEx_MasterConfigSynchronization>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000f0c:	f000 f914 	bl	8001138 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f10:	2360      	movs	r3, #96	@ 0x60
 8000f12:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 50;
 8000f14:	2332      	movs	r3, #50	@ 0x32
 8000f16:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f24:	2300      	movs	r3, #0
 8000f26:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f2c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f30:	2200      	movs	r2, #0
 8000f32:	4619      	mov	r1, r3
 8000f34:	4818      	ldr	r0, [pc, #96]	@ (8000f98 <MX_TIM1_Init+0x150>)
 8000f36:	f003 fdcd 	bl	8004ad4 <HAL_TIM_PWM_ConfigChannel>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000f40:	f000 f8fa 	bl	8001138 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f44:	2300      	movs	r3, #0
 8000f46:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f5c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f62:	2300      	movs	r3, #0
 8000f64:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000f6a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	4619      	mov	r1, r3
 8000f78:	4807      	ldr	r0, [pc, #28]	@ (8000f98 <MX_TIM1_Init+0x150>)
 8000f7a:	f004 fc85 	bl	8005888 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000f84:	f000 f8d8 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f88:	4803      	ldr	r0, [pc, #12]	@ (8000f98 <MX_TIM1_Init+0x150>)
 8000f8a:	f000 f98b 	bl	80012a4 <HAL_TIM_MspPostInit>

}
 8000f8e:	bf00      	nop
 8000f90:	3768      	adds	r7, #104	@ 0x68
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	2000028c 	.word	0x2000028c
 8000f9c:	40012c00 	.word	0x40012c00

08000fa0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fa4:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <MX_USART2_UART_Init+0x58>)
 8000fa6:	4a15      	ldr	r2, [pc, #84]	@ (8000ffc <MX_USART2_UART_Init+0x5c>)
 8000fa8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000faa:	4b13      	ldr	r3, [pc, #76]	@ (8000ff8 <MX_USART2_UART_Init+0x58>)
 8000fac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <MX_USART2_UART_Init+0x58>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <MX_USART2_UART_Init+0x58>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <MX_USART2_UART_Init+0x58>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <MX_USART2_UART_Init+0x58>)
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fca:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff8 <MX_USART2_UART_Init+0x58>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd0:	4b09      	ldr	r3, [pc, #36]	@ (8000ff8 <MX_USART2_UART_Init+0x58>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fd6:	4b08      	ldr	r3, [pc, #32]	@ (8000ff8 <MX_USART2_UART_Init+0x58>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <MX_USART2_UART_Init+0x58>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fe2:	4805      	ldr	r0, [pc, #20]	@ (8000ff8 <MX_USART2_UART_Init+0x58>)
 8000fe4:	f004 fcd6 	bl	8005994 <HAL_UART_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000fee:	f000 f8a3 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200002d8 	.word	0x200002d8
 8000ffc:	40004400 	.word	0x40004400

08001000 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001006:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <MX_DMA_Init+0x38>)
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	4a0b      	ldr	r2, [pc, #44]	@ (8001038 <MX_DMA_Init+0x38>)
 800100c:	f043 0302 	orr.w	r3, r3, #2
 8001010:	6153      	str	r3, [r2, #20]
 8001012:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <MX_DMA_Init+0x38>)
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2100      	movs	r1, #0
 8001022:	2038      	movs	r0, #56	@ 0x38
 8001024:	f001 fb91 	bl	800274a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001028:	2038      	movs	r0, #56	@ 0x38
 800102a:	f001 fbaa 	bl	8002782 <HAL_NVIC_EnableIRQ>

}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40021000 	.word	0x40021000

0800103c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	@ 0x28
 8001040:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
 8001050:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001052:	4b36      	ldr	r3, [pc, #216]	@ (800112c <MX_GPIO_Init+0xf0>)
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	4a35      	ldr	r2, [pc, #212]	@ (800112c <MX_GPIO_Init+0xf0>)
 8001058:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800105c:	6153      	str	r3, [r2, #20]
 800105e:	4b33      	ldr	r3, [pc, #204]	@ (800112c <MX_GPIO_Init+0xf0>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800106a:	4b30      	ldr	r3, [pc, #192]	@ (800112c <MX_GPIO_Init+0xf0>)
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	4a2f      	ldr	r2, [pc, #188]	@ (800112c <MX_GPIO_Init+0xf0>)
 8001070:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001074:	6153      	str	r3, [r2, #20]
 8001076:	4b2d      	ldr	r3, [pc, #180]	@ (800112c <MX_GPIO_Init+0xf0>)
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001082:	4b2a      	ldr	r3, [pc, #168]	@ (800112c <MX_GPIO_Init+0xf0>)
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	4a29      	ldr	r2, [pc, #164]	@ (800112c <MX_GPIO_Init+0xf0>)
 8001088:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800108c:	6153      	str	r3, [r2, #20]
 800108e:	4b27      	ldr	r3, [pc, #156]	@ (800112c <MX_GPIO_Init+0xf0>)
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	4b24      	ldr	r3, [pc, #144]	@ (800112c <MX_GPIO_Init+0xf0>)
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	4a23      	ldr	r2, [pc, #140]	@ (800112c <MX_GPIO_Init+0xf0>)
 80010a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010a4:	6153      	str	r3, [r2, #20]
 80010a6:	4b21      	ldr	r3, [pc, #132]	@ (800112c <MX_GPIO_Init+0xf0>)
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2120      	movs	r1, #32
 80010b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ba:	f001 feb9 	bl	8002e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010c4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80010c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	4619      	mov	r1, r3
 80010d4:	4816      	ldr	r0, [pc, #88]	@ (8001130 <MX_GPIO_Init+0xf4>)
 80010d6:	f001 fd21 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010da:	2320      	movs	r3, #32
 80010dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010de:	2301      	movs	r3, #1
 80010e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e6:	2300      	movs	r3, #0
 80010e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	4619      	mov	r1, r3
 80010f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010f4:	f001 fd12 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R1_Pin R2_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R1_Pin|R2_Pin;
 80010f8:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80010fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010fe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001102:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4619      	mov	r1, r3
 800110e:	4809      	ldr	r0, [pc, #36]	@ (8001134 <MX_GPIO_Init+0xf8>)
 8001110:	f001 fd04 	bl	8002b1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001114:	2200      	movs	r2, #0
 8001116:	2100      	movs	r1, #0
 8001118:	2017      	movs	r0, #23
 800111a:	f001 fb16 	bl	800274a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800111e:	2017      	movs	r0, #23
 8001120:	f001 fb2f 	bl	8002782 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001124:	bf00      	nop
 8001126:	3728      	adds	r7, #40	@ 0x28
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40021000 	.word	0x40021000
 8001130:	48000800 	.word	0x48000800
 8001134:	48000400 	.word	0x48000400

08001138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800113c:	b672      	cpsid	i
}
 800113e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <Error_Handler+0x8>

08001144 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114a:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <HAL_MspInit+0x44>)
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	4a0e      	ldr	r2, [pc, #56]	@ (8001188 <HAL_MspInit+0x44>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6193      	str	r3, [r2, #24]
 8001156:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <HAL_MspInit+0x44>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001162:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <HAL_MspInit+0x44>)
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	4a08      	ldr	r2, [pc, #32]	@ (8001188 <HAL_MspInit+0x44>)
 8001168:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800116c:	61d3      	str	r3, [r2, #28]
 800116e:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <HAL_MspInit+0x44>)
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800117a:	2007      	movs	r0, #7
 800117c:	f001 fada 	bl	8002734 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40021000 	.word	0x40021000

0800118c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	@ 0x28
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a29      	ldr	r2, [pc, #164]	@ (8001250 <HAL_ADC_MspInit+0xc4>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d14b      	bne.n	8001246 <HAL_ADC_MspInit+0xba>
  {
    /* USER CODE BEGIN ADC2_MspInit 0 */

    /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80011ae:	4b29      	ldr	r3, [pc, #164]	@ (8001254 <HAL_ADC_MspInit+0xc8>)
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	4a28      	ldr	r2, [pc, #160]	@ (8001254 <HAL_ADC_MspInit+0xc8>)
 80011b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011b8:	6153      	str	r3, [r2, #20]
 80011ba:	4b26      	ldr	r3, [pc, #152]	@ (8001254 <HAL_ADC_MspInit+0xc8>)
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c6:	4b23      	ldr	r3, [pc, #140]	@ (8001254 <HAL_ADC_MspInit+0xc8>)
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	4a22      	ldr	r2, [pc, #136]	@ (8001254 <HAL_ADC_MspInit+0xc8>)
 80011cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80011d0:	6153      	str	r3, [r2, #20]
 80011d2:	4b20      	ldr	r3, [pc, #128]	@ (8001254 <HAL_ADC_MspInit+0xc8>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PC0     ------> ADC2_IN6
    PC1     ------> ADC2_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011de:	2303      	movs	r3, #3
 80011e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e2:	2303      	movs	r3, #3
 80011e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	4619      	mov	r1, r3
 80011f0:	4819      	ldr	r0, [pc, #100]	@ (8001258 <HAL_ADC_MspInit+0xcc>)
 80011f2:	f001 fc93 	bl	8002b1c <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Channel1;
 80011f6:	4b19      	ldr	r3, [pc, #100]	@ (800125c <HAL_ADC_MspInit+0xd0>)
 80011f8:	4a19      	ldr	r2, [pc, #100]	@ (8001260 <HAL_ADC_MspInit+0xd4>)
 80011fa:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011fc:	4b17      	ldr	r3, [pc, #92]	@ (800125c <HAL_ADC_MspInit+0xd0>)
 80011fe:	2200      	movs	r2, #0
 8001200:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001202:	4b16      	ldr	r3, [pc, #88]	@ (800125c <HAL_ADC_MspInit+0xd0>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001208:	4b14      	ldr	r3, [pc, #80]	@ (800125c <HAL_ADC_MspInit+0xd0>)
 800120a:	2280      	movs	r2, #128	@ 0x80
 800120c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800120e:	4b13      	ldr	r3, [pc, #76]	@ (800125c <HAL_ADC_MspInit+0xd0>)
 8001210:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001214:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001216:	4b11      	ldr	r3, [pc, #68]	@ (800125c <HAL_ADC_MspInit+0xd0>)
 8001218:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800121c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800121e:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <HAL_ADC_MspInit+0xd0>)
 8001220:	2220      	movs	r2, #32
 8001222:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001224:	4b0d      	ldr	r3, [pc, #52]	@ (800125c <HAL_ADC_MspInit+0xd0>)
 8001226:	2200      	movs	r2, #0
 8001228:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800122a:	480c      	ldr	r0, [pc, #48]	@ (800125c <HAL_ADC_MspInit+0xd0>)
 800122c:	f001 fac3 	bl	80027b6 <HAL_DMA_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_ADC_MspInit+0xae>
    {
      Error_Handler();
 8001236:	f7ff ff7f 	bl	8001138 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a07      	ldr	r2, [pc, #28]	@ (800125c <HAL_ADC_MspInit+0xd0>)
 800123e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001240:	4a06      	ldr	r2, [pc, #24]	@ (800125c <HAL_ADC_MspInit+0xd0>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC2_MspInit 1 */

  }

}
 8001246:	bf00      	nop
 8001248:	3728      	adds	r7, #40	@ 0x28
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	50000100 	.word	0x50000100
 8001254:	40021000 	.word	0x40021000
 8001258:	48000800 	.word	0x48000800
 800125c:	20000248 	.word	0x20000248
 8001260:	40020408 	.word	0x40020408

08001264 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a0a      	ldr	r2, [pc, #40]	@ (800129c <HAL_TIM_Base_MspInit+0x38>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d10b      	bne.n	800128e <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001276:	4b0a      	ldr	r3, [pc, #40]	@ (80012a0 <HAL_TIM_Base_MspInit+0x3c>)
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	4a09      	ldr	r2, [pc, #36]	@ (80012a0 <HAL_TIM_Base_MspInit+0x3c>)
 800127c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001280:	6193      	str	r3, [r2, #24]
 8001282:	4b07      	ldr	r3, [pc, #28]	@ (80012a0 <HAL_TIM_Base_MspInit+0x3c>)
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800128e:	bf00      	nop
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40012c00 	.word	0x40012c00
 80012a0:	40021000 	.word	0x40021000

080012a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b088      	sub	sp, #32
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 030c 	add.w	r3, r7, #12
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a12      	ldr	r2, [pc, #72]	@ (800130c <HAL_TIM_MspPostInit+0x68>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d11d      	bne.n	8001302 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <HAL_TIM_MspPostInit+0x6c>)
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	4a11      	ldr	r2, [pc, #68]	@ (8001310 <HAL_TIM_MspPostInit+0x6c>)
 80012cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012d0:	6153      	str	r3, [r2, #20]
 80012d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001310 <HAL_TIM_MspPostInit+0x6c>)
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80012f0:	2306      	movs	r3, #6
 80012f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	4619      	mov	r1, r3
 80012fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012fe:	f001 fc0d 	bl	8002b1c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001302:	bf00      	nop
 8001304:	3720      	adds	r7, #32
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40012c00 	.word	0x40012c00
 8001310:	40021000 	.word	0x40021000

08001314 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	@ 0x28
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a17      	ldr	r2, [pc, #92]	@ (8001390 <HAL_UART_MspInit+0x7c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d128      	bne.n	8001388 <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001336:	4b17      	ldr	r3, [pc, #92]	@ (8001394 <HAL_UART_MspInit+0x80>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	4a16      	ldr	r2, [pc, #88]	@ (8001394 <HAL_UART_MspInit+0x80>)
 800133c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001340:	61d3      	str	r3, [r2, #28]
 8001342:	4b14      	ldr	r3, [pc, #80]	@ (8001394 <HAL_UART_MspInit+0x80>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	4b11      	ldr	r3, [pc, #68]	@ (8001394 <HAL_UART_MspInit+0x80>)
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	4a10      	ldr	r2, [pc, #64]	@ (8001394 <HAL_UART_MspInit+0x80>)
 8001354:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001358:	6153      	str	r3, [r2, #20]
 800135a:	4b0e      	ldr	r3, [pc, #56]	@ (8001394 <HAL_UART_MspInit+0x80>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001366:	230c      	movs	r3, #12
 8001368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001376:	2307      	movs	r3, #7
 8001378:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001384:	f001 fbca 	bl	8002b1c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001388:	bf00      	nop
 800138a:	3728      	adds	r7, #40	@ 0x28
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40004400 	.word	0x40004400
 8001394:	40021000 	.word	0x40021000

08001398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <NMI_Handler+0x4>

080013a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <HardFault_Handler+0x4>

080013a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <MemManage_Handler+0x4>

080013b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <BusFault_Handler+0x4>

080013b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <UsageFault_Handler+0x4>

080013c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ee:	f000 f963 	bl	80016b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(R3_Pin);
 80013fa:	2080      	movs	r0, #128	@ 0x80
 80013fc:	f001 fd30 	bl	8002e60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(R1_Pin);
 8001400:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001404:	f001 fd2c 	bl	8002e60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(R2_Pin);
 8001408:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800140c:	f001 fd28 	bl	8002e60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}

08001414 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001418:	4802      	ldr	r0, [pc, #8]	@ (8001424 <DMA2_Channel1_IRQHandler+0x10>)
 800141a:	f001 fa72 	bl	8002902 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000248 	.word	0x20000248

08001428 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return 1;
 800142c:	2301      	movs	r3, #1
}
 800142e:	4618      	mov	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <_kill>:

int _kill(int pid, int sig)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001442:	f005 fd2d 	bl	8006ea0 <__errno>
 8001446:	4603      	mov	r3, r0
 8001448:	2216      	movs	r2, #22
 800144a:	601a      	str	r2, [r3, #0]
  return -1;
 800144c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <_exit>:

void _exit (int status)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001460:	f04f 31ff 	mov.w	r1, #4294967295
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff ffe7 	bl	8001438 <_kill>
  while (1) {}    /* Make sure we hang here */
 800146a:	bf00      	nop
 800146c:	e7fd      	b.n	800146a <_exit+0x12>

0800146e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b086      	sub	sp, #24
 8001472:	af00      	add	r7, sp, #0
 8001474:	60f8      	str	r0, [r7, #12]
 8001476:	60b9      	str	r1, [r7, #8]
 8001478:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
 800147e:	e00a      	b.n	8001496 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001480:	f3af 8000 	nop.w
 8001484:	4601      	mov	r1, r0
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	1c5a      	adds	r2, r3, #1
 800148a:	60ba      	str	r2, [r7, #8]
 800148c:	b2ca      	uxtb	r2, r1
 800148e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	3301      	adds	r3, #1
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	429a      	cmp	r2, r3
 800149c:	dbf0      	blt.n	8001480 <_read+0x12>
  }

  return len;
 800149e:	687b      	ldr	r3, [r7, #4]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	e009      	b.n	80014ce <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	1c5a      	adds	r2, r3, #1
 80014be:	60ba      	str	r2, [r7, #8]
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fb78 	bl	8000bb8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	3301      	adds	r3, #1
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	dbf1      	blt.n	80014ba <_write+0x12>
  }
  return len;
 80014d6:	687b      	ldr	r3, [r7, #4]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <_close>:

int _close(int file)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001508:	605a      	str	r2, [r3, #4]
  return 0;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <_isatty>:

int _isatty(int file)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001520:	2301      	movs	r3, #1
}
 8001522:	4618      	mov	r0, r3
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800152e:	b480      	push	{r7}
 8001530:	b085      	sub	sp, #20
 8001532:	af00      	add	r7, sp, #0
 8001534:	60f8      	str	r0, [r7, #12]
 8001536:	60b9      	str	r1, [r7, #8]
 8001538:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001550:	4a14      	ldr	r2, [pc, #80]	@ (80015a4 <_sbrk+0x5c>)
 8001552:	4b15      	ldr	r3, [pc, #84]	@ (80015a8 <_sbrk+0x60>)
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800155c:	4b13      	ldr	r3, [pc, #76]	@ (80015ac <_sbrk+0x64>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d102      	bne.n	800156a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001564:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <_sbrk+0x64>)
 8001566:	4a12      	ldr	r2, [pc, #72]	@ (80015b0 <_sbrk+0x68>)
 8001568:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800156a:	4b10      	ldr	r3, [pc, #64]	@ (80015ac <_sbrk+0x64>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	429a      	cmp	r2, r3
 8001576:	d207      	bcs.n	8001588 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001578:	f005 fc92 	bl	8006ea0 <__errno>
 800157c:	4603      	mov	r3, r0
 800157e:	220c      	movs	r2, #12
 8001580:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001582:	f04f 33ff 	mov.w	r3, #4294967295
 8001586:	e009      	b.n	800159c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001588:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <_sbrk+0x64>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800158e:	4b07      	ldr	r3, [pc, #28]	@ (80015ac <_sbrk+0x64>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	4a05      	ldr	r2, [pc, #20]	@ (80015ac <_sbrk+0x64>)
 8001598:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800159a:	68fb      	ldr	r3, [r7, #12]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20010000 	.word	0x20010000
 80015a8:	00000400 	.word	0x00000400
 80015ac:	20000370 	.word	0x20000370
 80015b0:	200004c8 	.word	0x200004c8

080015b4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015b8:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <SystemInit+0x20>)
 80015ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015be:	4a05      	ldr	r2, [pc, #20]	@ (80015d4 <SystemInit+0x20>)
 80015c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001610 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80015dc:	f7ff ffea 	bl	80015b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015e0:	480c      	ldr	r0, [pc, #48]	@ (8001614 <LoopForever+0x6>)
  ldr r1, =_edata
 80015e2:	490d      	ldr	r1, [pc, #52]	@ (8001618 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015e4:	4a0d      	ldr	r2, [pc, #52]	@ (800161c <LoopForever+0xe>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e8:	e002      	b.n	80015f0 <LoopCopyDataInit>

080015ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ee:	3304      	adds	r3, #4

080015f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f4:	d3f9      	bcc.n	80015ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001620 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001624 <LoopForever+0x16>)
  movs r3, #0
 80015fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015fc:	e001      	b.n	8001602 <LoopFillZerobss>

080015fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001600:	3204      	adds	r2, #4

08001602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001604:	d3fb      	bcc.n	80015fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001606:	f005 fc51 	bl	8006eac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800160a:	f7ff fae7 	bl	8000bdc <main>

0800160e <LoopForever>:

LoopForever:
    b LoopForever
 800160e:	e7fe      	b.n	800160e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001610:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001618:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800161c:	08009034 	.word	0x08009034
  ldr r2, =_sbss
 8001620:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001624:	200004c4 	.word	0x200004c4

08001628 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001628:	e7fe      	b.n	8001628 <ADC1_2_IRQHandler>
	...

0800162c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001630:	4b08      	ldr	r3, [pc, #32]	@ (8001654 <HAL_Init+0x28>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a07      	ldr	r2, [pc, #28]	@ (8001654 <HAL_Init+0x28>)
 8001636:	f043 0310 	orr.w	r3, r3, #16
 800163a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800163c:	2003      	movs	r0, #3
 800163e:	f001 f879 	bl	8002734 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001642:	2000      	movs	r0, #0
 8001644:	f000 f808 	bl	8001658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001648:	f7ff fd7c 	bl	8001144 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40022000 	.word	0x40022000

08001658 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001660:	4b12      	ldr	r3, [pc, #72]	@ (80016ac <HAL_InitTick+0x54>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b12      	ldr	r3, [pc, #72]	@ (80016b0 <HAL_InitTick+0x58>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	4619      	mov	r1, r3
 800166a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800166e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001672:	fbb2 f3f3 	udiv	r3, r2, r3
 8001676:	4618      	mov	r0, r3
 8001678:	f001 f891 	bl	800279e <HAL_SYSTICK_Config>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e00e      	b.n	80016a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b0f      	cmp	r3, #15
 800168a:	d80a      	bhi.n	80016a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800168c:	2200      	movs	r2, #0
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	f04f 30ff 	mov.w	r0, #4294967295
 8001694:	f001 f859 	bl	800274a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001698:	4a06      	ldr	r2, [pc, #24]	@ (80016b4 <HAL_InitTick+0x5c>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	e000      	b.n	80016a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000008 	.word	0x20000008
 80016b0:	20000010 	.word	0x20000010
 80016b4:	2000000c 	.word	0x2000000c

080016b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016bc:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <HAL_IncTick+0x20>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <HAL_IncTick+0x24>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4413      	add	r3, r2
 80016c8:	4a04      	ldr	r2, [pc, #16]	@ (80016dc <HAL_IncTick+0x24>)
 80016ca:	6013      	str	r3, [r2, #0]
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	20000010 	.word	0x20000010
 80016dc:	20000374 	.word	0x20000374

080016e0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return uwTick;  
 80016e4:	4b03      	ldr	r3, [pc, #12]	@ (80016f4 <HAL_GetTick+0x14>)
 80016e6:	681b      	ldr	r3, [r3, #0]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	20000374 	.word	0x20000374

080016f8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b09a      	sub	sp, #104	@ 0x68
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800173c:	2300      	movs	r3, #0
 800173e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001742:	2300      	movs	r3, #0
 8001744:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001746:	2300      	movs	r3, #0
 8001748:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e1e3      	b.n	8001b1c <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175e:	f003 0310 	and.w	r3, r3, #16
 8001762:	2b00      	cmp	r3, #0
 8001764:	d176      	bne.n	8001854 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176a:	2b00      	cmp	r3, #0
 800176c:	d152      	bne.n	8001814 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff fcff 	bl	800118c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d13b      	bne.n	8001814 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 fe93 	bl	80024c8 <ADC_Disable>
 80017a2:	4603      	mov	r3, r0
 80017a4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ac:	f003 0310 	and.w	r3, r3, #16
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d12f      	bne.n	8001814 <HAL_ADC_Init+0xe0>
 80017b4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d12b      	bne.n	8001814 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80017c4:	f023 0302 	bic.w	r3, r3, #2
 80017c8:	f043 0202 	orr.w	r2, r3, #2
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017de:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80017ee:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017f0:	4b92      	ldr	r3, [pc, #584]	@ (8001a3c <HAL_ADC_Init+0x308>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a92      	ldr	r2, [pc, #584]	@ (8001a40 <HAL_ADC_Init+0x30c>)
 80017f6:	fba2 2303 	umull	r2, r3, r2, r3
 80017fa:	0c9a      	lsrs	r2, r3, #18
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001806:	e002      	b.n	800180e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	3b01      	subs	r3, #1
 800180c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1f9      	bne.n	8001808 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d007      	beq.n	8001832 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800182c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001830:	d110      	bne.n	8001854 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001836:	f023 0312 	bic.w	r3, r3, #18
 800183a:	f043 0210 	orr.w	r2, r3, #16
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001846:	f043 0201 	orr.w	r2, r3, #1
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001858:	f003 0310 	and.w	r3, r3, #16
 800185c:	2b00      	cmp	r3, #0
 800185e:	f040 8150 	bne.w	8001b02 <HAL_ADC_Init+0x3ce>
 8001862:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001866:	2b00      	cmp	r3, #0
 8001868:	f040 814b 	bne.w	8001b02 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001876:	2b00      	cmp	r3, #0
 8001878:	f040 8143 	bne.w	8001b02 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001880:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001884:	f043 0202 	orr.w	r2, r3, #2
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001894:	d004      	beq.n	80018a0 <HAL_ADC_Init+0x16c>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a6a      	ldr	r2, [pc, #424]	@ (8001a44 <HAL_ADC_Init+0x310>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d101      	bne.n	80018a4 <HAL_ADC_Init+0x170>
 80018a0:	4b69      	ldr	r3, [pc, #420]	@ (8001a48 <HAL_ADC_Init+0x314>)
 80018a2:	e000      	b.n	80018a6 <HAL_ADC_Init+0x172>
 80018a4:	4b69      	ldr	r3, [pc, #420]	@ (8001a4c <HAL_ADC_Init+0x318>)
 80018a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018b0:	d102      	bne.n	80018b8 <HAL_ADC_Init+0x184>
 80018b2:	4b64      	ldr	r3, [pc, #400]	@ (8001a44 <HAL_ADC_Init+0x310>)
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	e01a      	b.n	80018ee <HAL_ADC_Init+0x1ba>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a61      	ldr	r2, [pc, #388]	@ (8001a44 <HAL_ADC_Init+0x310>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d103      	bne.n	80018ca <HAL_ADC_Init+0x196>
 80018c2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	e011      	b.n	80018ee <HAL_ADC_Init+0x1ba>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a60      	ldr	r2, [pc, #384]	@ (8001a50 <HAL_ADC_Init+0x31c>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d102      	bne.n	80018da <HAL_ADC_Init+0x1a6>
 80018d4:	4b5f      	ldr	r3, [pc, #380]	@ (8001a54 <HAL_ADC_Init+0x320>)
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	e009      	b.n	80018ee <HAL_ADC_Init+0x1ba>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a5d      	ldr	r2, [pc, #372]	@ (8001a54 <HAL_ADC_Init+0x320>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d102      	bne.n	80018ea <HAL_ADC_Init+0x1b6>
 80018e4:	4b5a      	ldr	r3, [pc, #360]	@ (8001a50 <HAL_ADC_Init+0x31c>)
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	e001      	b.n	80018ee <HAL_ADC_Init+0x1ba>
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 0303 	and.w	r3, r3, #3
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d108      	bne.n	800190e <HAL_ADC_Init+0x1da>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b01      	cmp	r3, #1
 8001908:	d101      	bne.n	800190e <HAL_ADC_Init+0x1da>
 800190a:	2301      	movs	r3, #1
 800190c:	e000      	b.n	8001910 <HAL_ADC_Init+0x1dc>
 800190e:	2300      	movs	r3, #0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d11c      	bne.n	800194e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001914:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001916:	2b00      	cmp	r3, #0
 8001918:	d010      	beq.n	800193c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 0303 	and.w	r3, r3, #3
 8001922:	2b01      	cmp	r3, #1
 8001924:	d107      	bne.n	8001936 <HAL_ADC_Init+0x202>
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b01      	cmp	r3, #1
 8001930:	d101      	bne.n	8001936 <HAL_ADC_Init+0x202>
 8001932:	2301      	movs	r3, #1
 8001934:	e000      	b.n	8001938 <HAL_ADC_Init+0x204>
 8001936:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001938:	2b00      	cmp	r3, #0
 800193a:	d108      	bne.n	800194e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800193c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	431a      	orrs	r2, r3
 800194a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800194c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	7e5b      	ldrb	r3, [r3, #25]
 8001952:	035b      	lsls	r3, r3, #13
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001958:	2a01      	cmp	r2, #1
 800195a:	d002      	beq.n	8001962 <HAL_ADC_Init+0x22e>
 800195c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001960:	e000      	b.n	8001964 <HAL_ADC_Init+0x230>
 8001962:	2200      	movs	r2, #0
 8001964:	431a      	orrs	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	4313      	orrs	r3, r2
 8001972:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001974:	4313      	orrs	r3, r2
 8001976:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d11b      	bne.n	80019ba <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	7e5b      	ldrb	r3, [r3, #25]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d109      	bne.n	800199e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198e:	3b01      	subs	r3, #1
 8001990:	045a      	lsls	r2, r3, #17
 8001992:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001994:	4313      	orrs	r3, r2
 8001996:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800199a:	663b      	str	r3, [r7, #96]	@ 0x60
 800199c:	e00d      	b.n	80019ba <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80019a6:	f043 0220 	orr.w	r2, r3, #32
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b2:	f043 0201 	orr.w	r2, r3, #1
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d054      	beq.n	8001a6c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a22      	ldr	r2, [pc, #136]	@ (8001a50 <HAL_ADC_Init+0x31c>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d004      	beq.n	80019d6 <HAL_ADC_Init+0x2a2>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a20      	ldr	r2, [pc, #128]	@ (8001a54 <HAL_ADC_Init+0x320>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d140      	bne.n	8001a58 <HAL_ADC_Init+0x324>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019da:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 80019de:	d02a      	beq.n	8001a36 <HAL_ADC_Init+0x302>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019e8:	d022      	beq.n	8001a30 <HAL_ADC_Init+0x2fc>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ee:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 80019f2:	d01a      	beq.n	8001a2a <HAL_ADC_Init+0x2f6>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f8:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 80019fc:	d012      	beq.n	8001a24 <HAL_ADC_Init+0x2f0>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a02:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8001a06:	d00a      	beq.n	8001a1e <HAL_ADC_Init+0x2ea>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a0c:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8001a10:	d002      	beq.n	8001a18 <HAL_ADC_Init+0x2e4>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a16:	e023      	b.n	8001a60 <HAL_ADC_Init+0x32c>
 8001a18:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001a1c:	e020      	b.n	8001a60 <HAL_ADC_Init+0x32c>
 8001a1e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001a22:	e01d      	b.n	8001a60 <HAL_ADC_Init+0x32c>
 8001a24:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001a28:	e01a      	b.n	8001a60 <HAL_ADC_Init+0x32c>
 8001a2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a2e:	e017      	b.n	8001a60 <HAL_ADC_Init+0x32c>
 8001a30:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8001a34:	e014      	b.n	8001a60 <HAL_ADC_Init+0x32c>
 8001a36:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001a3a:	e011      	b.n	8001a60 <HAL_ADC_Init+0x32c>
 8001a3c:	20000008 	.word	0x20000008
 8001a40:	431bde83 	.word	0x431bde83
 8001a44:	50000100 	.word	0x50000100
 8001a48:	50000300 	.word	0x50000300
 8001a4c:	50000700 	.word	0x50000700
 8001a50:	50000400 	.word	0x50000400
 8001a54:	50000500 	.word	0x50000500
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001a64:	4313      	orrs	r3, r2
 8001a66:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 030c 	and.w	r3, r3, #12
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d114      	bne.n	8001aa4 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6812      	ldr	r2, [r2, #0]
 8001a84:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001a88:	f023 0302 	bic.w	r3, r3, #2
 8001a8c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	7e1b      	ldrb	r3, [r3, #24]
 8001a92:	039a      	lsls	r2, r3, #14
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8001b24 <HAL_ADC_Init+0x3f0>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6812      	ldr	r2, [r2, #0]
 8001ab2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001ab4:	430b      	orrs	r3, r1
 8001ab6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d10c      	bne.n	8001ada <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	f023 010f 	bic.w	r1, r3, #15
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	1e5a      	subs	r2, r3, #1
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ad8:	e007      	b.n	8001aea <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 020f 	bic.w	r2, r2, #15
 8001ae8:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af4:	f023 0303 	bic.w	r3, r3, #3
 8001af8:	f043 0201 	orr.w	r2, r3, #1
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b00:	e00a      	b.n	8001b18 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	f023 0312 	bic.w	r3, r3, #18
 8001b0a:	f043 0210 	orr.w	r2, r3, #16
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001b12:	2301      	movs	r3, #1
 8001b14:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001b18:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3768      	adds	r7, #104	@ 0x68
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	fff0c007 	.word	0xfff0c007

08001b28 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b34:	2300      	movs	r3, #0
 8001b36:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f040 80f7 	bne.w	8001d36 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <HAL_ADC_Start_DMA+0x2e>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e0f2      	b.n	8001d3c <HAL_ADC_Start_DMA+0x214>
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b66:	d004      	beq.n	8001b72 <HAL_ADC_Start_DMA+0x4a>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a75      	ldr	r2, [pc, #468]	@ (8001d44 <HAL_ADC_Start_DMA+0x21c>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d109      	bne.n	8001b86 <HAL_ADC_Start_DMA+0x5e>
 8001b72:	4b75      	ldr	r3, [pc, #468]	@ (8001d48 <HAL_ADC_Start_DMA+0x220>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 031f 	and.w	r3, r3, #31
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	bf0c      	ite	eq
 8001b7e:	2301      	moveq	r3, #1
 8001b80:	2300      	movne	r3, #0
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	e008      	b.n	8001b98 <HAL_ADC_Start_DMA+0x70>
 8001b86:	4b71      	ldr	r3, [pc, #452]	@ (8001d4c <HAL_ADC_Start_DMA+0x224>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 031f 	and.w	r3, r3, #31
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	bf0c      	ite	eq
 8001b92:	2301      	moveq	r3, #1
 8001b94:	2300      	movne	r3, #0
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 80c5 	beq.w	8001d28 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 fc2e 	bl	8002400 <ADC_Enable>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001ba8:	7dfb      	ldrb	r3, [r7, #23]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f040 80b7 	bne.w	8001d1e <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001bb8:	f023 0301 	bic.w	r3, r3, #1
 8001bbc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001bcc:	d004      	beq.n	8001bd8 <HAL_ADC_Start_DMA+0xb0>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a5c      	ldr	r2, [pc, #368]	@ (8001d44 <HAL_ADC_Start_DMA+0x21c>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d106      	bne.n	8001be6 <HAL_ADC_Start_DMA+0xbe>
 8001bd8:	4b5b      	ldr	r3, [pc, #364]	@ (8001d48 <HAL_ADC_Start_DMA+0x220>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 031f 	and.w	r3, r3, #31
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d010      	beq.n	8001c06 <HAL_ADC_Start_DMA+0xde>
 8001be4:	e005      	b.n	8001bf2 <HAL_ADC_Start_DMA+0xca>
 8001be6:	4b59      	ldr	r3, [pc, #356]	@ (8001d4c <HAL_ADC_Start_DMA+0x224>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 031f 	and.w	r3, r3, #31
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d009      	beq.n	8001c06 <HAL_ADC_Start_DMA+0xde>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001bfa:	d004      	beq.n	8001c06 <HAL_ADC_Start_DMA+0xde>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a53      	ldr	r2, [pc, #332]	@ (8001d50 <HAL_ADC_Start_DMA+0x228>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d115      	bne.n	8001c32 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d036      	beq.n	8001c8e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c24:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c28:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001c30:	e02d      	b.n	8001c8e <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c36:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c46:	d004      	beq.n	8001c52 <HAL_ADC_Start_DMA+0x12a>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a3d      	ldr	r2, [pc, #244]	@ (8001d44 <HAL_ADC_Start_DMA+0x21c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d10a      	bne.n	8001c68 <HAL_ADC_Start_DMA+0x140>
 8001c52:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	bf14      	ite	ne
 8001c60:	2301      	movne	r3, #1
 8001c62:	2300      	moveq	r3, #0
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	e008      	b.n	8001c7a <HAL_ADC_Start_DMA+0x152>
 8001c68:	4b39      	ldr	r3, [pc, #228]	@ (8001d50 <HAL_ADC_Start_DMA+0x228>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	bf14      	ite	ne
 8001c74:	2301      	movne	r3, #1
 8001c76:	2300      	moveq	r3, #0
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d007      	beq.n	8001c8e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c82:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c86:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c9a:	d106      	bne.n	8001caa <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca0:	f023 0206 	bic.w	r2, r3, #6
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	645a      	str	r2, [r3, #68]	@ 0x44
 8001ca8:	e002      	b.n	8001cb0 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cbc:	4a25      	ldr	r2, [pc, #148]	@ (8001d54 <HAL_ADC_Start_DMA+0x22c>)
 8001cbe:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cc4:	4a24      	ldr	r2, [pc, #144]	@ (8001d58 <HAL_ADC_Start_DMA+0x230>)
 8001cc6:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ccc:	4a23      	ldr	r2, [pc, #140]	@ (8001d5c <HAL_ADC_Start_DMA+0x234>)
 8001cce:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	221c      	movs	r2, #28
 8001cd6:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 0210 	orr.w	r2, r2, #16
 8001ce6:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68da      	ldr	r2, [r3, #12]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0201 	orr.w	r2, r2, #1
 8001cf6:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	3340      	adds	r3, #64	@ 0x40
 8001d02:	4619      	mov	r1, r3
 8001d04:	68ba      	ldr	r2, [r7, #8]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f000 fd9c 	bl	8002844 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0204 	orr.w	r2, r2, #4
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	e00d      	b.n	8001d3a <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001d26:	e008      	b.n	8001d3a <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001d34:	e001      	b.n	8001d3a <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d36:	2302      	movs	r3, #2
 8001d38:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	50000100 	.word	0x50000100
 8001d48:	50000300 	.word	0x50000300
 8001d4c:	50000700 	.word	0x50000700
 8001d50:	50000400 	.word	0x50000400
 8001d54:	08002335 	.word	0x08002335
 8001d58:	080023af 	.word	0x080023af
 8001d5c:	080023cb 	.word	0x080023cb

08001d60 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b09b      	sub	sp, #108	@ 0x6c
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d101      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x22>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e2c8      	b.n	8002314 <HAL_ADC_ConfigChannel+0x5b4>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f040 82ac 	bne.w	80022f2 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	d81c      	bhi.n	8001ddc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	4413      	add	r3, r2
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	461a      	mov	r2, r3
 8001db6:	231f      	movs	r3, #31
 8001db8:	4093      	lsls	r3, r2
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	4019      	ands	r1, r3
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	6818      	ldr	r0, [r3, #0]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	4413      	add	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	fa00 f203 	lsl.w	r2, r0, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	631a      	str	r2, [r3, #48]	@ 0x30
 8001dda:	e063      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b09      	cmp	r3, #9
 8001de2:	d81e      	bhi.n	8001e22 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	4613      	mov	r3, r2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4413      	add	r3, r2
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	3b1e      	subs	r3, #30
 8001df8:	221f      	movs	r2, #31
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	4019      	ands	r1, r3
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	4413      	add	r3, r2
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	3b1e      	subs	r3, #30
 8001e14:	fa00 f203 	lsl.w	r2, r0, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e20:	e040      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b0e      	cmp	r3, #14
 8001e28:	d81e      	bhi.n	8001e68 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	4413      	add	r3, r2
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	3b3c      	subs	r3, #60	@ 0x3c
 8001e3e:	221f      	movs	r2, #31
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	4019      	ands	r1, r3
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	6818      	ldr	r0, [r3, #0]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4413      	add	r3, r2
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	3b3c      	subs	r3, #60	@ 0x3c
 8001e5a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e66:	e01d      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	4613      	mov	r3, r2
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	4413      	add	r3, r2
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	3b5a      	subs	r3, #90	@ 0x5a
 8001e7c:	221f      	movs	r2, #31
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	4019      	ands	r1, r3
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	6818      	ldr	r0, [r3, #0]
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	4413      	add	r3, r2
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	3b5a      	subs	r3, #90	@ 0x5a
 8001e98:	fa00 f203 	lsl.w	r2, r0, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 030c 	and.w	r3, r3, #12
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f040 80e5 	bne.w	800207e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b09      	cmp	r3, #9
 8001eba:	d91c      	bls.n	8001ef6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6999      	ldr	r1, [r3, #24]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4413      	add	r3, r2
 8001ecc:	3b1e      	subs	r3, #30
 8001ece:	2207      	movs	r2, #7
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	4019      	ands	r1, r3
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	6898      	ldr	r0, [r3, #8]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	3b1e      	subs	r3, #30
 8001ee8:	fa00 f203 	lsl.w	r2, r0, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	619a      	str	r2, [r3, #24]
 8001ef4:	e019      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6959      	ldr	r1, [r3, #20]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4613      	mov	r3, r2
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4413      	add	r3, r2
 8001f06:	2207      	movs	r2, #7
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	4019      	ands	r1, r3
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	6898      	ldr	r0, [r3, #8]
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	4413      	add	r3, r2
 8001f1e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	695a      	ldr	r2, [r3, #20]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	08db      	lsrs	r3, r3, #3
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	2b03      	cmp	r3, #3
 8001f4a:	d84f      	bhi.n	8001fec <HAL_ADC_ConfigChannel+0x28c>
 8001f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8001f54 <HAL_ADC_ConfigChannel+0x1f4>)
 8001f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f52:	bf00      	nop
 8001f54:	08001f65 	.word	0x08001f65
 8001f58:	08001f87 	.word	0x08001f87
 8001f5c:	08001fa9 	.word	0x08001fa9
 8001f60:	08001fcb 	.word	0x08001fcb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001f6a:	4b99      	ldr	r3, [pc, #612]	@ (80021d0 <HAL_ADC_ConfigChannel+0x470>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	6812      	ldr	r2, [r2, #0]
 8001f72:	0691      	lsls	r1, r2, #26
 8001f74:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001f76:	430a      	orrs	r2, r1
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001f82:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f84:	e07b      	b.n	800207e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001f8c:	4b90      	ldr	r3, [pc, #576]	@ (80021d0 <HAL_ADC_ConfigChannel+0x470>)
 8001f8e:	4013      	ands	r3, r2
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	6812      	ldr	r2, [r2, #0]
 8001f94:	0691      	lsls	r1, r2, #26
 8001f96:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001fa4:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001fa6:	e06a      	b.n	800207e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001fae:	4b88      	ldr	r3, [pc, #544]	@ (80021d0 <HAL_ADC_ConfigChannel+0x470>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	6812      	ldr	r2, [r2, #0]
 8001fb6:	0691      	lsls	r1, r2, #26
 8001fb8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001fc6:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001fc8:	e059      	b.n	800207e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001fd0:	4b7f      	ldr	r3, [pc, #508]	@ (80021d0 <HAL_ADC_ConfigChannel+0x470>)
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	0691      	lsls	r1, r2, #26
 8001fda:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001fe8:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001fea:	e048      	b.n	800207e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ff2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	069b      	lsls	r3, r3, #26
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d107      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800200e:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002016:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	069b      	lsls	r3, r3, #26
 8002020:	429a      	cmp	r2, r3
 8002022:	d107      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002032:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800203a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	069b      	lsls	r3, r3, #26
 8002044:	429a      	cmp	r2, r3
 8002046:	d107      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002056:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800205e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	069b      	lsls	r3, r3, #26
 8002068:	429a      	cmp	r2, r3
 800206a:	d107      	bne.n	800207c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800207a:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 800207c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	2b01      	cmp	r3, #1
 800208a:	d108      	bne.n	800209e <HAL_ADC_ConfigChannel+0x33e>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b01      	cmp	r3, #1
 8002098:	d101      	bne.n	800209e <HAL_ADC_ConfigChannel+0x33e>
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x340>
 800209e:	2300      	movs	r3, #0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f040 8131 	bne.w	8002308 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d00f      	beq.n	80020ce <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2201      	movs	r2, #1
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43da      	mvns	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	400a      	ands	r2, r1
 80020c8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80020cc:	e049      	b.n	8002162 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2201      	movs	r2, #1
 80020dc:	409a      	lsls	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b09      	cmp	r3, #9
 80020ee:	d91c      	bls.n	800212a <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6999      	ldr	r1, [r3, #24]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	4613      	mov	r3, r2
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	4413      	add	r3, r2
 8002100:	3b1b      	subs	r3, #27
 8002102:	2207      	movs	r2, #7
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	4019      	ands	r1, r3
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	6898      	ldr	r0, [r3, #8]
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	4613      	mov	r3, r2
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	4413      	add	r3, r2
 800211a:	3b1b      	subs	r3, #27
 800211c:	fa00 f203 	lsl.w	r2, r0, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	430a      	orrs	r2, r1
 8002126:	619a      	str	r2, [r3, #24]
 8002128:	e01b      	b.n	8002162 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6959      	ldr	r1, [r3, #20]
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	4613      	mov	r3, r2
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	4413      	add	r3, r2
 800213c:	2207      	movs	r2, #7
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	4019      	ands	r1, r3
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	6898      	ldr	r0, [r3, #8]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	4613      	mov	r3, r2
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	4413      	add	r3, r2
 8002156:	fa00 f203 	lsl.w	r2, r0, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800216a:	d004      	beq.n	8002176 <HAL_ADC_ConfigChannel+0x416>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a18      	ldr	r2, [pc, #96]	@ (80021d4 <HAL_ADC_ConfigChannel+0x474>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d101      	bne.n	800217a <HAL_ADC_ConfigChannel+0x41a>
 8002176:	4b18      	ldr	r3, [pc, #96]	@ (80021d8 <HAL_ADC_ConfigChannel+0x478>)
 8002178:	e000      	b.n	800217c <HAL_ADC_ConfigChannel+0x41c>
 800217a:	4b18      	ldr	r3, [pc, #96]	@ (80021dc <HAL_ADC_ConfigChannel+0x47c>)
 800217c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2b10      	cmp	r3, #16
 8002184:	d105      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002186:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800218e:	2b00      	cmp	r3, #0
 8002190:	d015      	beq.n	80021be <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002196:	2b11      	cmp	r3, #17
 8002198:	d105      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800219a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00b      	beq.n	80021be <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80021aa:	2b12      	cmp	r3, #18
 80021ac:	f040 80ac 	bne.w	8002308 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80021b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f040 80a5 	bne.w	8002308 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021c6:	d10b      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x480>
 80021c8:	4b02      	ldr	r3, [pc, #8]	@ (80021d4 <HAL_ADC_ConfigChannel+0x474>)
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	e023      	b.n	8002216 <HAL_ADC_ConfigChannel+0x4b6>
 80021ce:	bf00      	nop
 80021d0:	83fff000 	.word	0x83fff000
 80021d4:	50000100 	.word	0x50000100
 80021d8:	50000300 	.word	0x50000300
 80021dc:	50000700 	.word	0x50000700
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a4e      	ldr	r2, [pc, #312]	@ (8002320 <HAL_ADC_ConfigChannel+0x5c0>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d103      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x492>
 80021ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	e011      	b.n	8002216 <HAL_ADC_ConfigChannel+0x4b6>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a4b      	ldr	r2, [pc, #300]	@ (8002324 <HAL_ADC_ConfigChannel+0x5c4>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d102      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x4a2>
 80021fc:	4b4a      	ldr	r3, [pc, #296]	@ (8002328 <HAL_ADC_ConfigChannel+0x5c8>)
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	e009      	b.n	8002216 <HAL_ADC_ConfigChannel+0x4b6>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a48      	ldr	r2, [pc, #288]	@ (8002328 <HAL_ADC_ConfigChannel+0x5c8>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d102      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x4b2>
 800220c:	4b45      	ldr	r3, [pc, #276]	@ (8002324 <HAL_ADC_ConfigChannel+0x5c4>)
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	e001      	b.n	8002216 <HAL_ADC_ConfigChannel+0x4b6>
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 0303 	and.w	r3, r3, #3
 8002220:	2b01      	cmp	r3, #1
 8002222:	d108      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x4d6>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b01      	cmp	r3, #1
 8002230:	d101      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x4d6>
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <HAL_ADC_ConfigChannel+0x4d8>
 8002236:	2300      	movs	r3, #0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d150      	bne.n	80022de <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800223c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800223e:	2b00      	cmp	r3, #0
 8002240:	d010      	beq.n	8002264 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	2b01      	cmp	r3, #1
 800224c:	d107      	bne.n	800225e <HAL_ADC_ConfigChannel+0x4fe>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b01      	cmp	r3, #1
 8002258:	d101      	bne.n	800225e <HAL_ADC_ConfigChannel+0x4fe>
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <HAL_ADC_ConfigChannel+0x500>
 800225e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002260:	2b00      	cmp	r3, #0
 8002262:	d13c      	bne.n	80022de <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b10      	cmp	r3, #16
 800226a:	d11d      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x548>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002274:	d118      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002276:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800227e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002280:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002282:	4b2a      	ldr	r3, [pc, #168]	@ (800232c <HAL_ADC_ConfigChannel+0x5cc>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a2a      	ldr	r2, [pc, #168]	@ (8002330 <HAL_ADC_ConfigChannel+0x5d0>)
 8002288:	fba2 2303 	umull	r2, r3, r2, r3
 800228c:	0c9a      	lsrs	r2, r3, #18
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002298:	e002      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	3b01      	subs	r3, #1
 800229e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f9      	bne.n	800229a <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022a6:	e02e      	b.n	8002306 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b11      	cmp	r3, #17
 80022ae:	d10b      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x568>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022b8:	d106      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80022ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80022c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022c4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022c6:	e01e      	b.n	8002306 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b12      	cmp	r3, #18
 80022ce:	d11a      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80022d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80022d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022da:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022dc:	e013      	b.n	8002306 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e2:	f043 0220 	orr.w	r2, r3, #32
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80022f0:	e00a      	b.n	8002308 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f6:	f043 0220 	orr.w	r2, r3, #32
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002304:	e000      	b.n	8002308 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002306:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002310:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002314:	4618      	mov	r0, r3
 8002316:	376c      	adds	r7, #108	@ 0x6c
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	50000100 	.word	0x50000100
 8002324:	50000400 	.word	0x50000400
 8002328:	50000500 	.word	0x50000500
 800232c:	20000008 	.word	0x20000008
 8002330:	431bde83 	.word	0x431bde83

08002334 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002340:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002346:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800234a:	2b00      	cmp	r3, #0
 800234c:	d126      	bne.n	800239c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002352:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002364:	2b00      	cmp	r3, #0
 8002366:	d115      	bne.n	8002394 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800236c:	2b00      	cmp	r3, #0
 800236e:	d111      	bne.n	8002394 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002374:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002380:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d105      	bne.n	8002394 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238c:	f043 0201 	orr.w	r2, r3, #1
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f7ff f9af 	bl	80016f8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800239a:	e004      	b.n	80023a6 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	4798      	blx	r3
}
 80023a6:	bf00      	nop
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b084      	sub	sp, #16
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ba:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f7ff f9a5 	bl	800170c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80023c2:	bf00      	nop
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b084      	sub	sp, #16
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023dc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e8:	f043 0204 	orr.w	r2, r3, #4
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f7ff f995 	bl	8001720 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023f6:	bf00      	nop
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002408:	2300      	movs	r3, #0
 800240a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	2b01      	cmp	r3, #1
 8002418:	d108      	bne.n	800242c <ADC_Enable+0x2c>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <ADC_Enable+0x2c>
 8002428:	2301      	movs	r3, #1
 800242a:	e000      	b.n	800242e <ADC_Enable+0x2e>
 800242c:	2300      	movs	r3, #0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d143      	bne.n	80024ba <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	4b22      	ldr	r3, [pc, #136]	@ (80024c4 <ADC_Enable+0xc4>)
 800243a:	4013      	ands	r3, r2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00d      	beq.n	800245c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002444:	f043 0210 	orr.w	r2, r3, #16
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002450:	f043 0201 	orr.w	r2, r3, #1
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e02f      	b.n	80024bc <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0201 	orr.w	r2, r2, #1
 800246a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800246c:	f7ff f938 	bl	80016e0 <HAL_GetTick>
 8002470:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002472:	e01b      	b.n	80024ac <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002474:	f7ff f934 	bl	80016e0 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d914      	bls.n	80024ac <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b01      	cmp	r3, #1
 800248e:	d00d      	beq.n	80024ac <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002494:	f043 0210 	orr.w	r2, r3, #16
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a0:	f043 0201 	orr.w	r2, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e007      	b.n	80024bc <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d1dc      	bne.n	8002474 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	8000003f 	.word	0x8000003f

080024c8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d108      	bne.n	80024f4 <ADC_Disable+0x2c>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <ADC_Disable+0x2c>
 80024f0:	2301      	movs	r3, #1
 80024f2:	e000      	b.n	80024f6 <ADC_Disable+0x2e>
 80024f4:	2300      	movs	r3, #0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d047      	beq.n	800258a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 030d 	and.w	r3, r3, #13
 8002504:	2b01      	cmp	r3, #1
 8002506:	d10f      	bne.n	8002528 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0202 	orr.w	r2, r2, #2
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2203      	movs	r2, #3
 800251e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002520:	f7ff f8de 	bl	80016e0 <HAL_GetTick>
 8002524:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002526:	e029      	b.n	800257c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252c:	f043 0210 	orr.w	r2, r3, #16
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002538:	f043 0201 	orr.w	r2, r3, #1
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e023      	b.n	800258c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002544:	f7ff f8cc 	bl	80016e0 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d914      	bls.n	800257c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b01      	cmp	r3, #1
 800255e:	d10d      	bne.n	800257c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002564:	f043 0210 	orr.w	r2, r3, #16
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002570:	f043 0201 	orr.w	r2, r3, #1
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e007      	b.n	800258c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b01      	cmp	r3, #1
 8002588:	d0dc      	beq.n	8002544 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a4:	4b0c      	ldr	r3, [pc, #48]	@ (80025d8 <__NVIC_SetPriorityGrouping+0x44>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025b0:	4013      	ands	r3, r2
 80025b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025c6:	4a04      	ldr	r2, [pc, #16]	@ (80025d8 <__NVIC_SetPriorityGrouping+0x44>)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	60d3      	str	r3, [r2, #12]
}
 80025cc:	bf00      	nop
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025e0:	4b04      	ldr	r3, [pc, #16]	@ (80025f4 <__NVIC_GetPriorityGrouping+0x18>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	0a1b      	lsrs	r3, r3, #8
 80025e6:	f003 0307 	and.w	r3, r3, #7
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002606:	2b00      	cmp	r3, #0
 8002608:	db0b      	blt.n	8002622 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	f003 021f 	and.w	r2, r3, #31
 8002610:	4907      	ldr	r1, [pc, #28]	@ (8002630 <__NVIC_EnableIRQ+0x38>)
 8002612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	2001      	movs	r0, #1
 800261a:	fa00 f202 	lsl.w	r2, r0, r2
 800261e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	e000e100 	.word	0xe000e100

08002634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	6039      	str	r1, [r7, #0]
 800263e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002644:	2b00      	cmp	r3, #0
 8002646:	db0a      	blt.n	800265e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	b2da      	uxtb	r2, r3
 800264c:	490c      	ldr	r1, [pc, #48]	@ (8002680 <__NVIC_SetPriority+0x4c>)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	0112      	lsls	r2, r2, #4
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	440b      	add	r3, r1
 8002658:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800265c:	e00a      	b.n	8002674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	b2da      	uxtb	r2, r3
 8002662:	4908      	ldr	r1, [pc, #32]	@ (8002684 <__NVIC_SetPriority+0x50>)
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	3b04      	subs	r3, #4
 800266c:	0112      	lsls	r2, r2, #4
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	440b      	add	r3, r1
 8002672:	761a      	strb	r2, [r3, #24]
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	e000e100 	.word	0xe000e100
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002688:	b480      	push	{r7}
 800268a:	b089      	sub	sp, #36	@ 0x24
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f1c3 0307 	rsb	r3, r3, #7
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	bf28      	it	cs
 80026a6:	2304      	movcs	r3, #4
 80026a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	3304      	adds	r3, #4
 80026ae:	2b06      	cmp	r3, #6
 80026b0:	d902      	bls.n	80026b8 <NVIC_EncodePriority+0x30>
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3b03      	subs	r3, #3
 80026b6:	e000      	b.n	80026ba <NVIC_EncodePriority+0x32>
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026bc:	f04f 32ff 	mov.w	r2, #4294967295
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43da      	mvns	r2, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	401a      	ands	r2, r3
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026d0:	f04f 31ff 	mov.w	r1, #4294967295
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	fa01 f303 	lsl.w	r3, r1, r3
 80026da:	43d9      	mvns	r1, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e0:	4313      	orrs	r3, r2
         );
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3724      	adds	r7, #36	@ 0x24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
	...

080026f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3b01      	subs	r3, #1
 80026fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002700:	d301      	bcc.n	8002706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002702:	2301      	movs	r3, #1
 8002704:	e00f      	b.n	8002726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002706:	4a0a      	ldr	r2, [pc, #40]	@ (8002730 <SysTick_Config+0x40>)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3b01      	subs	r3, #1
 800270c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800270e:	210f      	movs	r1, #15
 8002710:	f04f 30ff 	mov.w	r0, #4294967295
 8002714:	f7ff ff8e 	bl	8002634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002718:	4b05      	ldr	r3, [pc, #20]	@ (8002730 <SysTick_Config+0x40>)
 800271a:	2200      	movs	r2, #0
 800271c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800271e:	4b04      	ldr	r3, [pc, #16]	@ (8002730 <SysTick_Config+0x40>)
 8002720:	2207      	movs	r2, #7
 8002722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	e000e010 	.word	0xe000e010

08002734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7ff ff29 	bl	8002594 <__NVIC_SetPriorityGrouping>
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b086      	sub	sp, #24
 800274e:	af00      	add	r7, sp, #0
 8002750:	4603      	mov	r3, r0
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	607a      	str	r2, [r7, #4]
 8002756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002758:	2300      	movs	r3, #0
 800275a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800275c:	f7ff ff3e 	bl	80025dc <__NVIC_GetPriorityGrouping>
 8002760:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	68b9      	ldr	r1, [r7, #8]
 8002766:	6978      	ldr	r0, [r7, #20]
 8002768:	f7ff ff8e 	bl	8002688 <NVIC_EncodePriority>
 800276c:	4602      	mov	r2, r0
 800276e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002772:	4611      	mov	r1, r2
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff ff5d 	bl	8002634 <__NVIC_SetPriority>
}
 800277a:	bf00      	nop
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	4603      	mov	r3, r0
 800278a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800278c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff ff31 	bl	80025f8 <__NVIC_EnableIRQ>
}
 8002796:	bf00      	nop
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7ff ffa2 	bl	80026f0 <SysTick_Config>
 80027ac:	4603      	mov	r3, r0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b084      	sub	sp, #16
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e037      	b.n	800283c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80027e2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80027e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80027f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002808:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	4313      	orrs	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f940 	bl	8002aa4 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
 8002850:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002852:	2300      	movs	r3, #0
 8002854:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f893 3020 	ldrb.w	r3, [r3, #32]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d101      	bne.n	8002864 <HAL_DMA_Start_IT+0x20>
 8002860:	2302      	movs	r3, #2
 8002862:	e04a      	b.n	80028fa <HAL_DMA_Start_IT+0xb6>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002872:	2b01      	cmp	r3, #1
 8002874:	d13a      	bne.n	80028ec <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2202      	movs	r2, #2
 800287a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0201 	bic.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	68b9      	ldr	r1, [r7, #8]
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 f8d4 	bl	8002a48 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d008      	beq.n	80028ba <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 020e 	orr.w	r2, r2, #14
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	e00f      	b.n	80028da <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f042 020a 	orr.w	r2, r2, #10
 80028c8:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0204 	bic.w	r2, r2, #4
 80028d8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f042 0201 	orr.w	r2, r2, #1
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	e005      	b.n	80028f8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80028f4:	2302      	movs	r3, #2
 80028f6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80028f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b084      	sub	sp, #16
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291e:	2204      	movs	r2, #4
 8002920:	409a      	lsls	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	4013      	ands	r3, r2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d024      	beq.n	8002974 <HAL_DMA_IRQHandler+0x72>
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b00      	cmp	r3, #0
 8002932:	d01f      	beq.n	8002974 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0320 	and.w	r3, r3, #32
 800293e:	2b00      	cmp	r3, #0
 8002940:	d107      	bne.n	8002952 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0204 	bic.w	r2, r2, #4
 8002950:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800295a:	2104      	movs	r1, #4
 800295c:	fa01 f202 	lsl.w	r2, r1, r2
 8002960:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002966:	2b00      	cmp	r3, #0
 8002968:	d06a      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002972:	e065      	b.n	8002a40 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002978:	2202      	movs	r2, #2
 800297a:	409a      	lsls	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4013      	ands	r3, r2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d02c      	beq.n	80029de <HAL_DMA_IRQHandler+0xdc>
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d027      	beq.n	80029de <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0320 	and.w	r3, r3, #32
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10b      	bne.n	80029b4 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 020a 	bic.w	r2, r2, #10
 80029aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029bc:	2102      	movs	r1, #2
 80029be:	fa01 f202 	lsl.w	r2, r1, r2
 80029c2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d035      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80029dc:	e030      	b.n	8002a40 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e2:	2208      	movs	r2, #8
 80029e4:	409a      	lsls	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	4013      	ands	r3, r2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d028      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x13e>
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	f003 0308 	and.w	r3, r3, #8
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d023      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 020e 	bic.w	r2, r2, #14
 8002a06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a10:	2101      	movs	r1, #1
 8002a12:	fa01 f202 	lsl.w	r2, r1, r2
 8002a16:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d004      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	4798      	blx	r3
    }
  }
}
 8002a3e:	e7ff      	b.n	8002a40 <HAL_DMA_IRQHandler+0x13e>
 8002a40:	bf00      	nop
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
 8002a54:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a5e:	2101      	movs	r1, #1
 8002a60:	fa01 f202 	lsl.w	r2, r1, r2
 8002a64:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b10      	cmp	r3, #16
 8002a74:	d108      	bne.n	8002a88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a86:	e007      	b.n	8002a98 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	60da      	str	r2, [r3, #12]
}
 8002a98:	bf00      	nop
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	4b14      	ldr	r3, [pc, #80]	@ (8002b04 <DMA_CalcBaseAndBitshift+0x60>)
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d80f      	bhi.n	8002ad8 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	461a      	mov	r2, r3
 8002abe:	4b12      	ldr	r3, [pc, #72]	@ (8002b08 <DMA_CalcBaseAndBitshift+0x64>)
 8002ac0:	4413      	add	r3, r2
 8002ac2:	4a12      	ldr	r2, [pc, #72]	@ (8002b0c <DMA_CalcBaseAndBitshift+0x68>)
 8002ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac8:	091b      	lsrs	r3, r3, #4
 8002aca:	009a      	lsls	r2, r3, #2
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a0f      	ldr	r2, [pc, #60]	@ (8002b10 <DMA_CalcBaseAndBitshift+0x6c>)
 8002ad4:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002ad6:	e00e      	b.n	8002af6 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	461a      	mov	r2, r3
 8002ade:	4b0d      	ldr	r3, [pc, #52]	@ (8002b14 <DMA_CalcBaseAndBitshift+0x70>)
 8002ae0:	4413      	add	r3, r2
 8002ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8002b0c <DMA_CalcBaseAndBitshift+0x68>)
 8002ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae8:	091b      	lsrs	r3, r3, #4
 8002aea:	009a      	lsls	r2, r3, #2
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a09      	ldr	r2, [pc, #36]	@ (8002b18 <DMA_CalcBaseAndBitshift+0x74>)
 8002af4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40020407 	.word	0x40020407
 8002b08:	bffdfff8 	.word	0xbffdfff8
 8002b0c:	cccccccd 	.word	0xcccccccd
 8002b10:	40020000 	.word	0x40020000
 8002b14:	bffdfbf8 	.word	0xbffdfbf8
 8002b18:	40020400 	.word	0x40020400

08002b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b087      	sub	sp, #28
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b26:	2300      	movs	r3, #0
 8002b28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b2a:	e160      	b.n	8002dee <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	2101      	movs	r1, #1
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	fa01 f303 	lsl.w	r3, r1, r3
 8002b38:	4013      	ands	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 8152 	beq.w	8002de8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 0303 	and.w	r3, r3, #3
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d005      	beq.n	8002b5c <HAL_GPIO_Init+0x40>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 0303 	and.w	r3, r3, #3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d130      	bne.n	8002bbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	2203      	movs	r2, #3
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	4013      	ands	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	68da      	ldr	r2, [r3, #12]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b92:	2201      	movs	r2, #1
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	091b      	lsrs	r3, r3, #4
 8002ba8:	f003 0201 	and.w	r2, r3, #1
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	2b03      	cmp	r3, #3
 8002bc8:	d017      	beq.n	8002bfa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	4013      	ands	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d123      	bne.n	8002c4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	08da      	lsrs	r2, r3, #3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3208      	adds	r2, #8
 8002c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	220f      	movs	r2, #15
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43db      	mvns	r3, r3
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	4013      	ands	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	691a      	ldr	r2, [r3, #16]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	08da      	lsrs	r2, r3, #3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3208      	adds	r2, #8
 8002c48:	6939      	ldr	r1, [r7, #16]
 8002c4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	2203      	movs	r2, #3
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	4013      	ands	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f003 0203 	and.w	r2, r3, #3
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 80ac 	beq.w	8002de8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c90:	4b5e      	ldr	r3, [pc, #376]	@ (8002e0c <HAL_GPIO_Init+0x2f0>)
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	4a5d      	ldr	r2, [pc, #372]	@ (8002e0c <HAL_GPIO_Init+0x2f0>)
 8002c96:	f043 0301 	orr.w	r3, r3, #1
 8002c9a:	6193      	str	r3, [r2, #24]
 8002c9c:	4b5b      	ldr	r3, [pc, #364]	@ (8002e0c <HAL_GPIO_Init+0x2f0>)
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ca8:	4a59      	ldr	r2, [pc, #356]	@ (8002e10 <HAL_GPIO_Init+0x2f4>)
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	089b      	lsrs	r3, r3, #2
 8002cae:	3302      	adds	r3, #2
 8002cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f003 0303 	and.w	r3, r3, #3
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	220f      	movs	r2, #15
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002cd2:	d025      	beq.n	8002d20 <HAL_GPIO_Init+0x204>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a4f      	ldr	r2, [pc, #316]	@ (8002e14 <HAL_GPIO_Init+0x2f8>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d01f      	beq.n	8002d1c <HAL_GPIO_Init+0x200>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a4e      	ldr	r2, [pc, #312]	@ (8002e18 <HAL_GPIO_Init+0x2fc>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d019      	beq.n	8002d18 <HAL_GPIO_Init+0x1fc>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a4d      	ldr	r2, [pc, #308]	@ (8002e1c <HAL_GPIO_Init+0x300>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d013      	beq.n	8002d14 <HAL_GPIO_Init+0x1f8>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a4c      	ldr	r2, [pc, #304]	@ (8002e20 <HAL_GPIO_Init+0x304>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d00d      	beq.n	8002d10 <HAL_GPIO_Init+0x1f4>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a4b      	ldr	r2, [pc, #300]	@ (8002e24 <HAL_GPIO_Init+0x308>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d007      	beq.n	8002d0c <HAL_GPIO_Init+0x1f0>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a4a      	ldr	r2, [pc, #296]	@ (8002e28 <HAL_GPIO_Init+0x30c>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d101      	bne.n	8002d08 <HAL_GPIO_Init+0x1ec>
 8002d04:	2306      	movs	r3, #6
 8002d06:	e00c      	b.n	8002d22 <HAL_GPIO_Init+0x206>
 8002d08:	2307      	movs	r3, #7
 8002d0a:	e00a      	b.n	8002d22 <HAL_GPIO_Init+0x206>
 8002d0c:	2305      	movs	r3, #5
 8002d0e:	e008      	b.n	8002d22 <HAL_GPIO_Init+0x206>
 8002d10:	2304      	movs	r3, #4
 8002d12:	e006      	b.n	8002d22 <HAL_GPIO_Init+0x206>
 8002d14:	2303      	movs	r3, #3
 8002d16:	e004      	b.n	8002d22 <HAL_GPIO_Init+0x206>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	e002      	b.n	8002d22 <HAL_GPIO_Init+0x206>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e000      	b.n	8002d22 <HAL_GPIO_Init+0x206>
 8002d20:	2300      	movs	r3, #0
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	f002 0203 	and.w	r2, r2, #3
 8002d28:	0092      	lsls	r2, r2, #2
 8002d2a:	4093      	lsls	r3, r2
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d32:	4937      	ldr	r1, [pc, #220]	@ (8002e10 <HAL_GPIO_Init+0x2f4>)
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	089b      	lsrs	r3, r3, #2
 8002d38:	3302      	adds	r3, #2
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d40:	4b3a      	ldr	r3, [pc, #232]	@ (8002e2c <HAL_GPIO_Init+0x310>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d64:	4a31      	ldr	r2, [pc, #196]	@ (8002e2c <HAL_GPIO_Init+0x310>)
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d6a:	4b30      	ldr	r3, [pc, #192]	@ (8002e2c <HAL_GPIO_Init+0x310>)
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	43db      	mvns	r3, r3
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	4013      	ands	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d8e:	4a27      	ldr	r2, [pc, #156]	@ (8002e2c <HAL_GPIO_Init+0x310>)
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d94:	4b25      	ldr	r3, [pc, #148]	@ (8002e2c <HAL_GPIO_Init+0x310>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4013      	ands	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002db8:	4a1c      	ldr	r2, [pc, #112]	@ (8002e2c <HAL_GPIO_Init+0x310>)
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8002e2c <HAL_GPIO_Init+0x310>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002de2:	4a12      	ldr	r2, [pc, #72]	@ (8002e2c <HAL_GPIO_Init+0x310>)
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	3301      	adds	r3, #1
 8002dec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	fa22 f303 	lsr.w	r3, r2, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f47f ae97 	bne.w	8002b2c <HAL_GPIO_Init+0x10>
  }
}
 8002dfe:	bf00      	nop
 8002e00:	bf00      	nop
 8002e02:	371c      	adds	r7, #28
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	40010000 	.word	0x40010000
 8002e14:	48000400 	.word	0x48000400
 8002e18:	48000800 	.word	0x48000800
 8002e1c:	48000c00 	.word	0x48000c00
 8002e20:	48001000 	.word	0x48001000
 8002e24:	48001400 	.word	0x48001400
 8002e28:	48001800 	.word	0x48001800
 8002e2c:	40010400 	.word	0x40010400

08002e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	807b      	strh	r3, [r7, #2]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e40:	787b      	ldrb	r3, [r7, #1]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e46:	887a      	ldrh	r2, [r7, #2]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e4c:	e002      	b.n	8002e54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e4e:	887a      	ldrh	r2, [r7, #2]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e6a:	4b08      	ldr	r3, [pc, #32]	@ (8002e8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e6c:	695a      	ldr	r2, [r3, #20]
 8002e6e:	88fb      	ldrh	r3, [r7, #6]
 8002e70:	4013      	ands	r3, r2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d006      	beq.n	8002e84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e76:	4a05      	ldr	r2, [pc, #20]	@ (8002e8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e78:	88fb      	ldrh	r3, [r7, #6]
 8002e7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e7c:	88fb      	ldrh	r3, [r7, #6]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 f806 	bl	8002e90 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e84:	bf00      	nop
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40010400 	.word	0x40010400

08002e90 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
	...

08002ea8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eb4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002eb8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002eba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ebe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d102      	bne.n	8002ece <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	f001 b80a 	b.w	8003ee2 <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ece:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ed2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 8161 	beq.w	80031a6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002ee4:	4bae      	ldr	r3, [pc, #696]	@ (80031a0 <HAL_RCC_OscConfig+0x2f8>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f003 030c 	and.w	r3, r3, #12
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	d00c      	beq.n	8002f0a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ef0:	4bab      	ldr	r3, [pc, #684]	@ (80031a0 <HAL_RCC_OscConfig+0x2f8>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 030c 	and.w	r3, r3, #12
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d157      	bne.n	8002fac <HAL_RCC_OscConfig+0x104>
 8002efc:	4ba8      	ldr	r3, [pc, #672]	@ (80031a0 <HAL_RCC_OscConfig+0x2f8>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002f04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f08:	d150      	bne.n	8002fac <HAL_RCC_OscConfig+0x104>
 8002f0a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f0e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f12:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002f16:	fa93 f3a3 	rbit	r3, r3
 8002f1a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f1e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f22:	fab3 f383 	clz	r3, r3
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b3f      	cmp	r3, #63	@ 0x3f
 8002f2a:	d802      	bhi.n	8002f32 <HAL_RCC_OscConfig+0x8a>
 8002f2c:	4b9c      	ldr	r3, [pc, #624]	@ (80031a0 <HAL_RCC_OscConfig+0x2f8>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	e015      	b.n	8002f5e <HAL_RCC_OscConfig+0xb6>
 8002f32:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f36:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8002f3e:	fa93 f3a3 	rbit	r3, r3
 8002f42:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8002f46:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f4a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002f4e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8002f52:	fa93 f3a3 	rbit	r3, r3
 8002f56:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002f5a:	4b91      	ldr	r3, [pc, #580]	@ (80031a0 <HAL_RCC_OscConfig+0x2f8>)
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002f62:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8002f66:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8002f6a:	fa92 f2a2 	rbit	r2, r2
 8002f6e:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8002f72:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002f76:	fab2 f282 	clz	r2, r2
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	f042 0220 	orr.w	r2, r2, #32
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	f002 021f 	and.w	r2, r2, #31
 8002f86:	2101      	movs	r1, #1
 8002f88:	fa01 f202 	lsl.w	r2, r1, r2
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 8108 	beq.w	80031a4 <HAL_RCC_OscConfig+0x2fc>
 8002f94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f98:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f040 80ff 	bne.w	80031a4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	f000 bf9b 	b.w	8003ee2 <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fb0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fbc:	d106      	bne.n	8002fcc <HAL_RCC_OscConfig+0x124>
 8002fbe:	4b78      	ldr	r3, [pc, #480]	@ (80031a0 <HAL_RCC_OscConfig+0x2f8>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a77      	ldr	r2, [pc, #476]	@ (80031a0 <HAL_RCC_OscConfig+0x2f8>)
 8002fc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	e036      	b.n	800303a <HAL_RCC_OscConfig+0x192>
 8002fcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fd0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10c      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x14e>
 8002fdc:	4b70      	ldr	r3, [pc, #448]	@ (80031a0 <HAL_RCC_OscConfig+0x2f8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a6f      	ldr	r2, [pc, #444]	@ (80031a0 <HAL_RCC_OscConfig+0x2f8>)
 8002fe2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fe6:	6013      	str	r3, [r2, #0]
 8002fe8:	4b6d      	ldr	r3, [pc, #436]	@ (80031a0 <HAL_RCC_OscConfig+0x2f8>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a6c      	ldr	r2, [pc, #432]	@ (80031a0 <HAL_RCC_OscConfig+0x2f8>)
 8002fee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ff2:	6013      	str	r3, [r2, #0]
 8002ff4:	e021      	b.n	800303a <HAL_RCC_OscConfig+0x192>
 8002ff6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ffa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003006:	d10c      	bne.n	8003022 <HAL_RCC_OscConfig+0x17a>
 8003008:	4b65      	ldr	r3, [pc, #404]	@ (80031a0 <HAL_RCC_OscConfig+0x2f8>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a64      	ldr	r2, [pc, #400]	@ (80031a0 <HAL_RCC_OscConfig+0x2f8>)
 800300e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003012:	6013      	str	r3, [r2, #0]
 8003014:	4b62      	ldr	r3, [pc, #392]	@ (80031a0 <HAL_RCC_OscConfig+0x2f8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a61      	ldr	r2, [pc, #388]	@ (80031a0 <HAL_RCC_OscConfig+0x2f8>)
 800301a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	e00b      	b.n	800303a <HAL_RCC_OscConfig+0x192>
 8003022:	4b5f      	ldr	r3, [pc, #380]	@ (80031a0 <HAL_RCC_OscConfig+0x2f8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a5e      	ldr	r2, [pc, #376]	@ (80031a0 <HAL_RCC_OscConfig+0x2f8>)
 8003028:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800302c:	6013      	str	r3, [r2, #0]
 800302e:	4b5c      	ldr	r3, [pc, #368]	@ (80031a0 <HAL_RCC_OscConfig+0x2f8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a5b      	ldr	r2, [pc, #364]	@ (80031a0 <HAL_RCC_OscConfig+0x2f8>)
 8003034:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003038:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800303a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800303e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d054      	beq.n	80030f4 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304a:	f7fe fb49 	bl	80016e0 <HAL_GetTick>
 800304e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003052:	e00a      	b.n	800306a <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003054:	f7fe fb44 	bl	80016e0 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b64      	cmp	r3, #100	@ 0x64
 8003062:	d902      	bls.n	800306a <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	f000 bf3c 	b.w	8003ee2 <HAL_RCC_OscConfig+0x103a>
 800306a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800306e:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003072:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003076:	fa93 f3a3 	rbit	r3, r3
 800307a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 800307e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003082:	fab3 f383 	clz	r3, r3
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b3f      	cmp	r3, #63	@ 0x3f
 800308a:	d802      	bhi.n	8003092 <HAL_RCC_OscConfig+0x1ea>
 800308c:	4b44      	ldr	r3, [pc, #272]	@ (80031a0 <HAL_RCC_OscConfig+0x2f8>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	e015      	b.n	80030be <HAL_RCC_OscConfig+0x216>
 8003092:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003096:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800309e:	fa93 f3a3 	rbit	r3, r3
 80030a2:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80030a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030aa:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80030ae:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80030b2:	fa93 f3a3 	rbit	r3, r3
 80030b6:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80030ba:	4b39      	ldr	r3, [pc, #228]	@ (80031a0 <HAL_RCC_OscConfig+0x2f8>)
 80030bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030be:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80030c2:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80030c6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80030ca:	fa92 f2a2 	rbit	r2, r2
 80030ce:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80030d2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80030d6:	fab2 f282 	clz	r2, r2
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	f042 0220 	orr.w	r2, r2, #32
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	f002 021f 	and.w	r2, r2, #31
 80030e6:	2101      	movs	r1, #1
 80030e8:	fa01 f202 	lsl.w	r2, r1, r2
 80030ec:	4013      	ands	r3, r2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0b0      	beq.n	8003054 <HAL_RCC_OscConfig+0x1ac>
 80030f2:	e058      	b.n	80031a6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f4:	f7fe faf4 	bl	80016e0 <HAL_GetTick>
 80030f8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030fc:	e00a      	b.n	8003114 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030fe:	f7fe faef 	bl	80016e0 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b64      	cmp	r3, #100	@ 0x64
 800310c:	d902      	bls.n	8003114 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	f000 bee7 	b.w	8003ee2 <HAL_RCC_OscConfig+0x103a>
 8003114:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003118:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003120:	fa93 f3a3 	rbit	r3, r3
 8003124:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8003128:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800312c:	fab3 f383 	clz	r3, r3
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b3f      	cmp	r3, #63	@ 0x3f
 8003134:	d802      	bhi.n	800313c <HAL_RCC_OscConfig+0x294>
 8003136:	4b1a      	ldr	r3, [pc, #104]	@ (80031a0 <HAL_RCC_OscConfig+0x2f8>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	e015      	b.n	8003168 <HAL_RCC_OscConfig+0x2c0>
 800313c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003140:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003144:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003148:	fa93 f3a3 	rbit	r3, r3
 800314c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003150:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003154:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003158:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800315c:	fa93 f3a3 	rbit	r3, r3
 8003160:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003164:	4b0e      	ldr	r3, [pc, #56]	@ (80031a0 <HAL_RCC_OscConfig+0x2f8>)
 8003166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003168:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800316c:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8003170:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8003174:	fa92 f2a2 	rbit	r2, r2
 8003178:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 800317c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003180:	fab2 f282 	clz	r2, r2
 8003184:	b2d2      	uxtb	r2, r2
 8003186:	f042 0220 	orr.w	r2, r2, #32
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	f002 021f 	and.w	r2, r2, #31
 8003190:	2101      	movs	r1, #1
 8003192:	fa01 f202 	lsl.w	r2, r1, r2
 8003196:	4013      	ands	r3, r2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1b0      	bne.n	80030fe <HAL_RCC_OscConfig+0x256>
 800319c:	e003      	b.n	80031a6 <HAL_RCC_OscConfig+0x2fe>
 800319e:	bf00      	nop
 80031a0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031aa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 816d 	beq.w	8003496 <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80031bc:	4bcd      	ldr	r3, [pc, #820]	@ (80034f4 <HAL_RCC_OscConfig+0x64c>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f003 030c 	and.w	r3, r3, #12
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00c      	beq.n	80031e2 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80031c8:	4bca      	ldr	r3, [pc, #808]	@ (80034f4 <HAL_RCC_OscConfig+0x64c>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f003 030c 	and.w	r3, r3, #12
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d16e      	bne.n	80032b2 <HAL_RCC_OscConfig+0x40a>
 80031d4:	4bc7      	ldr	r3, [pc, #796]	@ (80034f4 <HAL_RCC_OscConfig+0x64c>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80031dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031e0:	d167      	bne.n	80032b2 <HAL_RCC_OscConfig+0x40a>
 80031e2:	2302      	movs	r3, #2
 80031e4:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80031ec:	fa93 f3a3 	rbit	r3, r3
 80031f0:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80031f4:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031f8:	fab3 f383 	clz	r3, r3
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8003200:	d802      	bhi.n	8003208 <HAL_RCC_OscConfig+0x360>
 8003202:	4bbc      	ldr	r3, [pc, #752]	@ (80034f4 <HAL_RCC_OscConfig+0x64c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	e013      	b.n	8003230 <HAL_RCC_OscConfig+0x388>
 8003208:	2302      	movs	r3, #2
 800320a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8003212:	fa93 f3a3 	rbit	r3, r3
 8003216:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800321a:	2302      	movs	r3, #2
 800321c:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003220:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8003224:	fa93 f3a3 	rbit	r3, r3
 8003228:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800322c:	4bb1      	ldr	r3, [pc, #708]	@ (80034f4 <HAL_RCC_OscConfig+0x64c>)
 800322e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003230:	2202      	movs	r2, #2
 8003232:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8003236:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800323a:	fa92 f2a2 	rbit	r2, r2
 800323e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8003242:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003246:	fab2 f282 	clz	r2, r2
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	f042 0220 	orr.w	r2, r2, #32
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	f002 021f 	and.w	r2, r2, #31
 8003256:	2101      	movs	r1, #1
 8003258:	fa01 f202 	lsl.w	r2, r1, r2
 800325c:	4013      	ands	r3, r2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00a      	beq.n	8003278 <HAL_RCC_OscConfig+0x3d0>
 8003262:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003266:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d002      	beq.n	8003278 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	f000 be35 	b.w	8003ee2 <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003278:	4b9e      	ldr	r3, [pc, #632]	@ (80034f4 <HAL_RCC_OscConfig+0x64c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003280:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003284:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	21f8      	movs	r1, #248	@ 0xf8
 800328e:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003292:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8003296:	fa91 f1a1 	rbit	r1, r1
 800329a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 800329e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80032a2:	fab1 f181 	clz	r1, r1
 80032a6:	b2c9      	uxtb	r1, r1
 80032a8:	408b      	lsls	r3, r1
 80032aa:	4992      	ldr	r1, [pc, #584]	@ (80034f4 <HAL_RCC_OscConfig+0x64c>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032b0:	e0f1      	b.n	8003496 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032b6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 8083 	beq.w	80033ca <HAL_RCC_OscConfig+0x522>
 80032c4:	2301      	movs	r3, #1
 80032c6:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ca:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80032ce:	fa93 f3a3 	rbit	r3, r3
 80032d2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80032d6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032da:	fab3 f383 	clz	r3, r3
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80032e4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	461a      	mov	r2, r3
 80032ec:	2301      	movs	r3, #1
 80032ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f0:	f7fe f9f6 	bl	80016e0 <HAL_GetTick>
 80032f4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f8:	e00a      	b.n	8003310 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032fa:	f7fe f9f1 	bl	80016e0 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d902      	bls.n	8003310 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	f000 bde9 	b.w	8003ee2 <HAL_RCC_OscConfig+0x103a>
 8003310:	2302      	movs	r3, #2
 8003312:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003316:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800331a:	fa93 f3a3 	rbit	r3, r3
 800331e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8003322:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003326:	fab3 f383 	clz	r3, r3
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b3f      	cmp	r3, #63	@ 0x3f
 800332e:	d802      	bhi.n	8003336 <HAL_RCC_OscConfig+0x48e>
 8003330:	4b70      	ldr	r3, [pc, #448]	@ (80034f4 <HAL_RCC_OscConfig+0x64c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	e013      	b.n	800335e <HAL_RCC_OscConfig+0x4b6>
 8003336:	2302      	movs	r3, #2
 8003338:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003340:	fa93 f3a3 	rbit	r3, r3
 8003344:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003348:	2302      	movs	r3, #2
 800334a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800334e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003352:	fa93 f3a3 	rbit	r3, r3
 8003356:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800335a:	4b66      	ldr	r3, [pc, #408]	@ (80034f4 <HAL_RCC_OscConfig+0x64c>)
 800335c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335e:	2202      	movs	r2, #2
 8003360:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8003364:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8003368:	fa92 f2a2 	rbit	r2, r2
 800336c:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8003370:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003374:	fab2 f282 	clz	r2, r2
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	f042 0220 	orr.w	r2, r2, #32
 800337e:	b2d2      	uxtb	r2, r2
 8003380:	f002 021f 	and.w	r2, r2, #31
 8003384:	2101      	movs	r1, #1
 8003386:	fa01 f202 	lsl.w	r2, r1, r2
 800338a:	4013      	ands	r3, r2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0b4      	beq.n	80032fa <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003390:	4b58      	ldr	r3, [pc, #352]	@ (80034f4 <HAL_RCC_OscConfig+0x64c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003398:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800339c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	21f8      	movs	r1, #248	@ 0xf8
 80033a6:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033aa:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80033ae:	fa91 f1a1 	rbit	r1, r1
 80033b2:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80033b6:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80033ba:	fab1 f181 	clz	r1, r1
 80033be:	b2c9      	uxtb	r1, r1
 80033c0:	408b      	lsls	r3, r1
 80033c2:	494c      	ldr	r1, [pc, #304]	@ (80034f4 <HAL_RCC_OscConfig+0x64c>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	600b      	str	r3, [r1, #0]
 80033c8:	e065      	b.n	8003496 <HAL_RCC_OscConfig+0x5ee>
 80033ca:	2301      	movs	r3, #1
 80033cc:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80033d4:	fa93 f3a3 	rbit	r3, r3
 80033d8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80033dc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033e0:	fab3 f383 	clz	r3, r3
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80033ea:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	461a      	mov	r2, r3
 80033f2:	2300      	movs	r3, #0
 80033f4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f6:	f7fe f973 	bl	80016e0 <HAL_GetTick>
 80033fa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033fe:	e00a      	b.n	8003416 <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003400:	f7fe f96e 	bl	80016e0 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d902      	bls.n	8003416 <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	f000 bd66 	b.w	8003ee2 <HAL_RCC_OscConfig+0x103a>
 8003416:	2302      	movs	r3, #2
 8003418:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003420:	fa93 f3a3 	rbit	r3, r3
 8003424:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8003428:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800342c:	fab3 f383 	clz	r3, r3
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b3f      	cmp	r3, #63	@ 0x3f
 8003434:	d802      	bhi.n	800343c <HAL_RCC_OscConfig+0x594>
 8003436:	4b2f      	ldr	r3, [pc, #188]	@ (80034f4 <HAL_RCC_OscConfig+0x64c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	e013      	b.n	8003464 <HAL_RCC_OscConfig+0x5bc>
 800343c:	2302      	movs	r3, #2
 800343e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003442:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003446:	fa93 f3a3 	rbit	r3, r3
 800344a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800344e:	2302      	movs	r3, #2
 8003450:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003454:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003458:	fa93 f3a3 	rbit	r3, r3
 800345c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003460:	4b24      	ldr	r3, [pc, #144]	@ (80034f4 <HAL_RCC_OscConfig+0x64c>)
 8003462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003464:	2202      	movs	r2, #2
 8003466:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800346a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800346e:	fa92 f2a2 	rbit	r2, r2
 8003472:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8003476:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800347a:	fab2 f282 	clz	r2, r2
 800347e:	b2d2      	uxtb	r2, r2
 8003480:	f042 0220 	orr.w	r2, r2, #32
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	f002 021f 	and.w	r2, r2, #31
 800348a:	2101      	movs	r1, #1
 800348c:	fa01 f202 	lsl.w	r2, r1, r2
 8003490:	4013      	ands	r3, r2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1b4      	bne.n	8003400 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003496:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800349a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0308 	and.w	r3, r3, #8
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 8119 	beq.w	80036de <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034b0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 8082 	beq.w	80035c2 <HAL_RCC_OscConfig+0x71a>
 80034be:	2301      	movs	r3, #1
 80034c0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c8:	fa93 f3a3 	rbit	r3, r3
 80034cc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80034d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034d4:	fab3 f383 	clz	r3, r3
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	461a      	mov	r2, r3
 80034dc:	4b06      	ldr	r3, [pc, #24]	@ (80034f8 <HAL_RCC_OscConfig+0x650>)
 80034de:	4413      	add	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	461a      	mov	r2, r3
 80034e4:	2301      	movs	r3, #1
 80034e6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e8:	f7fe f8fa 	bl	80016e0 <HAL_GetTick>
 80034ec:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f0:	e00f      	b.n	8003512 <HAL_RCC_OscConfig+0x66a>
 80034f2:	bf00      	nop
 80034f4:	40021000 	.word	0x40021000
 80034f8:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034fc:	f7fe f8f0 	bl	80016e0 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d902      	bls.n	8003512 <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	f000 bce8 	b.w	8003ee2 <HAL_RCC_OscConfig+0x103a>
 8003512:	2302      	movs	r3, #2
 8003514:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003518:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800351c:	fa93 f2a3 	rbit	r2, r3
 8003520:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003524:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800352e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003532:	2202      	movs	r2, #2
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800353a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	fa93 f2a3 	rbit	r2, r3
 8003544:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003548:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003552:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003556:	2202      	movs	r2, #2
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800355e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	fa93 f2a3 	rbit	r2, r3
 8003568:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800356c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003570:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003572:	4bb0      	ldr	r3, [pc, #704]	@ (8003834 <HAL_RCC_OscConfig+0x98c>)
 8003574:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003576:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800357a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800357e:	2102      	movs	r1, #2
 8003580:	6019      	str	r1, [r3, #0]
 8003582:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003586:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	fa93 f1a3 	rbit	r1, r3
 8003590:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003594:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003598:	6019      	str	r1, [r3, #0]
  return result;
 800359a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800359e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	fab3 f383 	clz	r3, r3
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	f003 031f 	and.w	r3, r3, #31
 80035b4:	2101      	movs	r1, #1
 80035b6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ba:	4013      	ands	r3, r2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d09d      	beq.n	80034fc <HAL_RCC_OscConfig+0x654>
 80035c0:	e08d      	b.n	80036de <HAL_RCC_OscConfig+0x836>
 80035c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035c6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80035ca:	2201      	movs	r2, #1
 80035cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035d2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	fa93 f2a3 	rbit	r2, r3
 80035dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035e0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80035e4:	601a      	str	r2, [r3, #0]
  return result;
 80035e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035ea:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80035ee:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035f0:	fab3 f383 	clz	r3, r3
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	461a      	mov	r2, r3
 80035f8:	4b8f      	ldr	r3, [pc, #572]	@ (8003838 <HAL_RCC_OscConfig+0x990>)
 80035fa:	4413      	add	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	461a      	mov	r2, r3
 8003600:	2300      	movs	r3, #0
 8003602:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003604:	f7fe f86c 	bl	80016e0 <HAL_GetTick>
 8003608:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800360c:	e00a      	b.n	8003624 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800360e:	f7fe f867 	bl	80016e0 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d902      	bls.n	8003624 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	f000 bc5f 	b.w	8003ee2 <HAL_RCC_OscConfig+0x103a>
 8003624:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003628:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800362c:	2202      	movs	r2, #2
 800362e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003630:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003634:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	fa93 f2a3 	rbit	r2, r3
 800363e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003642:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800364c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003650:	2202      	movs	r2, #2
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003658:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	fa93 f2a3 	rbit	r2, r3
 8003662:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003666:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003670:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003674:	2202      	movs	r2, #2
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800367c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	fa93 f2a3 	rbit	r2, r3
 8003686:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800368a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800368e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003690:	4b68      	ldr	r3, [pc, #416]	@ (8003834 <HAL_RCC_OscConfig+0x98c>)
 8003692:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003694:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003698:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800369c:	2102      	movs	r1, #2
 800369e:	6019      	str	r1, [r3, #0]
 80036a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036a4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	fa93 f1a3 	rbit	r1, r3
 80036ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036b2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80036b6:	6019      	str	r1, [r3, #0]
  return result;
 80036b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036bc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	fab3 f383 	clz	r3, r3
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	f003 031f 	and.w	r3, r3, #31
 80036d2:	2101      	movs	r1, #1
 80036d4:	fa01 f303 	lsl.w	r3, r1, r3
 80036d8:	4013      	ands	r3, r2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d197      	bne.n	800360e <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036e2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0304 	and.w	r3, r3, #4
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 819c 	beq.w	8003a2c <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036f4:	2300      	movs	r3, #0
 80036f6:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036fa:	4b4e      	ldr	r3, [pc, #312]	@ (8003834 <HAL_RCC_OscConfig+0x98c>)
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d116      	bne.n	8003734 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003706:	4b4b      	ldr	r3, [pc, #300]	@ (8003834 <HAL_RCC_OscConfig+0x98c>)
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	4a4a      	ldr	r2, [pc, #296]	@ (8003834 <HAL_RCC_OscConfig+0x98c>)
 800370c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003710:	61d3      	str	r3, [r2, #28]
 8003712:	4b48      	ldr	r3, [pc, #288]	@ (8003834 <HAL_RCC_OscConfig+0x98c>)
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800371a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800371e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003728:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800372c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800372e:	2301      	movs	r3, #1
 8003730:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003734:	4b41      	ldr	r3, [pc, #260]	@ (800383c <HAL_RCC_OscConfig+0x994>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800373c:	2b00      	cmp	r3, #0
 800373e:	d11a      	bne.n	8003776 <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003740:	4b3e      	ldr	r3, [pc, #248]	@ (800383c <HAL_RCC_OscConfig+0x994>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a3d      	ldr	r2, [pc, #244]	@ (800383c <HAL_RCC_OscConfig+0x994>)
 8003746:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800374a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800374c:	f7fd ffc8 	bl	80016e0 <HAL_GetTick>
 8003750:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003754:	e009      	b.n	800376a <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003756:	f7fd ffc3 	bl	80016e0 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b64      	cmp	r3, #100	@ 0x64
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e3bb      	b.n	8003ee2 <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376a:	4b34      	ldr	r3, [pc, #208]	@ (800383c <HAL_RCC_OscConfig+0x994>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0ef      	beq.n	8003756 <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003776:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800377a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d106      	bne.n	8003794 <HAL_RCC_OscConfig+0x8ec>
 8003786:	4b2b      	ldr	r3, [pc, #172]	@ (8003834 <HAL_RCC_OscConfig+0x98c>)
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	4a2a      	ldr	r2, [pc, #168]	@ (8003834 <HAL_RCC_OscConfig+0x98c>)
 800378c:	f043 0301 	orr.w	r3, r3, #1
 8003790:	6213      	str	r3, [r2, #32]
 8003792:	e035      	b.n	8003800 <HAL_RCC_OscConfig+0x958>
 8003794:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003798:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10c      	bne.n	80037be <HAL_RCC_OscConfig+0x916>
 80037a4:	4b23      	ldr	r3, [pc, #140]	@ (8003834 <HAL_RCC_OscConfig+0x98c>)
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	4a22      	ldr	r2, [pc, #136]	@ (8003834 <HAL_RCC_OscConfig+0x98c>)
 80037aa:	f023 0301 	bic.w	r3, r3, #1
 80037ae:	6213      	str	r3, [r2, #32]
 80037b0:	4b20      	ldr	r3, [pc, #128]	@ (8003834 <HAL_RCC_OscConfig+0x98c>)
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	4a1f      	ldr	r2, [pc, #124]	@ (8003834 <HAL_RCC_OscConfig+0x98c>)
 80037b6:	f023 0304 	bic.w	r3, r3, #4
 80037ba:	6213      	str	r3, [r2, #32]
 80037bc:	e020      	b.n	8003800 <HAL_RCC_OscConfig+0x958>
 80037be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037c2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	2b05      	cmp	r3, #5
 80037cc:	d10c      	bne.n	80037e8 <HAL_RCC_OscConfig+0x940>
 80037ce:	4b19      	ldr	r3, [pc, #100]	@ (8003834 <HAL_RCC_OscConfig+0x98c>)
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	4a18      	ldr	r2, [pc, #96]	@ (8003834 <HAL_RCC_OscConfig+0x98c>)
 80037d4:	f043 0304 	orr.w	r3, r3, #4
 80037d8:	6213      	str	r3, [r2, #32]
 80037da:	4b16      	ldr	r3, [pc, #88]	@ (8003834 <HAL_RCC_OscConfig+0x98c>)
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	4a15      	ldr	r2, [pc, #84]	@ (8003834 <HAL_RCC_OscConfig+0x98c>)
 80037e0:	f043 0301 	orr.w	r3, r3, #1
 80037e4:	6213      	str	r3, [r2, #32]
 80037e6:	e00b      	b.n	8003800 <HAL_RCC_OscConfig+0x958>
 80037e8:	4b12      	ldr	r3, [pc, #72]	@ (8003834 <HAL_RCC_OscConfig+0x98c>)
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	4a11      	ldr	r2, [pc, #68]	@ (8003834 <HAL_RCC_OscConfig+0x98c>)
 80037ee:	f023 0301 	bic.w	r3, r3, #1
 80037f2:	6213      	str	r3, [r2, #32]
 80037f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003834 <HAL_RCC_OscConfig+0x98c>)
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	4a0e      	ldr	r2, [pc, #56]	@ (8003834 <HAL_RCC_OscConfig+0x98c>)
 80037fa:	f023 0304 	bic.w	r3, r3, #4
 80037fe:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003800:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003804:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 8085 	beq.w	800391c <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003812:	f7fd ff65 	bl	80016e0 <HAL_GetTick>
 8003816:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800381a:	e011      	b.n	8003840 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800381c:	f7fd ff60 	bl	80016e0 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	f241 3288 	movw	r2, #5000	@ 0x1388
 800382c:	4293      	cmp	r3, r2
 800382e:	d907      	bls.n	8003840 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e356      	b.n	8003ee2 <HAL_RCC_OscConfig+0x103a>
 8003834:	40021000 	.word	0x40021000
 8003838:	10908120 	.word	0x10908120
 800383c:	40007000 	.word	0x40007000
 8003840:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003844:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003848:	2202      	movs	r2, #2
 800384a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003850:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	fa93 f2a3 	rbit	r2, r3
 800385a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800385e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003868:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800386c:	2202      	movs	r2, #2
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003874:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	fa93 f2a3 	rbit	r2, r3
 800387e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003882:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003886:	601a      	str	r2, [r3, #0]
  return result;
 8003888:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800388c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003890:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003892:	fab3 f383 	clz	r3, r3
 8003896:	b2db      	uxtb	r3, r3
 8003898:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d102      	bne.n	80038a8 <HAL_RCC_OscConfig+0xa00>
 80038a2:	4b98      	ldr	r3, [pc, #608]	@ (8003b04 <HAL_RCC_OscConfig+0xc5c>)
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	e013      	b.n	80038d0 <HAL_RCC_OscConfig+0xa28>
 80038a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038ac:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80038b0:	2202      	movs	r2, #2
 80038b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038b8:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	fa93 f2a3 	rbit	r2, r3
 80038c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038c6:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	4b8d      	ldr	r3, [pc, #564]	@ (8003b04 <HAL_RCC_OscConfig+0xc5c>)
 80038ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80038d4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80038d8:	2102      	movs	r1, #2
 80038da:	6011      	str	r1, [r2, #0]
 80038dc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80038e0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80038e4:	6812      	ldr	r2, [r2, #0]
 80038e6:	fa92 f1a2 	rbit	r1, r2
 80038ea:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80038ee:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80038f2:	6011      	str	r1, [r2, #0]
  return result;
 80038f4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80038f8:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80038fc:	6812      	ldr	r2, [r2, #0]
 80038fe:	fab2 f282 	clz	r2, r2
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	f002 021f 	and.w	r2, r2, #31
 800390e:	2101      	movs	r1, #1
 8003910:	fa01 f202 	lsl.w	r2, r1, r2
 8003914:	4013      	ands	r3, r2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d080      	beq.n	800381c <HAL_RCC_OscConfig+0x974>
 800391a:	e07d      	b.n	8003a18 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800391c:	f7fd fee0 	bl	80016e0 <HAL_GetTick>
 8003920:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003924:	e00b      	b.n	800393e <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003926:	f7fd fedb 	bl	80016e0 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003936:	4293      	cmp	r3, r2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e2d1      	b.n	8003ee2 <HAL_RCC_OscConfig+0x103a>
 800393e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003942:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003946:	2202      	movs	r2, #2
 8003948:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800394e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	fa93 f2a3 	rbit	r2, r3
 8003958:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800395c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003966:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800396a:	2202      	movs	r2, #2
 800396c:	601a      	str	r2, [r3, #0]
 800396e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003972:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	fa93 f2a3 	rbit	r2, r3
 800397c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003980:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003984:	601a      	str	r2, [r3, #0]
  return result;
 8003986:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800398a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800398e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003990:	fab3 f383 	clz	r3, r3
 8003994:	b2db      	uxtb	r3, r3
 8003996:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	d102      	bne.n	80039a6 <HAL_RCC_OscConfig+0xafe>
 80039a0:	4b58      	ldr	r3, [pc, #352]	@ (8003b04 <HAL_RCC_OscConfig+0xc5c>)
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	e013      	b.n	80039ce <HAL_RCC_OscConfig+0xb26>
 80039a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039aa:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80039ae:	2202      	movs	r2, #2
 80039b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039b6:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	fa93 f2a3 	rbit	r2, r3
 80039c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039c4:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	4b4e      	ldr	r3, [pc, #312]	@ (8003b04 <HAL_RCC_OscConfig+0xc5c>)
 80039cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ce:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80039d2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80039d6:	2102      	movs	r1, #2
 80039d8:	6011      	str	r1, [r2, #0]
 80039da:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80039de:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80039e2:	6812      	ldr	r2, [r2, #0]
 80039e4:	fa92 f1a2 	rbit	r1, r2
 80039e8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80039ec:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80039f0:	6011      	str	r1, [r2, #0]
  return result;
 80039f2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80039f6:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80039fa:	6812      	ldr	r2, [r2, #0]
 80039fc:	fab2 f282 	clz	r2, r2
 8003a00:	b2d2      	uxtb	r2, r2
 8003a02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	f002 021f 	and.w	r2, r2, #31
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a12:	4013      	ands	r3, r2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d186      	bne.n	8003926 <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a18:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d105      	bne.n	8003a2c <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a20:	4b38      	ldr	r3, [pc, #224]	@ (8003b04 <HAL_RCC_OscConfig+0xc5c>)
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	4a37      	ldr	r2, [pc, #220]	@ (8003b04 <HAL_RCC_OscConfig+0xc5c>)
 8003a26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a2a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a30:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 8251 	beq.w	8003ee0 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a3e:	4b31      	ldr	r3, [pc, #196]	@ (8003b04 <HAL_RCC_OscConfig+0xc5c>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f003 030c 	and.w	r3, r3, #12
 8003a46:	2b08      	cmp	r3, #8
 8003a48:	f000 820f 	beq.w	8003e6a <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a50:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	f040 8165 	bne.w	8003d28 <HAL_RCC_OscConfig+0xe80>
 8003a5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a62:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003a66:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a70:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	fa93 f2a3 	rbit	r2, r3
 8003a7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a7e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003a82:	601a      	str	r2, [r3, #0]
  return result;
 8003a84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a88:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003a8c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a8e:	fab3 f383 	clz	r3, r3
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003a98:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa4:	f7fd fe1c 	bl	80016e0 <HAL_GetTick>
 8003aa8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aac:	e009      	b.n	8003ac2 <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aae:	f7fd fe17 	bl	80016e0 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e20f      	b.n	8003ee2 <HAL_RCC_OscConfig+0x103a>
 8003ac2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ac6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003aca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ace:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ad4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	fa93 f2a3 	rbit	r2, r3
 8003ade:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ae2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003ae6:	601a      	str	r2, [r3, #0]
  return result;
 8003ae8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003aec:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003af0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003af2:	fab3 f383 	clz	r3, r3
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b3f      	cmp	r3, #63	@ 0x3f
 8003afa:	d805      	bhi.n	8003b08 <HAL_RCC_OscConfig+0xc60>
 8003afc:	4b01      	ldr	r3, [pc, #4]	@ (8003b04 <HAL_RCC_OscConfig+0xc5c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	e02a      	b.n	8003b58 <HAL_RCC_OscConfig+0xcb0>
 8003b02:	bf00      	nop
 8003b04:	40021000 	.word	0x40021000
 8003b08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b0c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003b10:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b1a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	fa93 f2a3 	rbit	r2, r3
 8003b24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b28:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b32:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003b36:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b40:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	fa93 f2a3 	rbit	r2, r3
 8003b4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b4e:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	4bca      	ldr	r3, [pc, #808]	@ (8003e80 <HAL_RCC_OscConfig+0xfd8>)
 8003b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b58:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b5c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003b60:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003b64:	6011      	str	r1, [r2, #0]
 8003b66:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b6a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003b6e:	6812      	ldr	r2, [r2, #0]
 8003b70:	fa92 f1a2 	rbit	r1, r2
 8003b74:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b78:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003b7c:	6011      	str	r1, [r2, #0]
  return result;
 8003b7e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b82:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003b86:	6812      	ldr	r2, [r2, #0]
 8003b88:	fab2 f282 	clz	r2, r2
 8003b8c:	b2d2      	uxtb	r2, r2
 8003b8e:	f042 0220 	orr.w	r2, r2, #32
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	f002 021f 	and.w	r2, r2, #31
 8003b98:	2101      	movs	r1, #1
 8003b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d184      	bne.n	8003aae <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ba4:	4bb6      	ldr	r3, [pc, #728]	@ (8003e80 <HAL_RCC_OscConfig+0xfd8>)
 8003ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba8:	f023 020f 	bic.w	r2, r3, #15
 8003bac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bb0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb8:	49b1      	ldr	r1, [pc, #708]	@ (8003e80 <HAL_RCC_OscConfig+0xfd8>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8003bbe:	4bb0      	ldr	r3, [pc, #704]	@ (8003e80 <HAL_RCC_OscConfig+0xfd8>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8003bc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6a19      	ldr	r1, [r3, #32]
 8003bd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bd6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	430b      	orrs	r3, r1
 8003be0:	49a7      	ldr	r1, [pc, #668]	@ (8003e80 <HAL_RCC_OscConfig+0xfd8>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	604b      	str	r3, [r1, #4]
 8003be6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bea:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003bee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003bf2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bf8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	fa93 f2a3 	rbit	r2, r3
 8003c02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c06:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003c0a:	601a      	str	r2, [r3, #0]
  return result;
 8003c0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c10:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003c14:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c16:	fab3 f383 	clz	r3, r3
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003c20:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	461a      	mov	r2, r3
 8003c28:	2301      	movs	r3, #1
 8003c2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2c:	f7fd fd58 	bl	80016e0 <HAL_GetTick>
 8003c30:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c34:	e009      	b.n	8003c4a <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c36:	f7fd fd53 	bl	80016e0 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e14b      	b.n	8003ee2 <HAL_RCC_OscConfig+0x103a>
 8003c4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c4e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003c52:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c5c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	fa93 f2a3 	rbit	r2, r3
 8003c66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c6a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003c6e:	601a      	str	r2, [r3, #0]
  return result;
 8003c70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c74:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003c78:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c7a:	fab3 f383 	clz	r3, r3
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b3f      	cmp	r3, #63	@ 0x3f
 8003c82:	d802      	bhi.n	8003c8a <HAL_RCC_OscConfig+0xde2>
 8003c84:	4b7e      	ldr	r3, [pc, #504]	@ (8003e80 <HAL_RCC_OscConfig+0xfd8>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	e027      	b.n	8003cda <HAL_RCC_OscConfig+0xe32>
 8003c8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c8e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003c92:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c9c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	fa93 f2a3 	rbit	r2, r3
 8003ca6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003caa:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cb4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003cb8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cc2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	fa93 f2a3 	rbit	r2, r3
 8003ccc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cd0:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	4b6a      	ldr	r3, [pc, #424]	@ (8003e80 <HAL_RCC_OscConfig+0xfd8>)
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cda:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003cde:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003ce2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003ce6:	6011      	str	r1, [r2, #0]
 8003ce8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003cec:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003cf0:	6812      	ldr	r2, [r2, #0]
 8003cf2:	fa92 f1a2 	rbit	r1, r2
 8003cf6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003cfa:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003cfe:	6011      	str	r1, [r2, #0]
  return result;
 8003d00:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003d04:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003d08:	6812      	ldr	r2, [r2, #0]
 8003d0a:	fab2 f282 	clz	r2, r2
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	f042 0220 	orr.w	r2, r2, #32
 8003d14:	b2d2      	uxtb	r2, r2
 8003d16:	f002 021f 	and.w	r2, r2, #31
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d20:	4013      	ands	r3, r2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d087      	beq.n	8003c36 <HAL_RCC_OscConfig+0xd8e>
 8003d26:	e0db      	b.n	8003ee0 <HAL_RCC_OscConfig+0x1038>
 8003d28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d2c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003d30:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003d34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d3a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	fa93 f2a3 	rbit	r2, r3
 8003d44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d48:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003d4c:	601a      	str	r2, [r3, #0]
  return result;
 8003d4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d52:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003d56:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d58:	fab3 f383 	clz	r3, r3
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003d62:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	461a      	mov	r2, r3
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6e:	f7fd fcb7 	bl	80016e0 <HAL_GetTick>
 8003d72:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d76:	e009      	b.n	8003d8c <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d78:	f7fd fcb2 	bl	80016e0 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e0aa      	b.n	8003ee2 <HAL_RCC_OscConfig+0x103a>
 8003d8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d90:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003d94:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d9e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	fa93 f2a3 	rbit	r2, r3
 8003da8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003dac:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003db0:	601a      	str	r2, [r3, #0]
  return result;
 8003db2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003db6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003dba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dbc:	fab3 f383 	clz	r3, r3
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b3f      	cmp	r3, #63	@ 0x3f
 8003dc4:	d802      	bhi.n	8003dcc <HAL_RCC_OscConfig+0xf24>
 8003dc6:	4b2e      	ldr	r3, [pc, #184]	@ (8003e80 <HAL_RCC_OscConfig+0xfd8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	e027      	b.n	8003e1c <HAL_RCC_OscConfig+0xf74>
 8003dcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003dd0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003dd4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003dd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003dde:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	fa93 f2a3 	rbit	r2, r3
 8003de8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003dec:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003df6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003dfa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e04:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	fa93 f2a3 	rbit	r2, r3
 8003e0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e12:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	4b19      	ldr	r3, [pc, #100]	@ (8003e80 <HAL_RCC_OscConfig+0xfd8>)
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003e20:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003e24:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003e28:	6011      	str	r1, [r2, #0]
 8003e2a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003e2e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003e32:	6812      	ldr	r2, [r2, #0]
 8003e34:	fa92 f1a2 	rbit	r1, r2
 8003e38:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003e3c:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003e40:	6011      	str	r1, [r2, #0]
  return result;
 8003e42:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003e46:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003e4a:	6812      	ldr	r2, [r2, #0]
 8003e4c:	fab2 f282 	clz	r2, r2
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	f042 0220 	orr.w	r2, r2, #32
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	f002 021f 	and.w	r2, r2, #31
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e62:	4013      	ands	r3, r2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d187      	bne.n	8003d78 <HAL_RCC_OscConfig+0xed0>
 8003e68:	e03a      	b.n	8003ee0 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e6e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d104      	bne.n	8003e84 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e031      	b.n	8003ee2 <HAL_RCC_OscConfig+0x103a>
 8003e7e:	bf00      	nop
 8003e80:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e84:	4b19      	ldr	r3, [pc, #100]	@ (8003eec <HAL_RCC_OscConfig+0x1044>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003e8c:	4b17      	ldr	r3, [pc, #92]	@ (8003eec <HAL_RCC_OscConfig+0x1044>)
 8003e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e90:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003e94:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003e98:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8003e9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ea0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	69db      	ldr	r3, [r3, #28]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d117      	bne.n	8003edc <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003eac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003eb0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003eb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003eb8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d10b      	bne.n	8003edc <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003ec4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003ec8:	f003 020f 	and.w	r2, r3, #15
 8003ecc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ed0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d001      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e000      	b.n	8003ee2 <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	40021000 	.word	0x40021000

08003ef0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b09e      	sub	sp, #120	@ 0x78
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e154      	b.n	80041b2 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f08:	4b89      	ldr	r3, [pc, #548]	@ (8004130 <HAL_RCC_ClockConfig+0x240>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d910      	bls.n	8003f38 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f16:	4b86      	ldr	r3, [pc, #536]	@ (8004130 <HAL_RCC_ClockConfig+0x240>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f023 0207 	bic.w	r2, r3, #7
 8003f1e:	4984      	ldr	r1, [pc, #528]	@ (8004130 <HAL_RCC_ClockConfig+0x240>)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f26:	4b82      	ldr	r3, [pc, #520]	@ (8004130 <HAL_RCC_ClockConfig+0x240>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d001      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e13c      	b.n	80041b2 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d008      	beq.n	8003f56 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f44:	4b7b      	ldr	r3, [pc, #492]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	4978      	ldr	r1, [pc, #480]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 80cd 	beq.w	80040fe <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d137      	bne.n	8003fdc <HAL_RCC_ClockConfig+0xec>
 8003f6c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f70:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f74:	fa93 f3a3 	rbit	r3, r3
 8003f78:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003f7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f7c:	fab3 f383 	clz	r3, r3
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b3f      	cmp	r3, #63	@ 0x3f
 8003f84:	d802      	bhi.n	8003f8c <HAL_RCC_ClockConfig+0x9c>
 8003f86:	4b6b      	ldr	r3, [pc, #428]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	e00f      	b.n	8003fac <HAL_RCC_ClockConfig+0xbc>
 8003f8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f90:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f94:	fa93 f3a3 	rbit	r3, r3
 8003f98:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f9a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003fa0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003fa2:	fa93 f3a3 	rbit	r3, r3
 8003fa6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003fa8:	4b62      	ldr	r3, [pc, #392]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 8003faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003fb0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003fb2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003fb4:	fa92 f2a2 	rbit	r2, r2
 8003fb8:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003fba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003fbc:	fab2 f282 	clz	r2, r2
 8003fc0:	b2d2      	uxtb	r2, r2
 8003fc2:	f042 0220 	orr.w	r2, r2, #32
 8003fc6:	b2d2      	uxtb	r2, r2
 8003fc8:	f002 021f 	and.w	r2, r2, #31
 8003fcc:	2101      	movs	r1, #1
 8003fce:	fa01 f202 	lsl.w	r2, r1, r2
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d171      	bne.n	80040bc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e0ea      	b.n	80041b2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d137      	bne.n	8004054 <HAL_RCC_ClockConfig+0x164>
 8003fe4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003fe8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fec:	fa93 f3a3 	rbit	r3, r3
 8003ff0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003ff2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff4:	fab3 f383 	clz	r3, r3
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b3f      	cmp	r3, #63	@ 0x3f
 8003ffc:	d802      	bhi.n	8004004 <HAL_RCC_ClockConfig+0x114>
 8003ffe:	4b4d      	ldr	r3, [pc, #308]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	e00f      	b.n	8004024 <HAL_RCC_ClockConfig+0x134>
 8004004:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004008:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800400c:	fa93 f3a3 	rbit	r3, r3
 8004010:	647b      	str	r3, [r7, #68]	@ 0x44
 8004012:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004016:	643b      	str	r3, [r7, #64]	@ 0x40
 8004018:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800401a:	fa93 f3a3 	rbit	r3, r3
 800401e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004020:	4b44      	ldr	r3, [pc, #272]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 8004022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004024:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004028:	63ba      	str	r2, [r7, #56]	@ 0x38
 800402a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800402c:	fa92 f2a2 	rbit	r2, r2
 8004030:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004032:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004034:	fab2 f282 	clz	r2, r2
 8004038:	b2d2      	uxtb	r2, r2
 800403a:	f042 0220 	orr.w	r2, r2, #32
 800403e:	b2d2      	uxtb	r2, r2
 8004040:	f002 021f 	and.w	r2, r2, #31
 8004044:	2101      	movs	r1, #1
 8004046:	fa01 f202 	lsl.w	r2, r1, r2
 800404a:	4013      	ands	r3, r2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d135      	bne.n	80040bc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e0ae      	b.n	80041b2 <HAL_RCC_ClockConfig+0x2c2>
 8004054:	2302      	movs	r3, #2
 8004056:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800405a:	fa93 f3a3 	rbit	r3, r3
 800405e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004062:	fab3 f383 	clz	r3, r3
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b3f      	cmp	r3, #63	@ 0x3f
 800406a:	d802      	bhi.n	8004072 <HAL_RCC_ClockConfig+0x182>
 800406c:	4b31      	ldr	r3, [pc, #196]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	e00d      	b.n	800408e <HAL_RCC_ClockConfig+0x19e>
 8004072:	2302      	movs	r3, #2
 8004074:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004078:	fa93 f3a3 	rbit	r3, r3
 800407c:	627b      	str	r3, [r7, #36]	@ 0x24
 800407e:	2302      	movs	r3, #2
 8004080:	623b      	str	r3, [r7, #32]
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	fa93 f3a3 	rbit	r3, r3
 8004088:	61fb      	str	r3, [r7, #28]
 800408a:	4b2a      	ldr	r3, [pc, #168]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 800408c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408e:	2202      	movs	r2, #2
 8004090:	61ba      	str	r2, [r7, #24]
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	fa92 f2a2 	rbit	r2, r2
 8004098:	617a      	str	r2, [r7, #20]
  return result;
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	fab2 f282 	clz	r2, r2
 80040a0:	b2d2      	uxtb	r2, r2
 80040a2:	f042 0220 	orr.w	r2, r2, #32
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	f002 021f 	and.w	r2, r2, #31
 80040ac:	2101      	movs	r1, #1
 80040ae:	fa01 f202 	lsl.w	r2, r1, r2
 80040b2:	4013      	ands	r3, r2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e07a      	b.n	80041b2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f023 0203 	bic.w	r2, r3, #3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	491a      	ldr	r1, [pc, #104]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040ce:	f7fd fb07 	bl	80016e0 <HAL_GetTick>
 80040d2:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040d4:	e00a      	b.n	80040ec <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040d6:	f7fd fb03 	bl	80016e0 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e062      	b.n	80041b2 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ec:	4b11      	ldr	r3, [pc, #68]	@ (8004134 <HAL_RCC_ClockConfig+0x244>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f003 020c 	and.w	r2, r3, #12
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d1eb      	bne.n	80040d6 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004130 <HAL_RCC_ClockConfig+0x240>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0307 	and.w	r3, r3, #7
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	429a      	cmp	r2, r3
 800410a:	d215      	bcs.n	8004138 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410c:	4b08      	ldr	r3, [pc, #32]	@ (8004130 <HAL_RCC_ClockConfig+0x240>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f023 0207 	bic.w	r2, r3, #7
 8004114:	4906      	ldr	r1, [pc, #24]	@ (8004130 <HAL_RCC_ClockConfig+0x240>)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	4313      	orrs	r3, r2
 800411a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800411c:	4b04      	ldr	r3, [pc, #16]	@ (8004130 <HAL_RCC_ClockConfig+0x240>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0307 	and.w	r3, r3, #7
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	429a      	cmp	r2, r3
 8004128:	d006      	beq.n	8004138 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e041      	b.n	80041b2 <HAL_RCC_ClockConfig+0x2c2>
 800412e:	bf00      	nop
 8004130:	40022000 	.word	0x40022000
 8004134:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	d008      	beq.n	8004156 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004144:	4b1d      	ldr	r3, [pc, #116]	@ (80041bc <HAL_RCC_ClockConfig+0x2cc>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	491a      	ldr	r1, [pc, #104]	@ (80041bc <HAL_RCC_ClockConfig+0x2cc>)
 8004152:	4313      	orrs	r3, r2
 8004154:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	2b00      	cmp	r3, #0
 8004160:	d009      	beq.n	8004176 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004162:	4b16      	ldr	r3, [pc, #88]	@ (80041bc <HAL_RCC_ClockConfig+0x2cc>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	4912      	ldr	r1, [pc, #72]	@ (80041bc <HAL_RCC_ClockConfig+0x2cc>)
 8004172:	4313      	orrs	r3, r2
 8004174:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004176:	f000 f829 	bl	80041cc <HAL_RCC_GetSysClockFreq>
 800417a:	4601      	mov	r1, r0
 800417c:	4b0f      	ldr	r3, [pc, #60]	@ (80041bc <HAL_RCC_ClockConfig+0x2cc>)
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004184:	22f0      	movs	r2, #240	@ 0xf0
 8004186:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	fa92 f2a2 	rbit	r2, r2
 800418e:	60fa      	str	r2, [r7, #12]
  return result;
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	fab2 f282 	clz	r2, r2
 8004196:	b2d2      	uxtb	r2, r2
 8004198:	40d3      	lsrs	r3, r2
 800419a:	4a09      	ldr	r2, [pc, #36]	@ (80041c0 <HAL_RCC_ClockConfig+0x2d0>)
 800419c:	5cd3      	ldrb	r3, [r2, r3]
 800419e:	fa21 f303 	lsr.w	r3, r1, r3
 80041a2:	4a08      	ldr	r2, [pc, #32]	@ (80041c4 <HAL_RCC_ClockConfig+0x2d4>)
 80041a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80041a6:	4b08      	ldr	r3, [pc, #32]	@ (80041c8 <HAL_RCC_ClockConfig+0x2d8>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fd fa54 	bl	8001658 <HAL_InitTick>
  
  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3778      	adds	r7, #120	@ 0x78
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	40021000 	.word	0x40021000
 80041c0:	08008c74 	.word	0x08008c74
 80041c4:	20000008 	.word	0x20000008
 80041c8:	2000000c 	.word	0x2000000c

080041cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b087      	sub	sp, #28
 80041d0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80041d2:	2300      	movs	r3, #0
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	2300      	movs	r3, #0
 80041d8:	60bb      	str	r3, [r7, #8]
 80041da:	2300      	movs	r3, #0
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	2300      	movs	r3, #0
 80041e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80041e2:	2300      	movs	r3, #0
 80041e4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80041e6:	4b1f      	ldr	r3, [pc, #124]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x98>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f003 030c 	and.w	r3, r3, #12
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	d002      	beq.n	80041fc <HAL_RCC_GetSysClockFreq+0x30>
 80041f6:	2b08      	cmp	r3, #8
 80041f8:	d003      	beq.n	8004202 <HAL_RCC_GetSysClockFreq+0x36>
 80041fa:	e029      	b.n	8004250 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004268 <HAL_RCC_GetSysClockFreq+0x9c>)
 80041fe:	613b      	str	r3, [r7, #16]
      break;
 8004200:	e029      	b.n	8004256 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	0c9b      	lsrs	r3, r3, #18
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	4a18      	ldr	r2, [pc, #96]	@ (800426c <HAL_RCC_GetSysClockFreq+0xa0>)
 800420c:	5cd3      	ldrb	r3, [r2, r3]
 800420e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004210:	4b14      	ldr	r3, [pc, #80]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x98>)
 8004212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004214:	f003 030f 	and.w	r3, r3, #15
 8004218:	4a15      	ldr	r2, [pc, #84]	@ (8004270 <HAL_RCC_GetSysClockFreq+0xa4>)
 800421a:	5cd3      	ldrb	r3, [r2, r3]
 800421c:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d008      	beq.n	800423a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004228:	4a0f      	ldr	r2, [pc, #60]	@ (8004268 <HAL_RCC_GetSysClockFreq+0x9c>)
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	fb02 f303 	mul.w	r3, r2, r3
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	e007      	b.n	800424a <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800423a:	4a0b      	ldr	r2, [pc, #44]	@ (8004268 <HAL_RCC_GetSysClockFreq+0x9c>)
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	fb02 f303 	mul.w	r3, r2, r3
 8004248:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	613b      	str	r3, [r7, #16]
      break;
 800424e:	e002      	b.n	8004256 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004250:	4b05      	ldr	r3, [pc, #20]	@ (8004268 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004252:	613b      	str	r3, [r7, #16]
      break;
 8004254:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004256:	693b      	ldr	r3, [r7, #16]
}
 8004258:	4618      	mov	r0, r3
 800425a:	371c      	adds	r7, #28
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	40021000 	.word	0x40021000
 8004268:	007a1200 	.word	0x007a1200
 800426c:	08008c8c 	.word	0x08008c8c
 8004270:	08008c9c 	.word	0x08008c9c

08004274 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004278:	4b03      	ldr	r3, [pc, #12]	@ (8004288 <HAL_RCC_GetHCLKFreq+0x14>)
 800427a:	681b      	ldr	r3, [r3, #0]
}
 800427c:	4618      	mov	r0, r3
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	20000008 	.word	0x20000008

0800428c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004292:	f7ff ffef 	bl	8004274 <HAL_RCC_GetHCLKFreq>
 8004296:	4601      	mov	r1, r0
 8004298:	4b0b      	ldr	r3, [pc, #44]	@ (80042c8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80042a0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80042a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	fa92 f2a2 	rbit	r2, r2
 80042ac:	603a      	str	r2, [r7, #0]
  return result;
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	fab2 f282 	clz	r2, r2
 80042b4:	b2d2      	uxtb	r2, r2
 80042b6:	40d3      	lsrs	r3, r2
 80042b8:	4a04      	ldr	r2, [pc, #16]	@ (80042cc <HAL_RCC_GetPCLK1Freq+0x40>)
 80042ba:	5cd3      	ldrb	r3, [r2, r3]
 80042bc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80042c0:	4618      	mov	r0, r3
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40021000 	.word	0x40021000
 80042cc:	08008c84 	.word	0x08008c84

080042d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80042d6:	f7ff ffcd 	bl	8004274 <HAL_RCC_GetHCLKFreq>
 80042da:	4601      	mov	r1, r0
 80042dc:	4b0b      	ldr	r3, [pc, #44]	@ (800430c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80042e4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80042e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	fa92 f2a2 	rbit	r2, r2
 80042f0:	603a      	str	r2, [r7, #0]
  return result;
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	fab2 f282 	clz	r2, r2
 80042f8:	b2d2      	uxtb	r2, r2
 80042fa:	40d3      	lsrs	r3, r2
 80042fc:	4a04      	ldr	r2, [pc, #16]	@ (8004310 <HAL_RCC_GetPCLK2Freq+0x40>)
 80042fe:	5cd3      	ldrb	r3, [r2, r3]
 8004300:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004304:	4618      	mov	r0, r3
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40021000 	.word	0x40021000
 8004310:	08008c84 	.word	0x08008c84

08004314 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b092      	sub	sp, #72	@ 0x48
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800431c:	2300      	movs	r3, #0
 800431e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004324:	2300      	movs	r3, #0
 8004326:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 80d2 	beq.w	80044dc <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004338:	4b4d      	ldr	r3, [pc, #308]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10e      	bne.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004344:	4b4a      	ldr	r3, [pc, #296]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	4a49      	ldr	r2, [pc, #292]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800434a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800434e:	61d3      	str	r3, [r2, #28]
 8004350:	4b47      	ldr	r3, [pc, #284]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004358:	60bb      	str	r3, [r7, #8]
 800435a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800435c:	2301      	movs	r3, #1
 800435e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004362:	4b44      	ldr	r3, [pc, #272]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800436a:	2b00      	cmp	r3, #0
 800436c:	d118      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800436e:	4b41      	ldr	r3, [pc, #260]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a40      	ldr	r2, [pc, #256]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004374:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004378:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800437a:	f7fd f9b1 	bl	80016e0 <HAL_GetTick>
 800437e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004380:	e008      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004382:	f7fd f9ad 	bl	80016e0 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b64      	cmp	r3, #100	@ 0x64
 800438e:	d901      	bls.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e1d4      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004394:	4b37      	ldr	r3, [pc, #220]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0f0      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043a0:	4b33      	ldr	r3, [pc, #204]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 8082 	beq.w	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043ba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80043bc:	429a      	cmp	r2, r3
 80043be:	d07a      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80043ce:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d2:	fa93 f3a3 	rbit	r3, r3
 80043d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80043d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043da:	fab3 f383 	clz	r3, r3
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	461a      	mov	r2, r3
 80043e2:	4b25      	ldr	r3, [pc, #148]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043e4:	4413      	add	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	461a      	mov	r2, r3
 80043ea:	2301      	movs	r3, #1
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80043f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043f6:	fa93 f3a3 	rbit	r3, r3
 80043fa:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80043fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043fe:	fab3 f383 	clz	r3, r3
 8004402:	b2db      	uxtb	r3, r3
 8004404:	461a      	mov	r2, r3
 8004406:	4b1c      	ldr	r3, [pc, #112]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004408:	4413      	add	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	461a      	mov	r2, r3
 800440e:	2300      	movs	r3, #0
 8004410:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004412:	4a17      	ldr	r2, [pc, #92]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004414:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004416:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d049      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004422:	f7fd f95d 	bl	80016e0 <HAL_GetTick>
 8004426:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004428:	e00a      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800442a:	f7fd f959 	bl	80016e0 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004438:	4293      	cmp	r3, r2
 800443a:	d901      	bls.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e17e      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8004440:	2302      	movs	r3, #2
 8004442:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004446:	fa93 f3a3 	rbit	r3, r3
 800444a:	627b      	str	r3, [r7, #36]	@ 0x24
 800444c:	2302      	movs	r3, #2
 800444e:	623b      	str	r3, [r7, #32]
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	fa93 f3a3 	rbit	r3, r3
 8004456:	61fb      	str	r3, [r7, #28]
  return result;
 8004458:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800445a:	fab3 f383 	clz	r3, r3
 800445e:	b2db      	uxtb	r3, r3
 8004460:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d108      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800446a:	4b01      	ldr	r3, [pc, #4]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	e00d      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004470:	40021000 	.word	0x40021000
 8004474:	40007000 	.word	0x40007000
 8004478:	10908100 	.word	0x10908100
 800447c:	2302      	movs	r3, #2
 800447e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	fa93 f3a3 	rbit	r3, r3
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	4b9a      	ldr	r3, [pc, #616]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800448a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448c:	2202      	movs	r2, #2
 800448e:	613a      	str	r2, [r7, #16]
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	fa92 f2a2 	rbit	r2, r2
 8004496:	60fa      	str	r2, [r7, #12]
  return result;
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	fab2 f282 	clz	r2, r2
 800449e:	b2d2      	uxtb	r2, r2
 80044a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044a4:	b2d2      	uxtb	r2, r2
 80044a6:	f002 021f 	and.w	r2, r2, #31
 80044aa:	2101      	movs	r1, #1
 80044ac:	fa01 f202 	lsl.w	r2, r1, r2
 80044b0:	4013      	ands	r3, r2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d0b9      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80044b6:	4b8f      	ldr	r3, [pc, #572]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	498c      	ldr	r1, [pc, #560]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80044c8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d105      	bne.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044d0:	4b88      	ldr	r3, [pc, #544]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	4a87      	ldr	r2, [pc, #540]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d008      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044e8:	4b82      	ldr	r3, [pc, #520]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ec:	f023 0203 	bic.w	r2, r3, #3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	497f      	ldr	r1, [pc, #508]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d008      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004506:	4b7b      	ldr	r3, [pc, #492]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	4978      	ldr	r1, [pc, #480]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004514:	4313      	orrs	r3, r2
 8004516:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b00      	cmp	r3, #0
 8004522:	d008      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004524:	4b73      	ldr	r3, [pc, #460]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004528:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	4970      	ldr	r1, [pc, #448]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004532:	4313      	orrs	r3, r2
 8004534:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0320 	and.w	r3, r3, #32
 800453e:	2b00      	cmp	r3, #0
 8004540:	d008      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004542:	4b6c      	ldr	r3, [pc, #432]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004546:	f023 0210 	bic.w	r2, r3, #16
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	4969      	ldr	r1, [pc, #420]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004550:	4313      	orrs	r3, r2
 8004552:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d008      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004560:	4b64      	ldr	r3, [pc, #400]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800456c:	4961      	ldr	r1, [pc, #388]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800456e:	4313      	orrs	r3, r2
 8004570:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800457a:	2b00      	cmp	r3, #0
 800457c:	d008      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800457e:	4b5d      	ldr	r3, [pc, #372]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004582:	f023 0220 	bic.w	r2, r3, #32
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	495a      	ldr	r1, [pc, #360]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800458c:	4313      	orrs	r3, r2
 800458e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d008      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800459c:	4b55      	ldr	r3, [pc, #340]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800459e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a8:	4952      	ldr	r1, [pc, #328]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0308 	and.w	r3, r3, #8
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d008      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045ba:	4b4e      	ldr	r3, [pc, #312]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	494b      	ldr	r1, [pc, #300]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0310 	and.w	r3, r3, #16
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d008      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045d8:	4b46      	ldr	r3, [pc, #280]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045dc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	4943      	ldr	r1, [pc, #268]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d008      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80045f6:	4b3f      	ldr	r3, [pc, #252]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004602:	493c      	ldr	r1, [pc, #240]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004604:	4313      	orrs	r3, r2
 8004606:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004610:	2b00      	cmp	r3, #0
 8004612:	d008      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004614:	4b37      	ldr	r3, [pc, #220]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004618:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004620:	4934      	ldr	r1, [pc, #208]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004622:	4313      	orrs	r3, r2
 8004624:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800462e:	2b00      	cmp	r3, #0
 8004630:	d008      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004632:	4b30      	ldr	r3, [pc, #192]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004636:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800463e:	492d      	ldr	r1, [pc, #180]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004640:	4313      	orrs	r3, r2
 8004642:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d008      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004650:	4b28      	ldr	r3, [pc, #160]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004654:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800465c:	4925      	ldr	r1, [pc, #148]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800465e:	4313      	orrs	r3, r2
 8004660:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d008      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800466e:	4b21      	ldr	r3, [pc, #132]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004672:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467a:	491e      	ldr	r1, [pc, #120]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800467c:	4313      	orrs	r3, r2
 800467e:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d008      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800468c:	4b19      	ldr	r3, [pc, #100]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800468e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004690:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004698:	4916      	ldr	r1, [pc, #88]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800469a:	4313      	orrs	r3, r2
 800469c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d008      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80046aa:	4b12      	ldr	r3, [pc, #72]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ae:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046b6:	490f      	ldr	r1, [pc, #60]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d008      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80046c8:	4b0a      	ldr	r3, [pc, #40]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046cc:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d4:	4907      	ldr	r1, [pc, #28]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00c      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80046e6:	4b03      	ldr	r3, [pc, #12]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ea:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	e002      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80046f2:	bf00      	nop
 80046f4:	40021000 	.word	0x40021000
 80046f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046fa:	4913      	ldr	r1, [pc, #76]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d008      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800470c:	4b0e      	ldr	r3, [pc, #56]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800470e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004710:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004718:	490b      	ldr	r1, [pc, #44]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800471a:	4313      	orrs	r3, r2
 800471c:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d008      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800472a:	4b07      	ldr	r3, [pc, #28]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800472c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004736:	4904      	ldr	r1, [pc, #16]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004738:	4313      	orrs	r3, r2
 800473a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3748      	adds	r7, #72	@ 0x48
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	40021000 	.word	0x40021000

0800474c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e049      	b.n	80047f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d106      	bne.n	8004778 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7fc fd76 	bl	8001264 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3304      	adds	r3, #4
 8004788:	4619      	mov	r1, r3
 800478a:	4610      	mov	r0, r2
 800478c:	f000 fb80 	bl	8004e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b082      	sub	sp, #8
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e049      	b.n	80048a0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d106      	bne.n	8004826 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 f841 	bl	80048a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2202      	movs	r2, #2
 800482a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	3304      	adds	r3, #4
 8004836:	4619      	mov	r1, r3
 8004838:	4610      	mov	r0, r2
 800483a:	f000 fb29 	bl	8004e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d109      	bne.n	80048e0 <HAL_TIM_PWM_Start+0x24>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	bf14      	ite	ne
 80048d8:	2301      	movne	r3, #1
 80048da:	2300      	moveq	r3, #0
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	e03c      	b.n	800495a <HAL_TIM_PWM_Start+0x9e>
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	d109      	bne.n	80048fa <HAL_TIM_PWM_Start+0x3e>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	bf14      	ite	ne
 80048f2:	2301      	movne	r3, #1
 80048f4:	2300      	moveq	r3, #0
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	e02f      	b.n	800495a <HAL_TIM_PWM_Start+0x9e>
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d109      	bne.n	8004914 <HAL_TIM_PWM_Start+0x58>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b01      	cmp	r3, #1
 800490a:	bf14      	ite	ne
 800490c:	2301      	movne	r3, #1
 800490e:	2300      	moveq	r3, #0
 8004910:	b2db      	uxtb	r3, r3
 8004912:	e022      	b.n	800495a <HAL_TIM_PWM_Start+0x9e>
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	2b0c      	cmp	r3, #12
 8004918:	d109      	bne.n	800492e <HAL_TIM_PWM_Start+0x72>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b01      	cmp	r3, #1
 8004924:	bf14      	ite	ne
 8004926:	2301      	movne	r3, #1
 8004928:	2300      	moveq	r3, #0
 800492a:	b2db      	uxtb	r3, r3
 800492c:	e015      	b.n	800495a <HAL_TIM_PWM_Start+0x9e>
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2b10      	cmp	r3, #16
 8004932:	d109      	bne.n	8004948 <HAL_TIM_PWM_Start+0x8c>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b01      	cmp	r3, #1
 800493e:	bf14      	ite	ne
 8004940:	2301      	movne	r3, #1
 8004942:	2300      	moveq	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	e008      	b.n	800495a <HAL_TIM_PWM_Start+0x9e>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b01      	cmp	r3, #1
 8004952:	bf14      	ite	ne
 8004954:	2301      	movne	r3, #1
 8004956:	2300      	moveq	r3, #0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e0a1      	b.n	8004aa6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d104      	bne.n	8004972 <HAL_TIM_PWM_Start+0xb6>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2202      	movs	r2, #2
 800496c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004970:	e023      	b.n	80049ba <HAL_TIM_PWM_Start+0xfe>
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2b04      	cmp	r3, #4
 8004976:	d104      	bne.n	8004982 <HAL_TIM_PWM_Start+0xc6>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2202      	movs	r2, #2
 800497c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004980:	e01b      	b.n	80049ba <HAL_TIM_PWM_Start+0xfe>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	2b08      	cmp	r3, #8
 8004986:	d104      	bne.n	8004992 <HAL_TIM_PWM_Start+0xd6>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004990:	e013      	b.n	80049ba <HAL_TIM_PWM_Start+0xfe>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2b0c      	cmp	r3, #12
 8004996:	d104      	bne.n	80049a2 <HAL_TIM_PWM_Start+0xe6>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049a0:	e00b      	b.n	80049ba <HAL_TIM_PWM_Start+0xfe>
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b10      	cmp	r3, #16
 80049a6:	d104      	bne.n	80049b2 <HAL_TIM_PWM_Start+0xf6>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2202      	movs	r2, #2
 80049ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049b0:	e003      	b.n	80049ba <HAL_TIM_PWM_Start+0xfe>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2202      	movs	r2, #2
 80049b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2201      	movs	r2, #1
 80049c0:	6839      	ldr	r1, [r7, #0]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 feae 	bl	8005724 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a38      	ldr	r2, [pc, #224]	@ (8004ab0 <HAL_TIM_PWM_Start+0x1f4>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d018      	beq.n	8004a04 <HAL_TIM_PWM_Start+0x148>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a37      	ldr	r2, [pc, #220]	@ (8004ab4 <HAL_TIM_PWM_Start+0x1f8>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d013      	beq.n	8004a04 <HAL_TIM_PWM_Start+0x148>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a35      	ldr	r2, [pc, #212]	@ (8004ab8 <HAL_TIM_PWM_Start+0x1fc>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d00e      	beq.n	8004a04 <HAL_TIM_PWM_Start+0x148>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a34      	ldr	r2, [pc, #208]	@ (8004abc <HAL_TIM_PWM_Start+0x200>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d009      	beq.n	8004a04 <HAL_TIM_PWM_Start+0x148>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a32      	ldr	r2, [pc, #200]	@ (8004ac0 <HAL_TIM_PWM_Start+0x204>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d004      	beq.n	8004a04 <HAL_TIM_PWM_Start+0x148>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a31      	ldr	r2, [pc, #196]	@ (8004ac4 <HAL_TIM_PWM_Start+0x208>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d101      	bne.n	8004a08 <HAL_TIM_PWM_Start+0x14c>
 8004a04:	2301      	movs	r3, #1
 8004a06:	e000      	b.n	8004a0a <HAL_TIM_PWM_Start+0x14e>
 8004a08:	2300      	movs	r3, #0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d007      	beq.n	8004a1e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a1c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a23      	ldr	r2, [pc, #140]	@ (8004ab0 <HAL_TIM_PWM_Start+0x1f4>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d01d      	beq.n	8004a64 <HAL_TIM_PWM_Start+0x1a8>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a30:	d018      	beq.n	8004a64 <HAL_TIM_PWM_Start+0x1a8>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a24      	ldr	r2, [pc, #144]	@ (8004ac8 <HAL_TIM_PWM_Start+0x20c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d013      	beq.n	8004a64 <HAL_TIM_PWM_Start+0x1a8>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a22      	ldr	r2, [pc, #136]	@ (8004acc <HAL_TIM_PWM_Start+0x210>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d00e      	beq.n	8004a64 <HAL_TIM_PWM_Start+0x1a8>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a1a      	ldr	r2, [pc, #104]	@ (8004ab4 <HAL_TIM_PWM_Start+0x1f8>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d009      	beq.n	8004a64 <HAL_TIM_PWM_Start+0x1a8>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a18      	ldr	r2, [pc, #96]	@ (8004ab8 <HAL_TIM_PWM_Start+0x1fc>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d004      	beq.n	8004a64 <HAL_TIM_PWM_Start+0x1a8>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a19      	ldr	r2, [pc, #100]	@ (8004ac4 <HAL_TIM_PWM_Start+0x208>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d115      	bne.n	8004a90 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689a      	ldr	r2, [r3, #8]
 8004a6a:	4b19      	ldr	r3, [pc, #100]	@ (8004ad0 <HAL_TIM_PWM_Start+0x214>)
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2b06      	cmp	r3, #6
 8004a74:	d015      	beq.n	8004aa2 <HAL_TIM_PWM_Start+0x1e6>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a7c:	d011      	beq.n	8004aa2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f042 0201 	orr.w	r2, r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a8e:	e008      	b.n	8004aa2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0201 	orr.w	r2, r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	e000      	b.n	8004aa4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aa2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	40012c00 	.word	0x40012c00
 8004ab4:	40013400 	.word	0x40013400
 8004ab8:	40014000 	.word	0x40014000
 8004abc:	40014400 	.word	0x40014400
 8004ac0:	40014800 	.word	0x40014800
 8004ac4:	40015000 	.word	0x40015000
 8004ac8:	40000400 	.word	0x40000400
 8004acc:	40000800 	.word	0x40000800
 8004ad0:	00010007 	.word	0x00010007

08004ad4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d101      	bne.n	8004af2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004aee:	2302      	movs	r3, #2
 8004af0:	e0ff      	b.n	8004cf2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b14      	cmp	r3, #20
 8004afe:	f200 80f0 	bhi.w	8004ce2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004b02:	a201      	add	r2, pc, #4	@ (adr r2, 8004b08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b08:	08004b5d 	.word	0x08004b5d
 8004b0c:	08004ce3 	.word	0x08004ce3
 8004b10:	08004ce3 	.word	0x08004ce3
 8004b14:	08004ce3 	.word	0x08004ce3
 8004b18:	08004b9d 	.word	0x08004b9d
 8004b1c:	08004ce3 	.word	0x08004ce3
 8004b20:	08004ce3 	.word	0x08004ce3
 8004b24:	08004ce3 	.word	0x08004ce3
 8004b28:	08004bdf 	.word	0x08004bdf
 8004b2c:	08004ce3 	.word	0x08004ce3
 8004b30:	08004ce3 	.word	0x08004ce3
 8004b34:	08004ce3 	.word	0x08004ce3
 8004b38:	08004c1f 	.word	0x08004c1f
 8004b3c:	08004ce3 	.word	0x08004ce3
 8004b40:	08004ce3 	.word	0x08004ce3
 8004b44:	08004ce3 	.word	0x08004ce3
 8004b48:	08004c61 	.word	0x08004c61
 8004b4c:	08004ce3 	.word	0x08004ce3
 8004b50:	08004ce3 	.word	0x08004ce3
 8004b54:	08004ce3 	.word	0x08004ce3
 8004b58:	08004ca1 	.word	0x08004ca1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68b9      	ldr	r1, [r7, #8]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 fa3e 	bl	8004fe4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	699a      	ldr	r2, [r3, #24]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f042 0208 	orr.w	r2, r2, #8
 8004b76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	699a      	ldr	r2, [r3, #24]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 0204 	bic.w	r2, r2, #4
 8004b86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6999      	ldr	r1, [r3, #24]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	691a      	ldr	r2, [r3, #16]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	619a      	str	r2, [r3, #24]
      break;
 8004b9a:	e0a5      	b.n	8004ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68b9      	ldr	r1, [r7, #8]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 fab8 	bl	8005118 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699a      	ldr	r2, [r3, #24]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	699a      	ldr	r2, [r3, #24]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6999      	ldr	r1, [r3, #24]
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	021a      	lsls	r2, r3, #8
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	619a      	str	r2, [r3, #24]
      break;
 8004bdc:	e084      	b.n	8004ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68b9      	ldr	r1, [r7, #8]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 fb2b 	bl	8005240 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	69da      	ldr	r2, [r3, #28]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f042 0208 	orr.w	r2, r2, #8
 8004bf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	69da      	ldr	r2, [r3, #28]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0204 	bic.w	r2, r2, #4
 8004c08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	69d9      	ldr	r1, [r3, #28]
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	691a      	ldr	r2, [r3, #16]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	61da      	str	r2, [r3, #28]
      break;
 8004c1c:	e064      	b.n	8004ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68b9      	ldr	r1, [r7, #8]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f000 fb9d 	bl	8005364 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	69da      	ldr	r2, [r3, #28]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	69da      	ldr	r2, [r3, #28]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	69d9      	ldr	r1, [r3, #28]
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	021a      	lsls	r2, r3, #8
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	61da      	str	r2, [r3, #28]
      break;
 8004c5e:	e043      	b.n	8004ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68b9      	ldr	r1, [r7, #8]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 fbec 	bl	8005444 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0208 	orr.w	r2, r2, #8
 8004c7a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 0204 	bic.w	r2, r2, #4
 8004c8a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	691a      	ldr	r2, [r3, #16]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004c9e:	e023      	b.n	8004ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68b9      	ldr	r1, [r7, #8]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 fc36 	bl	8005518 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	021a      	lsls	r2, r3, #8
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004ce0:	e002      	b.n	8004ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	75fb      	strb	r3, [r7, #23]
      break;
 8004ce6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3718      	adds	r7, #24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop

08004cfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d06:	2300      	movs	r3, #0
 8004d08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d101      	bne.n	8004d18 <HAL_TIM_ConfigClockSource+0x1c>
 8004d14:	2302      	movs	r3, #2
 8004d16:	e0b6      	b.n	8004e86 <HAL_TIM_ConfigClockSource+0x18a>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d36:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004d3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d54:	d03e      	beq.n	8004dd4 <HAL_TIM_ConfigClockSource+0xd8>
 8004d56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d5a:	f200 8087 	bhi.w	8004e6c <HAL_TIM_ConfigClockSource+0x170>
 8004d5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d62:	f000 8086 	beq.w	8004e72 <HAL_TIM_ConfigClockSource+0x176>
 8004d66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d6a:	d87f      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x170>
 8004d6c:	2b70      	cmp	r3, #112	@ 0x70
 8004d6e:	d01a      	beq.n	8004da6 <HAL_TIM_ConfigClockSource+0xaa>
 8004d70:	2b70      	cmp	r3, #112	@ 0x70
 8004d72:	d87b      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x170>
 8004d74:	2b60      	cmp	r3, #96	@ 0x60
 8004d76:	d050      	beq.n	8004e1a <HAL_TIM_ConfigClockSource+0x11e>
 8004d78:	2b60      	cmp	r3, #96	@ 0x60
 8004d7a:	d877      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x170>
 8004d7c:	2b50      	cmp	r3, #80	@ 0x50
 8004d7e:	d03c      	beq.n	8004dfa <HAL_TIM_ConfigClockSource+0xfe>
 8004d80:	2b50      	cmp	r3, #80	@ 0x50
 8004d82:	d873      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x170>
 8004d84:	2b40      	cmp	r3, #64	@ 0x40
 8004d86:	d058      	beq.n	8004e3a <HAL_TIM_ConfigClockSource+0x13e>
 8004d88:	2b40      	cmp	r3, #64	@ 0x40
 8004d8a:	d86f      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x170>
 8004d8c:	2b30      	cmp	r3, #48	@ 0x30
 8004d8e:	d064      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x15e>
 8004d90:	2b30      	cmp	r3, #48	@ 0x30
 8004d92:	d86b      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x170>
 8004d94:	2b20      	cmp	r3, #32
 8004d96:	d060      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x15e>
 8004d98:	2b20      	cmp	r3, #32
 8004d9a:	d867      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x170>
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d05c      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x15e>
 8004da0:	2b10      	cmp	r3, #16
 8004da2:	d05a      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x15e>
 8004da4:	e062      	b.n	8004e6c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004db6:	f000 fc95 	bl	80056e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004dc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	609a      	str	r2, [r3, #8]
      break;
 8004dd2:	e04f      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004de4:	f000 fc7e 	bl	80056e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689a      	ldr	r2, [r3, #8]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004df6:	609a      	str	r2, [r3, #8]
      break;
 8004df8:	e03c      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e06:	461a      	mov	r2, r3
 8004e08:	f000 fbf2 	bl	80055f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2150      	movs	r1, #80	@ 0x50
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 fc4b 	bl	80056ae <TIM_ITRx_SetConfig>
      break;
 8004e18:	e02c      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e26:	461a      	mov	r2, r3
 8004e28:	f000 fc11 	bl	800564e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2160      	movs	r1, #96	@ 0x60
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 fc3b 	bl	80056ae <TIM_ITRx_SetConfig>
      break;
 8004e38:	e01c      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e46:	461a      	mov	r2, r3
 8004e48:	f000 fbd2 	bl	80055f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2140      	movs	r1, #64	@ 0x40
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 fc2b 	bl	80056ae <TIM_ITRx_SetConfig>
      break;
 8004e58:	e00c      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4619      	mov	r1, r3
 8004e64:	4610      	mov	r0, r2
 8004e66:	f000 fc22 	bl	80056ae <TIM_ITRx_SetConfig>
      break;
 8004e6a:	e003      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e70:	e000      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004e72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
	...

08004e90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a48      	ldr	r2, [pc, #288]	@ (8004fc4 <TIM_Base_SetConfig+0x134>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d013      	beq.n	8004ed0 <TIM_Base_SetConfig+0x40>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eae:	d00f      	beq.n	8004ed0 <TIM_Base_SetConfig+0x40>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a45      	ldr	r2, [pc, #276]	@ (8004fc8 <TIM_Base_SetConfig+0x138>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d00b      	beq.n	8004ed0 <TIM_Base_SetConfig+0x40>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a44      	ldr	r2, [pc, #272]	@ (8004fcc <TIM_Base_SetConfig+0x13c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d007      	beq.n	8004ed0 <TIM_Base_SetConfig+0x40>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a43      	ldr	r2, [pc, #268]	@ (8004fd0 <TIM_Base_SetConfig+0x140>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d003      	beq.n	8004ed0 <TIM_Base_SetConfig+0x40>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a42      	ldr	r2, [pc, #264]	@ (8004fd4 <TIM_Base_SetConfig+0x144>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d108      	bne.n	8004ee2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ed6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a37      	ldr	r2, [pc, #220]	@ (8004fc4 <TIM_Base_SetConfig+0x134>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d01f      	beq.n	8004f2a <TIM_Base_SetConfig+0x9a>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ef0:	d01b      	beq.n	8004f2a <TIM_Base_SetConfig+0x9a>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a34      	ldr	r2, [pc, #208]	@ (8004fc8 <TIM_Base_SetConfig+0x138>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d017      	beq.n	8004f2a <TIM_Base_SetConfig+0x9a>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a33      	ldr	r2, [pc, #204]	@ (8004fcc <TIM_Base_SetConfig+0x13c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d013      	beq.n	8004f2a <TIM_Base_SetConfig+0x9a>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a32      	ldr	r2, [pc, #200]	@ (8004fd0 <TIM_Base_SetConfig+0x140>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d00f      	beq.n	8004f2a <TIM_Base_SetConfig+0x9a>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a32      	ldr	r2, [pc, #200]	@ (8004fd8 <TIM_Base_SetConfig+0x148>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d00b      	beq.n	8004f2a <TIM_Base_SetConfig+0x9a>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a31      	ldr	r2, [pc, #196]	@ (8004fdc <TIM_Base_SetConfig+0x14c>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d007      	beq.n	8004f2a <TIM_Base_SetConfig+0x9a>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a30      	ldr	r2, [pc, #192]	@ (8004fe0 <TIM_Base_SetConfig+0x150>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d003      	beq.n	8004f2a <TIM_Base_SetConfig+0x9a>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a2b      	ldr	r2, [pc, #172]	@ (8004fd4 <TIM_Base_SetConfig+0x144>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d108      	bne.n	8004f3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	689a      	ldr	r2, [r3, #8]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a18      	ldr	r2, [pc, #96]	@ (8004fc4 <TIM_Base_SetConfig+0x134>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d013      	beq.n	8004f90 <TIM_Base_SetConfig+0x100>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a19      	ldr	r2, [pc, #100]	@ (8004fd0 <TIM_Base_SetConfig+0x140>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d00f      	beq.n	8004f90 <TIM_Base_SetConfig+0x100>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a19      	ldr	r2, [pc, #100]	@ (8004fd8 <TIM_Base_SetConfig+0x148>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d00b      	beq.n	8004f90 <TIM_Base_SetConfig+0x100>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a18      	ldr	r2, [pc, #96]	@ (8004fdc <TIM_Base_SetConfig+0x14c>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d007      	beq.n	8004f90 <TIM_Base_SetConfig+0x100>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a17      	ldr	r2, [pc, #92]	@ (8004fe0 <TIM_Base_SetConfig+0x150>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d003      	beq.n	8004f90 <TIM_Base_SetConfig+0x100>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a12      	ldr	r2, [pc, #72]	@ (8004fd4 <TIM_Base_SetConfig+0x144>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d103      	bne.n	8004f98 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	691a      	ldr	r2, [r3, #16]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d105      	bne.n	8004fb6 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	f023 0201 	bic.w	r2, r3, #1
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	611a      	str	r2, [r3, #16]
  }
}
 8004fb6:	bf00      	nop
 8004fb8:	3714      	adds	r7, #20
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	40012c00 	.word	0x40012c00
 8004fc8:	40000400 	.word	0x40000400
 8004fcc:	40000800 	.word	0x40000800
 8004fd0:	40013400 	.word	0x40013400
 8004fd4:	40015000 	.word	0x40015000
 8004fd8:	40014000 	.word	0x40014000
 8004fdc:	40014400 	.word	0x40014400
 8004fe0:	40014800 	.word	0x40014800

08004fe4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b087      	sub	sp, #28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	f023 0201 	bic.w	r2, r3, #1
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 0303 	bic.w	r3, r3, #3
 800501e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	4313      	orrs	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f023 0302 	bic.w	r3, r3, #2
 8005030:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	4313      	orrs	r3, r2
 800503a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a30      	ldr	r2, [pc, #192]	@ (8005100 <TIM_OC1_SetConfig+0x11c>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d013      	beq.n	800506c <TIM_OC1_SetConfig+0x88>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a2f      	ldr	r2, [pc, #188]	@ (8005104 <TIM_OC1_SetConfig+0x120>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d00f      	beq.n	800506c <TIM_OC1_SetConfig+0x88>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a2e      	ldr	r2, [pc, #184]	@ (8005108 <TIM_OC1_SetConfig+0x124>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d00b      	beq.n	800506c <TIM_OC1_SetConfig+0x88>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a2d      	ldr	r2, [pc, #180]	@ (800510c <TIM_OC1_SetConfig+0x128>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d007      	beq.n	800506c <TIM_OC1_SetConfig+0x88>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a2c      	ldr	r2, [pc, #176]	@ (8005110 <TIM_OC1_SetConfig+0x12c>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d003      	beq.n	800506c <TIM_OC1_SetConfig+0x88>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a2b      	ldr	r2, [pc, #172]	@ (8005114 <TIM_OC1_SetConfig+0x130>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d10c      	bne.n	8005086 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f023 0308 	bic.w	r3, r3, #8
 8005072:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	4313      	orrs	r3, r2
 800507c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f023 0304 	bic.w	r3, r3, #4
 8005084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a1d      	ldr	r2, [pc, #116]	@ (8005100 <TIM_OC1_SetConfig+0x11c>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d013      	beq.n	80050b6 <TIM_OC1_SetConfig+0xd2>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a1c      	ldr	r2, [pc, #112]	@ (8005104 <TIM_OC1_SetConfig+0x120>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d00f      	beq.n	80050b6 <TIM_OC1_SetConfig+0xd2>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a1b      	ldr	r2, [pc, #108]	@ (8005108 <TIM_OC1_SetConfig+0x124>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d00b      	beq.n	80050b6 <TIM_OC1_SetConfig+0xd2>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a1a      	ldr	r2, [pc, #104]	@ (800510c <TIM_OC1_SetConfig+0x128>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d007      	beq.n	80050b6 <TIM_OC1_SetConfig+0xd2>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a19      	ldr	r2, [pc, #100]	@ (8005110 <TIM_OC1_SetConfig+0x12c>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d003      	beq.n	80050b6 <TIM_OC1_SetConfig+0xd2>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a18      	ldr	r2, [pc, #96]	@ (8005114 <TIM_OC1_SetConfig+0x130>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d111      	bne.n	80050da <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	621a      	str	r2, [r3, #32]
}
 80050f4:	bf00      	nop
 80050f6:	371c      	adds	r7, #28
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr
 8005100:	40012c00 	.word	0x40012c00
 8005104:	40013400 	.word	0x40013400
 8005108:	40014000 	.word	0x40014000
 800510c:	40014400 	.word	0x40014400
 8005110:	40014800 	.word	0x40014800
 8005114:	40015000 	.word	0x40015000

08005118 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005118:	b480      	push	{r7}
 800511a:	b087      	sub	sp, #28
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	f023 0210 	bic.w	r2, r3, #16
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005146:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800514a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005152:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	021b      	lsls	r3, r3, #8
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	4313      	orrs	r3, r2
 800515e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f023 0320 	bic.w	r3, r3, #32
 8005166:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	011b      	lsls	r3, r3, #4
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	4313      	orrs	r3, r2
 8005172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a2c      	ldr	r2, [pc, #176]	@ (8005228 <TIM_OC2_SetConfig+0x110>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d007      	beq.n	800518c <TIM_OC2_SetConfig+0x74>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a2b      	ldr	r2, [pc, #172]	@ (800522c <TIM_OC2_SetConfig+0x114>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d003      	beq.n	800518c <TIM_OC2_SetConfig+0x74>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a2a      	ldr	r2, [pc, #168]	@ (8005230 <TIM_OC2_SetConfig+0x118>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d10d      	bne.n	80051a8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	011b      	lsls	r3, r3, #4
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	4313      	orrs	r3, r2
 800519e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a1f      	ldr	r2, [pc, #124]	@ (8005228 <TIM_OC2_SetConfig+0x110>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d013      	beq.n	80051d8 <TIM_OC2_SetConfig+0xc0>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a1e      	ldr	r2, [pc, #120]	@ (800522c <TIM_OC2_SetConfig+0x114>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d00f      	beq.n	80051d8 <TIM_OC2_SetConfig+0xc0>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a1e      	ldr	r2, [pc, #120]	@ (8005234 <TIM_OC2_SetConfig+0x11c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d00b      	beq.n	80051d8 <TIM_OC2_SetConfig+0xc0>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a1d      	ldr	r2, [pc, #116]	@ (8005238 <TIM_OC2_SetConfig+0x120>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d007      	beq.n	80051d8 <TIM_OC2_SetConfig+0xc0>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a1c      	ldr	r2, [pc, #112]	@ (800523c <TIM_OC2_SetConfig+0x124>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d003      	beq.n	80051d8 <TIM_OC2_SetConfig+0xc0>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a17      	ldr	r2, [pc, #92]	@ (8005230 <TIM_OC2_SetConfig+0x118>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d113      	bne.n	8005200 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051de:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051e6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	621a      	str	r2, [r3, #32]
}
 800521a:	bf00      	nop
 800521c:	371c      	adds	r7, #28
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	40012c00 	.word	0x40012c00
 800522c:	40013400 	.word	0x40013400
 8005230:	40015000 	.word	0x40015000
 8005234:	40014000 	.word	0x40014000
 8005238:	40014400 	.word	0x40014400
 800523c:	40014800 	.word	0x40014800

08005240 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005240:	b480      	push	{r7}
 8005242:	b087      	sub	sp, #28
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800526e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f023 0303 	bic.w	r3, r3, #3
 800527a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	4313      	orrs	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800528c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	021b      	lsls	r3, r3, #8
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	4313      	orrs	r3, r2
 8005298:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a2b      	ldr	r2, [pc, #172]	@ (800534c <TIM_OC3_SetConfig+0x10c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d007      	beq.n	80052b2 <TIM_OC3_SetConfig+0x72>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a2a      	ldr	r2, [pc, #168]	@ (8005350 <TIM_OC3_SetConfig+0x110>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d003      	beq.n	80052b2 <TIM_OC3_SetConfig+0x72>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a29      	ldr	r2, [pc, #164]	@ (8005354 <TIM_OC3_SetConfig+0x114>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d10d      	bne.n	80052ce <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	021b      	lsls	r3, r3, #8
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052cc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a1e      	ldr	r2, [pc, #120]	@ (800534c <TIM_OC3_SetConfig+0x10c>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d013      	beq.n	80052fe <TIM_OC3_SetConfig+0xbe>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005350 <TIM_OC3_SetConfig+0x110>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00f      	beq.n	80052fe <TIM_OC3_SetConfig+0xbe>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005358 <TIM_OC3_SetConfig+0x118>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d00b      	beq.n	80052fe <TIM_OC3_SetConfig+0xbe>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a1c      	ldr	r2, [pc, #112]	@ (800535c <TIM_OC3_SetConfig+0x11c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d007      	beq.n	80052fe <TIM_OC3_SetConfig+0xbe>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a1b      	ldr	r2, [pc, #108]	@ (8005360 <TIM_OC3_SetConfig+0x120>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d003      	beq.n	80052fe <TIM_OC3_SetConfig+0xbe>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a16      	ldr	r2, [pc, #88]	@ (8005354 <TIM_OC3_SetConfig+0x114>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d113      	bne.n	8005326 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005304:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800530c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	011b      	lsls	r3, r3, #4
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	4313      	orrs	r3, r2
 8005318:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	011b      	lsls	r3, r3, #4
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	4313      	orrs	r3, r2
 8005324:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	621a      	str	r2, [r3, #32]
}
 8005340:	bf00      	nop
 8005342:	371c      	adds	r7, #28
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	40012c00 	.word	0x40012c00
 8005350:	40013400 	.word	0x40013400
 8005354:	40015000 	.word	0x40015000
 8005358:	40014000 	.word	0x40014000
 800535c:	40014400 	.word	0x40014400
 8005360:	40014800 	.word	0x40014800

08005364 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005364:	b480      	push	{r7}
 8005366:	b087      	sub	sp, #28
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005392:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800539e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	021b      	lsls	r3, r3, #8
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	031b      	lsls	r3, r3, #12
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	4313      	orrs	r3, r2
 80053be:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a1a      	ldr	r2, [pc, #104]	@ (800542c <TIM_OC4_SetConfig+0xc8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d013      	beq.n	80053f0 <TIM_OC4_SetConfig+0x8c>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a19      	ldr	r2, [pc, #100]	@ (8005430 <TIM_OC4_SetConfig+0xcc>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d00f      	beq.n	80053f0 <TIM_OC4_SetConfig+0x8c>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a18      	ldr	r2, [pc, #96]	@ (8005434 <TIM_OC4_SetConfig+0xd0>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d00b      	beq.n	80053f0 <TIM_OC4_SetConfig+0x8c>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a17      	ldr	r2, [pc, #92]	@ (8005438 <TIM_OC4_SetConfig+0xd4>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d007      	beq.n	80053f0 <TIM_OC4_SetConfig+0x8c>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a16      	ldr	r2, [pc, #88]	@ (800543c <TIM_OC4_SetConfig+0xd8>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d003      	beq.n	80053f0 <TIM_OC4_SetConfig+0x8c>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a15      	ldr	r2, [pc, #84]	@ (8005440 <TIM_OC4_SetConfig+0xdc>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d109      	bne.n	8005404 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	019b      	lsls	r3, r3, #6
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	4313      	orrs	r3, r2
 8005402:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	621a      	str	r2, [r3, #32]
}
 800541e:	bf00      	nop
 8005420:	371c      	adds	r7, #28
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	40012c00 	.word	0x40012c00
 8005430:	40013400 	.word	0x40013400
 8005434:	40014000 	.word	0x40014000
 8005438:	40014400 	.word	0x40014400
 800543c:	40014800 	.word	0x40014800
 8005440:	40015000 	.word	0x40015000

08005444 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005444:	b480      	push	{r7}
 8005446:	b087      	sub	sp, #28
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800546a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005472:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005488:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	041b      	lsls	r3, r3, #16
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	4313      	orrs	r3, r2
 8005494:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a19      	ldr	r2, [pc, #100]	@ (8005500 <TIM_OC5_SetConfig+0xbc>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d013      	beq.n	80054c6 <TIM_OC5_SetConfig+0x82>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a18      	ldr	r2, [pc, #96]	@ (8005504 <TIM_OC5_SetConfig+0xc0>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d00f      	beq.n	80054c6 <TIM_OC5_SetConfig+0x82>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a17      	ldr	r2, [pc, #92]	@ (8005508 <TIM_OC5_SetConfig+0xc4>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d00b      	beq.n	80054c6 <TIM_OC5_SetConfig+0x82>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a16      	ldr	r2, [pc, #88]	@ (800550c <TIM_OC5_SetConfig+0xc8>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d007      	beq.n	80054c6 <TIM_OC5_SetConfig+0x82>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a15      	ldr	r2, [pc, #84]	@ (8005510 <TIM_OC5_SetConfig+0xcc>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d003      	beq.n	80054c6 <TIM_OC5_SetConfig+0x82>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a14      	ldr	r2, [pc, #80]	@ (8005514 <TIM_OC5_SetConfig+0xd0>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d109      	bne.n	80054da <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	021b      	lsls	r3, r3, #8
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	621a      	str	r2, [r3, #32]
}
 80054f4:	bf00      	nop
 80054f6:	371c      	adds	r7, #28
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr
 8005500:	40012c00 	.word	0x40012c00
 8005504:	40013400 	.word	0x40013400
 8005508:	40014000 	.word	0x40014000
 800550c:	40014400 	.word	0x40014400
 8005510:	40014800 	.word	0x40014800
 8005514:	40015000 	.word	0x40015000

08005518 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005518:	b480      	push	{r7}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800553e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005546:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800554a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	021b      	lsls	r3, r3, #8
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	4313      	orrs	r3, r2
 8005556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800555e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	051b      	lsls	r3, r3, #20
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	4313      	orrs	r3, r2
 800556a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a1a      	ldr	r2, [pc, #104]	@ (80055d8 <TIM_OC6_SetConfig+0xc0>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d013      	beq.n	800559c <TIM_OC6_SetConfig+0x84>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a19      	ldr	r2, [pc, #100]	@ (80055dc <TIM_OC6_SetConfig+0xc4>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d00f      	beq.n	800559c <TIM_OC6_SetConfig+0x84>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a18      	ldr	r2, [pc, #96]	@ (80055e0 <TIM_OC6_SetConfig+0xc8>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d00b      	beq.n	800559c <TIM_OC6_SetConfig+0x84>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a17      	ldr	r2, [pc, #92]	@ (80055e4 <TIM_OC6_SetConfig+0xcc>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d007      	beq.n	800559c <TIM_OC6_SetConfig+0x84>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a16      	ldr	r2, [pc, #88]	@ (80055e8 <TIM_OC6_SetConfig+0xd0>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d003      	beq.n	800559c <TIM_OC6_SetConfig+0x84>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a15      	ldr	r2, [pc, #84]	@ (80055ec <TIM_OC6_SetConfig+0xd4>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d109      	bne.n	80055b0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	029b      	lsls	r3, r3, #10
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	621a      	str	r2, [r3, #32]
}
 80055ca:	bf00      	nop
 80055cc:	371c      	adds	r7, #28
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	40012c00 	.word	0x40012c00
 80055dc:	40013400 	.word	0x40013400
 80055e0:	40014000 	.word	0x40014000
 80055e4:	40014400 	.word	0x40014400
 80055e8:	40014800 	.word	0x40014800
 80055ec:	40015000 	.word	0x40015000

080055f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b087      	sub	sp, #28
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6a1b      	ldr	r3, [r3, #32]
 8005600:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	f023 0201 	bic.w	r2, r3, #1
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800561a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	011b      	lsls	r3, r3, #4
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	4313      	orrs	r3, r2
 8005624:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f023 030a 	bic.w	r3, r3, #10
 800562c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	4313      	orrs	r3, r2
 8005634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	621a      	str	r2, [r3, #32]
}
 8005642:	bf00      	nop
 8005644:	371c      	adds	r7, #28
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800564e:	b480      	push	{r7}
 8005650:	b087      	sub	sp, #28
 8005652:	af00      	add	r7, sp, #0
 8005654:	60f8      	str	r0, [r7, #12]
 8005656:	60b9      	str	r1, [r7, #8]
 8005658:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6a1b      	ldr	r3, [r3, #32]
 8005664:	f023 0210 	bic.w	r2, r3, #16
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005678:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	031b      	lsls	r3, r3, #12
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	4313      	orrs	r3, r2
 8005682:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800568a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	011b      	lsls	r3, r3, #4
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	4313      	orrs	r3, r2
 8005694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	621a      	str	r2, [r3, #32]
}
 80056a2:	bf00      	nop
 80056a4:	371c      	adds	r7, #28
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b085      	sub	sp, #20
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
 80056b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	f043 0307 	orr.w	r3, r3, #7
 80056d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	609a      	str	r2, [r3, #8]
}
 80056d8:	bf00      	nop
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b087      	sub	sp, #28
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
 80056f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	021a      	lsls	r2, r3, #8
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	431a      	orrs	r2, r3
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	4313      	orrs	r3, r2
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	4313      	orrs	r3, r2
 8005710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	609a      	str	r2, [r3, #8]
}
 8005718:	bf00      	nop
 800571a:	371c      	adds	r7, #28
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005724:	b480      	push	{r7}
 8005726:	b087      	sub	sp, #28
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	f003 031f 	and.w	r3, r3, #31
 8005736:	2201      	movs	r2, #1
 8005738:	fa02 f303 	lsl.w	r3, r2, r3
 800573c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6a1a      	ldr	r2, [r3, #32]
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	43db      	mvns	r3, r3
 8005746:	401a      	ands	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6a1a      	ldr	r2, [r3, #32]
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	f003 031f 	and.w	r3, r3, #31
 8005756:	6879      	ldr	r1, [r7, #4]
 8005758:	fa01 f303 	lsl.w	r3, r1, r3
 800575c:	431a      	orrs	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	621a      	str	r2, [r3, #32]
}
 8005762:	bf00      	nop
 8005764:	371c      	adds	r7, #28
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
	...

08005770 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005780:	2b01      	cmp	r3, #1
 8005782:	d101      	bne.n	8005788 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005784:	2302      	movs	r3, #2
 8005786:	e06d      	b.n	8005864 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2202      	movs	r2, #2
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a30      	ldr	r2, [pc, #192]	@ (8005870 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d009      	beq.n	80057c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a2f      	ldr	r2, [pc, #188]	@ (8005874 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d004      	beq.n	80057c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a2d      	ldr	r2, [pc, #180]	@ (8005878 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d108      	bne.n	80057d8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80057cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a1e      	ldr	r2, [pc, #120]	@ (8005870 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d01d      	beq.n	8005838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005804:	d018      	beq.n	8005838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a1c      	ldr	r2, [pc, #112]	@ (800587c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d013      	beq.n	8005838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a1a      	ldr	r2, [pc, #104]	@ (8005880 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d00e      	beq.n	8005838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a15      	ldr	r2, [pc, #84]	@ (8005874 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d009      	beq.n	8005838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a16      	ldr	r2, [pc, #88]	@ (8005884 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d004      	beq.n	8005838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a11      	ldr	r2, [pc, #68]	@ (8005878 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d10c      	bne.n	8005852 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800583e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	68ba      	ldr	r2, [r7, #8]
 8005846:	4313      	orrs	r3, r2
 8005848:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3714      	adds	r7, #20
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	40012c00 	.word	0x40012c00
 8005874:	40013400 	.word	0x40013400
 8005878:	40015000 	.word	0x40015000
 800587c:	40000400 	.word	0x40000400
 8005880:	40000800 	.word	0x40000800
 8005884:	40014000 	.word	0x40014000

08005888 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005892:	2300      	movs	r3, #0
 8005894:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800589c:	2b01      	cmp	r3, #1
 800589e:	d101      	bne.n	80058a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80058a0:	2302      	movs	r3, #2
 80058a2:	e06a      	b.n	800597a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800590a:	4313      	orrs	r3, r2
 800590c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	041b      	lsls	r3, r3, #16
 800591a:	4313      	orrs	r3, r2
 800591c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a19      	ldr	r2, [pc, #100]	@ (8005988 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d009      	beq.n	800593c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a17      	ldr	r2, [pc, #92]	@ (800598c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d004      	beq.n	800593c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a16      	ldr	r2, [pc, #88]	@ (8005990 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d115      	bne.n	8005968 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005946:	051b      	lsls	r3, r3, #20
 8005948:	4313      	orrs	r3, r2
 800594a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	4313      	orrs	r3, r2
 8005958:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	4313      	orrs	r3, r2
 8005966:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	40012c00 	.word	0x40012c00
 800598c:	40013400 	.word	0x40013400
 8005990:	40015000 	.word	0x40015000

08005994 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e040      	b.n	8005a28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d106      	bne.n	80059bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7fb fcac 	bl	8001314 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2224      	movs	r2, #36	@ 0x24
 80059c0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 0201 	bic.w	r2, r2, #1
 80059d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 fa86 	bl	8005eec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 f8af 	bl	8005b44 <UART_SetConfig>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d101      	bne.n	80059f0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e01b      	b.n	8005a28 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689a      	ldr	r2, [r3, #8]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f042 0201 	orr.w	r2, r2, #1
 8005a1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 fb05 	bl	8006030 <UART_CheckIdleState>
 8005a26:	4603      	mov	r3, r0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3708      	adds	r7, #8
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b08a      	sub	sp, #40	@ 0x28
 8005a34:	af02      	add	r7, sp, #8
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	603b      	str	r3, [r7, #0]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a44:	2b20      	cmp	r3, #32
 8005a46:	d177      	bne.n	8005b38 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d002      	beq.n	8005a54 <HAL_UART_Transmit+0x24>
 8005a4e:	88fb      	ldrh	r3, [r7, #6]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e070      	b.n	8005b3a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2221      	movs	r2, #33	@ 0x21
 8005a64:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a66:	f7fb fe3b 	bl	80016e0 <HAL_GetTick>
 8005a6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	88fa      	ldrh	r2, [r7, #6]
 8005a70:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	88fa      	ldrh	r2, [r7, #6]
 8005a78:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a84:	d108      	bne.n	8005a98 <HAL_UART_Transmit+0x68>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d104      	bne.n	8005a98 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	61bb      	str	r3, [r7, #24]
 8005a96:	e003      	b.n	8005aa0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005aa0:	e02f      	b.n	8005b02 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	2180      	movs	r1, #128	@ 0x80
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f000 fb67 	bl	8006180 <UART_WaitOnFlagUntilTimeout>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d004      	beq.n	8005ac2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2220      	movs	r2, #32
 8005abc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e03b      	b.n	8005b3a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d10b      	bne.n	8005ae0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	881a      	ldrh	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ad4:	b292      	uxth	r2, r2
 8005ad6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	3302      	adds	r3, #2
 8005adc:	61bb      	str	r3, [r7, #24]
 8005ade:	e007      	b.n	8005af0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	781a      	ldrb	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	3301      	adds	r3, #1
 8005aee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	3b01      	subs	r3, #1
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1c9      	bne.n	8005aa2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	2200      	movs	r2, #0
 8005b16:	2140      	movs	r1, #64	@ 0x40
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f000 fb31 	bl	8006180 <UART_WaitOnFlagUntilTimeout>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d004      	beq.n	8005b2e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2220      	movs	r2, #32
 8005b28:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e005      	b.n	8005b3a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2220      	movs	r2, #32
 8005b32:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005b34:	2300      	movs	r3, #0
 8005b36:	e000      	b.n	8005b3a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005b38:	2302      	movs	r3, #2
  }
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3720      	adds	r7, #32
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
	...

08005b44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b088      	sub	sp, #32
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689a      	ldr	r2, [r3, #8]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	69db      	ldr	r3, [r3, #28]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	4b92      	ldr	r3, [pc, #584]	@ (8005db8 <UART_SetConfig+0x274>)
 8005b70:	4013      	ands	r3, r2
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	6812      	ldr	r2, [r2, #0]
 8005b76:	6979      	ldr	r1, [r7, #20]
 8005b78:	430b      	orrs	r3, r1
 8005b7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68da      	ldr	r2, [r3, #12]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a80      	ldr	r2, [pc, #512]	@ (8005dbc <UART_SetConfig+0x278>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d120      	bne.n	8005c02 <UART_SetConfig+0xbe>
 8005bc0:	4b7f      	ldr	r3, [pc, #508]	@ (8005dc0 <UART_SetConfig+0x27c>)
 8005bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc4:	f003 0303 	and.w	r3, r3, #3
 8005bc8:	2b03      	cmp	r3, #3
 8005bca:	d817      	bhi.n	8005bfc <UART_SetConfig+0xb8>
 8005bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8005bd4 <UART_SetConfig+0x90>)
 8005bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd2:	bf00      	nop
 8005bd4:	08005be5 	.word	0x08005be5
 8005bd8:	08005bf1 	.word	0x08005bf1
 8005bdc:	08005bf7 	.word	0x08005bf7
 8005be0:	08005beb 	.word	0x08005beb
 8005be4:	2301      	movs	r3, #1
 8005be6:	77fb      	strb	r3, [r7, #31]
 8005be8:	e0b5      	b.n	8005d56 <UART_SetConfig+0x212>
 8005bea:	2302      	movs	r3, #2
 8005bec:	77fb      	strb	r3, [r7, #31]
 8005bee:	e0b2      	b.n	8005d56 <UART_SetConfig+0x212>
 8005bf0:	2304      	movs	r3, #4
 8005bf2:	77fb      	strb	r3, [r7, #31]
 8005bf4:	e0af      	b.n	8005d56 <UART_SetConfig+0x212>
 8005bf6:	2308      	movs	r3, #8
 8005bf8:	77fb      	strb	r3, [r7, #31]
 8005bfa:	e0ac      	b.n	8005d56 <UART_SetConfig+0x212>
 8005bfc:	2310      	movs	r3, #16
 8005bfe:	77fb      	strb	r3, [r7, #31]
 8005c00:	e0a9      	b.n	8005d56 <UART_SetConfig+0x212>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a6f      	ldr	r2, [pc, #444]	@ (8005dc4 <UART_SetConfig+0x280>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d124      	bne.n	8005c56 <UART_SetConfig+0x112>
 8005c0c:	4b6c      	ldr	r3, [pc, #432]	@ (8005dc0 <UART_SetConfig+0x27c>)
 8005c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005c14:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c18:	d011      	beq.n	8005c3e <UART_SetConfig+0xfa>
 8005c1a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c1e:	d817      	bhi.n	8005c50 <UART_SetConfig+0x10c>
 8005c20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c24:	d011      	beq.n	8005c4a <UART_SetConfig+0x106>
 8005c26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c2a:	d811      	bhi.n	8005c50 <UART_SetConfig+0x10c>
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d003      	beq.n	8005c38 <UART_SetConfig+0xf4>
 8005c30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c34:	d006      	beq.n	8005c44 <UART_SetConfig+0x100>
 8005c36:	e00b      	b.n	8005c50 <UART_SetConfig+0x10c>
 8005c38:	2300      	movs	r3, #0
 8005c3a:	77fb      	strb	r3, [r7, #31]
 8005c3c:	e08b      	b.n	8005d56 <UART_SetConfig+0x212>
 8005c3e:	2302      	movs	r3, #2
 8005c40:	77fb      	strb	r3, [r7, #31]
 8005c42:	e088      	b.n	8005d56 <UART_SetConfig+0x212>
 8005c44:	2304      	movs	r3, #4
 8005c46:	77fb      	strb	r3, [r7, #31]
 8005c48:	e085      	b.n	8005d56 <UART_SetConfig+0x212>
 8005c4a:	2308      	movs	r3, #8
 8005c4c:	77fb      	strb	r3, [r7, #31]
 8005c4e:	e082      	b.n	8005d56 <UART_SetConfig+0x212>
 8005c50:	2310      	movs	r3, #16
 8005c52:	77fb      	strb	r3, [r7, #31]
 8005c54:	e07f      	b.n	8005d56 <UART_SetConfig+0x212>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a5b      	ldr	r2, [pc, #364]	@ (8005dc8 <UART_SetConfig+0x284>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d124      	bne.n	8005caa <UART_SetConfig+0x166>
 8005c60:	4b57      	ldr	r3, [pc, #348]	@ (8005dc0 <UART_SetConfig+0x27c>)
 8005c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c64:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005c68:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005c6c:	d011      	beq.n	8005c92 <UART_SetConfig+0x14e>
 8005c6e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005c72:	d817      	bhi.n	8005ca4 <UART_SetConfig+0x160>
 8005c74:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005c78:	d011      	beq.n	8005c9e <UART_SetConfig+0x15a>
 8005c7a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005c7e:	d811      	bhi.n	8005ca4 <UART_SetConfig+0x160>
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d003      	beq.n	8005c8c <UART_SetConfig+0x148>
 8005c84:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c88:	d006      	beq.n	8005c98 <UART_SetConfig+0x154>
 8005c8a:	e00b      	b.n	8005ca4 <UART_SetConfig+0x160>
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	77fb      	strb	r3, [r7, #31]
 8005c90:	e061      	b.n	8005d56 <UART_SetConfig+0x212>
 8005c92:	2302      	movs	r3, #2
 8005c94:	77fb      	strb	r3, [r7, #31]
 8005c96:	e05e      	b.n	8005d56 <UART_SetConfig+0x212>
 8005c98:	2304      	movs	r3, #4
 8005c9a:	77fb      	strb	r3, [r7, #31]
 8005c9c:	e05b      	b.n	8005d56 <UART_SetConfig+0x212>
 8005c9e:	2308      	movs	r3, #8
 8005ca0:	77fb      	strb	r3, [r7, #31]
 8005ca2:	e058      	b.n	8005d56 <UART_SetConfig+0x212>
 8005ca4:	2310      	movs	r3, #16
 8005ca6:	77fb      	strb	r3, [r7, #31]
 8005ca8:	e055      	b.n	8005d56 <UART_SetConfig+0x212>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a47      	ldr	r2, [pc, #284]	@ (8005dcc <UART_SetConfig+0x288>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d124      	bne.n	8005cfe <UART_SetConfig+0x1ba>
 8005cb4:	4b42      	ldr	r3, [pc, #264]	@ (8005dc0 <UART_SetConfig+0x27c>)
 8005cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cb8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005cbc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005cc0:	d011      	beq.n	8005ce6 <UART_SetConfig+0x1a2>
 8005cc2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005cc6:	d817      	bhi.n	8005cf8 <UART_SetConfig+0x1b4>
 8005cc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ccc:	d011      	beq.n	8005cf2 <UART_SetConfig+0x1ae>
 8005cce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005cd2:	d811      	bhi.n	8005cf8 <UART_SetConfig+0x1b4>
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d003      	beq.n	8005ce0 <UART_SetConfig+0x19c>
 8005cd8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cdc:	d006      	beq.n	8005cec <UART_SetConfig+0x1a8>
 8005cde:	e00b      	b.n	8005cf8 <UART_SetConfig+0x1b4>
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	77fb      	strb	r3, [r7, #31]
 8005ce4:	e037      	b.n	8005d56 <UART_SetConfig+0x212>
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	77fb      	strb	r3, [r7, #31]
 8005cea:	e034      	b.n	8005d56 <UART_SetConfig+0x212>
 8005cec:	2304      	movs	r3, #4
 8005cee:	77fb      	strb	r3, [r7, #31]
 8005cf0:	e031      	b.n	8005d56 <UART_SetConfig+0x212>
 8005cf2:	2308      	movs	r3, #8
 8005cf4:	77fb      	strb	r3, [r7, #31]
 8005cf6:	e02e      	b.n	8005d56 <UART_SetConfig+0x212>
 8005cf8:	2310      	movs	r3, #16
 8005cfa:	77fb      	strb	r3, [r7, #31]
 8005cfc:	e02b      	b.n	8005d56 <UART_SetConfig+0x212>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a33      	ldr	r2, [pc, #204]	@ (8005dd0 <UART_SetConfig+0x28c>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d124      	bne.n	8005d52 <UART_SetConfig+0x20e>
 8005d08:	4b2d      	ldr	r3, [pc, #180]	@ (8005dc0 <UART_SetConfig+0x27c>)
 8005d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d0c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005d10:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005d14:	d011      	beq.n	8005d3a <UART_SetConfig+0x1f6>
 8005d16:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005d1a:	d817      	bhi.n	8005d4c <UART_SetConfig+0x208>
 8005d1c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005d20:	d011      	beq.n	8005d46 <UART_SetConfig+0x202>
 8005d22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005d26:	d811      	bhi.n	8005d4c <UART_SetConfig+0x208>
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d003      	beq.n	8005d34 <UART_SetConfig+0x1f0>
 8005d2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d30:	d006      	beq.n	8005d40 <UART_SetConfig+0x1fc>
 8005d32:	e00b      	b.n	8005d4c <UART_SetConfig+0x208>
 8005d34:	2300      	movs	r3, #0
 8005d36:	77fb      	strb	r3, [r7, #31]
 8005d38:	e00d      	b.n	8005d56 <UART_SetConfig+0x212>
 8005d3a:	2302      	movs	r3, #2
 8005d3c:	77fb      	strb	r3, [r7, #31]
 8005d3e:	e00a      	b.n	8005d56 <UART_SetConfig+0x212>
 8005d40:	2304      	movs	r3, #4
 8005d42:	77fb      	strb	r3, [r7, #31]
 8005d44:	e007      	b.n	8005d56 <UART_SetConfig+0x212>
 8005d46:	2308      	movs	r3, #8
 8005d48:	77fb      	strb	r3, [r7, #31]
 8005d4a:	e004      	b.n	8005d56 <UART_SetConfig+0x212>
 8005d4c:	2310      	movs	r3, #16
 8005d4e:	77fb      	strb	r3, [r7, #31]
 8005d50:	e001      	b.n	8005d56 <UART_SetConfig+0x212>
 8005d52:	2310      	movs	r3, #16
 8005d54:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	69db      	ldr	r3, [r3, #28]
 8005d5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d5e:	d16b      	bne.n	8005e38 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8005d60:	7ffb      	ldrb	r3, [r7, #31]
 8005d62:	2b08      	cmp	r3, #8
 8005d64:	d838      	bhi.n	8005dd8 <UART_SetConfig+0x294>
 8005d66:	a201      	add	r2, pc, #4	@ (adr r2, 8005d6c <UART_SetConfig+0x228>)
 8005d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6c:	08005d91 	.word	0x08005d91
 8005d70:	08005d99 	.word	0x08005d99
 8005d74:	08005da1 	.word	0x08005da1
 8005d78:	08005dd9 	.word	0x08005dd9
 8005d7c:	08005da7 	.word	0x08005da7
 8005d80:	08005dd9 	.word	0x08005dd9
 8005d84:	08005dd9 	.word	0x08005dd9
 8005d88:	08005dd9 	.word	0x08005dd9
 8005d8c:	08005daf 	.word	0x08005daf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d90:	f7fe fa7c 	bl	800428c <HAL_RCC_GetPCLK1Freq>
 8005d94:	61b8      	str	r0, [r7, #24]
        break;
 8005d96:	e024      	b.n	8005de2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d98:	f7fe fa9a 	bl	80042d0 <HAL_RCC_GetPCLK2Freq>
 8005d9c:	61b8      	str	r0, [r7, #24]
        break;
 8005d9e:	e020      	b.n	8005de2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005da0:	4b0c      	ldr	r3, [pc, #48]	@ (8005dd4 <UART_SetConfig+0x290>)
 8005da2:	61bb      	str	r3, [r7, #24]
        break;
 8005da4:	e01d      	b.n	8005de2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005da6:	f7fe fa11 	bl	80041cc <HAL_RCC_GetSysClockFreq>
 8005daa:	61b8      	str	r0, [r7, #24]
        break;
 8005dac:	e019      	b.n	8005de2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005db2:	61bb      	str	r3, [r7, #24]
        break;
 8005db4:	e015      	b.n	8005de2 <UART_SetConfig+0x29e>
 8005db6:	bf00      	nop
 8005db8:	efff69f3 	.word	0xefff69f3
 8005dbc:	40013800 	.word	0x40013800
 8005dc0:	40021000 	.word	0x40021000
 8005dc4:	40004400 	.word	0x40004400
 8005dc8:	40004800 	.word	0x40004800
 8005dcc:	40004c00 	.word	0x40004c00
 8005dd0:	40005000 	.word	0x40005000
 8005dd4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	77bb      	strb	r3, [r7, #30]
        break;
 8005de0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d073      	beq.n	8005ed0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	005a      	lsls	r2, r3, #1
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	085b      	lsrs	r3, r3, #1
 8005df2:	441a      	add	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dfc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	2b0f      	cmp	r3, #15
 8005e02:	d916      	bls.n	8005e32 <UART_SetConfig+0x2ee>
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e0a:	d212      	bcs.n	8005e32 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	f023 030f 	bic.w	r3, r3, #15
 8005e14:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	085b      	lsrs	r3, r3, #1
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	f003 0307 	and.w	r3, r3, #7
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	89fb      	ldrh	r3, [r7, #14]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	89fa      	ldrh	r2, [r7, #14]
 8005e2e:	60da      	str	r2, [r3, #12]
 8005e30:	e04e      	b.n	8005ed0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	77bb      	strb	r3, [r7, #30]
 8005e36:	e04b      	b.n	8005ed0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e38:	7ffb      	ldrb	r3, [r7, #31]
 8005e3a:	2b08      	cmp	r3, #8
 8005e3c:	d827      	bhi.n	8005e8e <UART_SetConfig+0x34a>
 8005e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8005e44 <UART_SetConfig+0x300>)
 8005e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e44:	08005e69 	.word	0x08005e69
 8005e48:	08005e71 	.word	0x08005e71
 8005e4c:	08005e79 	.word	0x08005e79
 8005e50:	08005e8f 	.word	0x08005e8f
 8005e54:	08005e7f 	.word	0x08005e7f
 8005e58:	08005e8f 	.word	0x08005e8f
 8005e5c:	08005e8f 	.word	0x08005e8f
 8005e60:	08005e8f 	.word	0x08005e8f
 8005e64:	08005e87 	.word	0x08005e87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e68:	f7fe fa10 	bl	800428c <HAL_RCC_GetPCLK1Freq>
 8005e6c:	61b8      	str	r0, [r7, #24]
        break;
 8005e6e:	e013      	b.n	8005e98 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e70:	f7fe fa2e 	bl	80042d0 <HAL_RCC_GetPCLK2Freq>
 8005e74:	61b8      	str	r0, [r7, #24]
        break;
 8005e76:	e00f      	b.n	8005e98 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e78:	4b1b      	ldr	r3, [pc, #108]	@ (8005ee8 <UART_SetConfig+0x3a4>)
 8005e7a:	61bb      	str	r3, [r7, #24]
        break;
 8005e7c:	e00c      	b.n	8005e98 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e7e:	f7fe f9a5 	bl	80041cc <HAL_RCC_GetSysClockFreq>
 8005e82:	61b8      	str	r0, [r7, #24]
        break;
 8005e84:	e008      	b.n	8005e98 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e8a:	61bb      	str	r3, [r7, #24]
        break;
 8005e8c:	e004      	b.n	8005e98 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	77bb      	strb	r3, [r7, #30]
        break;
 8005e96:	bf00      	nop
    }

    if (pclk != 0U)
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d018      	beq.n	8005ed0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	085a      	lsrs	r2, r3, #1
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	441a      	add	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	2b0f      	cmp	r3, #15
 8005eb6:	d909      	bls.n	8005ecc <UART_SetConfig+0x388>
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ebe:	d205      	bcs.n	8005ecc <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	60da      	str	r2, [r3, #12]
 8005eca:	e001      	b.n	8005ed0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005edc:	7fbb      	ldrb	r3, [r7, #30]
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3720      	adds	r7, #32
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	007a1200 	.word	0x007a1200

08005eec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef8:	f003 0308 	and.w	r3, r3, #8
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00a      	beq.n	8005f16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00a      	beq.n	8005f38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	430a      	orrs	r2, r1
 8005f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f3c:	f003 0302 	and.w	r3, r3, #2
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00a      	beq.n	8005f5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	430a      	orrs	r2, r1
 8005f58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f5e:	f003 0304 	and.w	r3, r3, #4
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00a      	beq.n	8005f7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f80:	f003 0310 	and.w	r3, r3, #16
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00a      	beq.n	8005f9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa2:	f003 0320 	and.w	r3, r3, #32
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00a      	beq.n	8005fc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	430a      	orrs	r2, r1
 8005fbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d01a      	beq.n	8006002 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fea:	d10a      	bne.n	8006002 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	430a      	orrs	r2, r1
 8006000:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00a      	beq.n	8006024 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	430a      	orrs	r2, r1
 8006022:	605a      	str	r2, [r3, #4]
  }
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b098      	sub	sp, #96	@ 0x60
 8006034:	af02      	add	r7, sp, #8
 8006036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006040:	f7fb fb4e 	bl	80016e0 <HAL_GetTick>
 8006044:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0308 	and.w	r3, r3, #8
 8006050:	2b08      	cmp	r3, #8
 8006052:	d12e      	bne.n	80060b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006054:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800605c:	2200      	movs	r2, #0
 800605e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f88c 	bl	8006180 <UART_WaitOnFlagUntilTimeout>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d021      	beq.n	80060b2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006076:	e853 3f00 	ldrex	r3, [r3]
 800607a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800607c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800607e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006082:	653b      	str	r3, [r7, #80]	@ 0x50
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	461a      	mov	r2, r3
 800608a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800608c:	647b      	str	r3, [r7, #68]	@ 0x44
 800608e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006090:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006092:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006094:	e841 2300 	strex	r3, r2, [r1]
 8006098:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800609a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1e6      	bne.n	800606e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2220      	movs	r2, #32
 80060a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e062      	b.n	8006178 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0304 	and.w	r3, r3, #4
 80060bc:	2b04      	cmp	r3, #4
 80060be:	d149      	bne.n	8006154 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80060c4:	9300      	str	r3, [sp, #0]
 80060c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060c8:	2200      	movs	r2, #0
 80060ca:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f856 	bl	8006180 <UART_WaitOnFlagUntilTimeout>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d03c      	beq.n	8006154 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e2:	e853 3f00 	ldrex	r3, [r3]
 80060e6:	623b      	str	r3, [r7, #32]
   return(result);
 80060e8:	6a3b      	ldr	r3, [r7, #32]
 80060ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	461a      	mov	r2, r3
 80060f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80060fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006100:	e841 2300 	strex	r3, r2, [r1]
 8006104:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1e6      	bne.n	80060da <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	3308      	adds	r3, #8
 8006112:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	e853 3f00 	ldrex	r3, [r3]
 800611a:	60fb      	str	r3, [r7, #12]
   return(result);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f023 0301 	bic.w	r3, r3, #1
 8006122:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	3308      	adds	r3, #8
 800612a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800612c:	61fa      	str	r2, [r7, #28]
 800612e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006130:	69b9      	ldr	r1, [r7, #24]
 8006132:	69fa      	ldr	r2, [r7, #28]
 8006134:	e841 2300 	strex	r3, r2, [r1]
 8006138:	617b      	str	r3, [r7, #20]
   return(result);
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1e5      	bne.n	800610c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2220      	movs	r2, #32
 8006144:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e011      	b.n	8006178 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2220      	movs	r2, #32
 8006158:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2220      	movs	r2, #32
 800615e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3758      	adds	r7, #88	@ 0x58
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	603b      	str	r3, [r7, #0]
 800618c:	4613      	mov	r3, r2
 800618e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006190:	e04f      	b.n	8006232 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006198:	d04b      	beq.n	8006232 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800619a:	f7fb faa1 	bl	80016e0 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d302      	bcc.n	80061b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e04e      	b.n	8006252 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0304 	and.w	r3, r3, #4
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d037      	beq.n	8006232 <UART_WaitOnFlagUntilTimeout+0xb2>
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2b80      	cmp	r3, #128	@ 0x80
 80061c6:	d034      	beq.n	8006232 <UART_WaitOnFlagUntilTimeout+0xb2>
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	2b40      	cmp	r3, #64	@ 0x40
 80061cc:	d031      	beq.n	8006232 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	69db      	ldr	r3, [r3, #28]
 80061d4:	f003 0308 	and.w	r3, r3, #8
 80061d8:	2b08      	cmp	r3, #8
 80061da:	d110      	bne.n	80061fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2208      	movs	r2, #8
 80061e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 f838 	bl	800625a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2208      	movs	r2, #8
 80061ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e029      	b.n	8006252 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	69db      	ldr	r3, [r3, #28]
 8006204:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006208:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800620c:	d111      	bne.n	8006232 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006216:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f000 f81e 	bl	800625a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2220      	movs	r2, #32
 8006222:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e00f      	b.n	8006252 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	69da      	ldr	r2, [r3, #28]
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	4013      	ands	r3, r2
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	429a      	cmp	r2, r3
 8006240:	bf0c      	ite	eq
 8006242:	2301      	moveq	r3, #1
 8006244:	2300      	movne	r3, #0
 8006246:	b2db      	uxtb	r3, r3
 8006248:	461a      	mov	r2, r3
 800624a:	79fb      	ldrb	r3, [r7, #7]
 800624c:	429a      	cmp	r2, r3
 800624e:	d0a0      	beq.n	8006192 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800625a:	b480      	push	{r7}
 800625c:	b095      	sub	sp, #84	@ 0x54
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800626a:	e853 3f00 	ldrex	r3, [r3]
 800626e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006272:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006276:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	461a      	mov	r2, r3
 800627e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006280:	643b      	str	r3, [r7, #64]	@ 0x40
 8006282:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006284:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006286:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006288:	e841 2300 	strex	r3, r2, [r1]
 800628c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800628e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1e6      	bne.n	8006262 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	3308      	adds	r3, #8
 800629a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629c:	6a3b      	ldr	r3, [r7, #32]
 800629e:	e853 3f00 	ldrex	r3, [r3]
 80062a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	f023 0301 	bic.w	r3, r3, #1
 80062aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	3308      	adds	r3, #8
 80062b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062bc:	e841 2300 	strex	r3, r2, [r1]
 80062c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80062c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1e5      	bne.n	8006294 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d118      	bne.n	8006302 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	e853 3f00 	ldrex	r3, [r3]
 80062dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	f023 0310 	bic.w	r3, r3, #16
 80062e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	461a      	mov	r2, r3
 80062ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062ee:	61bb      	str	r3, [r7, #24]
 80062f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f2:	6979      	ldr	r1, [r7, #20]
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	e841 2300 	strex	r3, r2, [r1]
 80062fa:	613b      	str	r3, [r7, #16]
   return(result);
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1e6      	bne.n	80062d0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2220      	movs	r2, #32
 8006306:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006316:	bf00      	nop
 8006318:	3754      	adds	r7, #84	@ 0x54
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <__cvt>:
 8006322:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006326:	ec57 6b10 	vmov	r6, r7, d0
 800632a:	2f00      	cmp	r7, #0
 800632c:	460c      	mov	r4, r1
 800632e:	4619      	mov	r1, r3
 8006330:	463b      	mov	r3, r7
 8006332:	bfbb      	ittet	lt
 8006334:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006338:	461f      	movlt	r7, r3
 800633a:	2300      	movge	r3, #0
 800633c:	232d      	movlt	r3, #45	@ 0x2d
 800633e:	700b      	strb	r3, [r1, #0]
 8006340:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006342:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006346:	4691      	mov	r9, r2
 8006348:	f023 0820 	bic.w	r8, r3, #32
 800634c:	bfbc      	itt	lt
 800634e:	4632      	movlt	r2, r6
 8006350:	4616      	movlt	r6, r2
 8006352:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006356:	d005      	beq.n	8006364 <__cvt+0x42>
 8006358:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800635c:	d100      	bne.n	8006360 <__cvt+0x3e>
 800635e:	3401      	adds	r4, #1
 8006360:	2102      	movs	r1, #2
 8006362:	e000      	b.n	8006366 <__cvt+0x44>
 8006364:	2103      	movs	r1, #3
 8006366:	ab03      	add	r3, sp, #12
 8006368:	9301      	str	r3, [sp, #4]
 800636a:	ab02      	add	r3, sp, #8
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	ec47 6b10 	vmov	d0, r6, r7
 8006372:	4653      	mov	r3, sl
 8006374:	4622      	mov	r2, r4
 8006376:	f000 fe4b 	bl	8007010 <_dtoa_r>
 800637a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800637e:	4605      	mov	r5, r0
 8006380:	d119      	bne.n	80063b6 <__cvt+0x94>
 8006382:	f019 0f01 	tst.w	r9, #1
 8006386:	d00e      	beq.n	80063a6 <__cvt+0x84>
 8006388:	eb00 0904 	add.w	r9, r0, r4
 800638c:	2200      	movs	r2, #0
 800638e:	2300      	movs	r3, #0
 8006390:	4630      	mov	r0, r6
 8006392:	4639      	mov	r1, r7
 8006394:	f7fa fba0 	bl	8000ad8 <__aeabi_dcmpeq>
 8006398:	b108      	cbz	r0, 800639e <__cvt+0x7c>
 800639a:	f8cd 900c 	str.w	r9, [sp, #12]
 800639e:	2230      	movs	r2, #48	@ 0x30
 80063a0:	9b03      	ldr	r3, [sp, #12]
 80063a2:	454b      	cmp	r3, r9
 80063a4:	d31e      	bcc.n	80063e4 <__cvt+0xc2>
 80063a6:	9b03      	ldr	r3, [sp, #12]
 80063a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80063aa:	1b5b      	subs	r3, r3, r5
 80063ac:	4628      	mov	r0, r5
 80063ae:	6013      	str	r3, [r2, #0]
 80063b0:	b004      	add	sp, #16
 80063b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063b6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80063ba:	eb00 0904 	add.w	r9, r0, r4
 80063be:	d1e5      	bne.n	800638c <__cvt+0x6a>
 80063c0:	7803      	ldrb	r3, [r0, #0]
 80063c2:	2b30      	cmp	r3, #48	@ 0x30
 80063c4:	d10a      	bne.n	80063dc <__cvt+0xba>
 80063c6:	2200      	movs	r2, #0
 80063c8:	2300      	movs	r3, #0
 80063ca:	4630      	mov	r0, r6
 80063cc:	4639      	mov	r1, r7
 80063ce:	f7fa fb83 	bl	8000ad8 <__aeabi_dcmpeq>
 80063d2:	b918      	cbnz	r0, 80063dc <__cvt+0xba>
 80063d4:	f1c4 0401 	rsb	r4, r4, #1
 80063d8:	f8ca 4000 	str.w	r4, [sl]
 80063dc:	f8da 3000 	ldr.w	r3, [sl]
 80063e0:	4499      	add	r9, r3
 80063e2:	e7d3      	b.n	800638c <__cvt+0x6a>
 80063e4:	1c59      	adds	r1, r3, #1
 80063e6:	9103      	str	r1, [sp, #12]
 80063e8:	701a      	strb	r2, [r3, #0]
 80063ea:	e7d9      	b.n	80063a0 <__cvt+0x7e>

080063ec <__exponent>:
 80063ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063ee:	2900      	cmp	r1, #0
 80063f0:	bfba      	itte	lt
 80063f2:	4249      	neglt	r1, r1
 80063f4:	232d      	movlt	r3, #45	@ 0x2d
 80063f6:	232b      	movge	r3, #43	@ 0x2b
 80063f8:	2909      	cmp	r1, #9
 80063fa:	7002      	strb	r2, [r0, #0]
 80063fc:	7043      	strb	r3, [r0, #1]
 80063fe:	dd29      	ble.n	8006454 <__exponent+0x68>
 8006400:	f10d 0307 	add.w	r3, sp, #7
 8006404:	461d      	mov	r5, r3
 8006406:	270a      	movs	r7, #10
 8006408:	461a      	mov	r2, r3
 800640a:	fbb1 f6f7 	udiv	r6, r1, r7
 800640e:	fb07 1416 	mls	r4, r7, r6, r1
 8006412:	3430      	adds	r4, #48	@ 0x30
 8006414:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006418:	460c      	mov	r4, r1
 800641a:	2c63      	cmp	r4, #99	@ 0x63
 800641c:	f103 33ff 	add.w	r3, r3, #4294967295
 8006420:	4631      	mov	r1, r6
 8006422:	dcf1      	bgt.n	8006408 <__exponent+0x1c>
 8006424:	3130      	adds	r1, #48	@ 0x30
 8006426:	1e94      	subs	r4, r2, #2
 8006428:	f803 1c01 	strb.w	r1, [r3, #-1]
 800642c:	1c41      	adds	r1, r0, #1
 800642e:	4623      	mov	r3, r4
 8006430:	42ab      	cmp	r3, r5
 8006432:	d30a      	bcc.n	800644a <__exponent+0x5e>
 8006434:	f10d 0309 	add.w	r3, sp, #9
 8006438:	1a9b      	subs	r3, r3, r2
 800643a:	42ac      	cmp	r4, r5
 800643c:	bf88      	it	hi
 800643e:	2300      	movhi	r3, #0
 8006440:	3302      	adds	r3, #2
 8006442:	4403      	add	r3, r0
 8006444:	1a18      	subs	r0, r3, r0
 8006446:	b003      	add	sp, #12
 8006448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800644a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800644e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006452:	e7ed      	b.n	8006430 <__exponent+0x44>
 8006454:	2330      	movs	r3, #48	@ 0x30
 8006456:	3130      	adds	r1, #48	@ 0x30
 8006458:	7083      	strb	r3, [r0, #2]
 800645a:	70c1      	strb	r1, [r0, #3]
 800645c:	1d03      	adds	r3, r0, #4
 800645e:	e7f1      	b.n	8006444 <__exponent+0x58>

08006460 <_printf_float>:
 8006460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006464:	b08d      	sub	sp, #52	@ 0x34
 8006466:	460c      	mov	r4, r1
 8006468:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800646c:	4616      	mov	r6, r2
 800646e:	461f      	mov	r7, r3
 8006470:	4605      	mov	r5, r0
 8006472:	f000 fccb 	bl	8006e0c <_localeconv_r>
 8006476:	6803      	ldr	r3, [r0, #0]
 8006478:	9304      	str	r3, [sp, #16]
 800647a:	4618      	mov	r0, r3
 800647c:	f7f9 ff00 	bl	8000280 <strlen>
 8006480:	2300      	movs	r3, #0
 8006482:	930a      	str	r3, [sp, #40]	@ 0x28
 8006484:	f8d8 3000 	ldr.w	r3, [r8]
 8006488:	9005      	str	r0, [sp, #20]
 800648a:	3307      	adds	r3, #7
 800648c:	f023 0307 	bic.w	r3, r3, #7
 8006490:	f103 0208 	add.w	r2, r3, #8
 8006494:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006498:	f8d4 b000 	ldr.w	fp, [r4]
 800649c:	f8c8 2000 	str.w	r2, [r8]
 80064a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80064a4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80064a8:	9307      	str	r3, [sp, #28]
 80064aa:	f8cd 8018 	str.w	r8, [sp, #24]
 80064ae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80064b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064b6:	4b9c      	ldr	r3, [pc, #624]	@ (8006728 <_printf_float+0x2c8>)
 80064b8:	f04f 32ff 	mov.w	r2, #4294967295
 80064bc:	f7fa fb3e 	bl	8000b3c <__aeabi_dcmpun>
 80064c0:	bb70      	cbnz	r0, 8006520 <_printf_float+0xc0>
 80064c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064c6:	4b98      	ldr	r3, [pc, #608]	@ (8006728 <_printf_float+0x2c8>)
 80064c8:	f04f 32ff 	mov.w	r2, #4294967295
 80064cc:	f7fa fb18 	bl	8000b00 <__aeabi_dcmple>
 80064d0:	bb30      	cbnz	r0, 8006520 <_printf_float+0xc0>
 80064d2:	2200      	movs	r2, #0
 80064d4:	2300      	movs	r3, #0
 80064d6:	4640      	mov	r0, r8
 80064d8:	4649      	mov	r1, r9
 80064da:	f7fa fb07 	bl	8000aec <__aeabi_dcmplt>
 80064de:	b110      	cbz	r0, 80064e6 <_printf_float+0x86>
 80064e0:	232d      	movs	r3, #45	@ 0x2d
 80064e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064e6:	4a91      	ldr	r2, [pc, #580]	@ (800672c <_printf_float+0x2cc>)
 80064e8:	4b91      	ldr	r3, [pc, #580]	@ (8006730 <_printf_float+0x2d0>)
 80064ea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80064ee:	bf8c      	ite	hi
 80064f0:	4690      	movhi	r8, r2
 80064f2:	4698      	movls	r8, r3
 80064f4:	2303      	movs	r3, #3
 80064f6:	6123      	str	r3, [r4, #16]
 80064f8:	f02b 0304 	bic.w	r3, fp, #4
 80064fc:	6023      	str	r3, [r4, #0]
 80064fe:	f04f 0900 	mov.w	r9, #0
 8006502:	9700      	str	r7, [sp, #0]
 8006504:	4633      	mov	r3, r6
 8006506:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006508:	4621      	mov	r1, r4
 800650a:	4628      	mov	r0, r5
 800650c:	f000 f9d2 	bl	80068b4 <_printf_common>
 8006510:	3001      	adds	r0, #1
 8006512:	f040 808d 	bne.w	8006630 <_printf_float+0x1d0>
 8006516:	f04f 30ff 	mov.w	r0, #4294967295
 800651a:	b00d      	add	sp, #52	@ 0x34
 800651c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006520:	4642      	mov	r2, r8
 8006522:	464b      	mov	r3, r9
 8006524:	4640      	mov	r0, r8
 8006526:	4649      	mov	r1, r9
 8006528:	f7fa fb08 	bl	8000b3c <__aeabi_dcmpun>
 800652c:	b140      	cbz	r0, 8006540 <_printf_float+0xe0>
 800652e:	464b      	mov	r3, r9
 8006530:	2b00      	cmp	r3, #0
 8006532:	bfbc      	itt	lt
 8006534:	232d      	movlt	r3, #45	@ 0x2d
 8006536:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800653a:	4a7e      	ldr	r2, [pc, #504]	@ (8006734 <_printf_float+0x2d4>)
 800653c:	4b7e      	ldr	r3, [pc, #504]	@ (8006738 <_printf_float+0x2d8>)
 800653e:	e7d4      	b.n	80064ea <_printf_float+0x8a>
 8006540:	6863      	ldr	r3, [r4, #4]
 8006542:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006546:	9206      	str	r2, [sp, #24]
 8006548:	1c5a      	adds	r2, r3, #1
 800654a:	d13b      	bne.n	80065c4 <_printf_float+0x164>
 800654c:	2306      	movs	r3, #6
 800654e:	6063      	str	r3, [r4, #4]
 8006550:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006554:	2300      	movs	r3, #0
 8006556:	6022      	str	r2, [r4, #0]
 8006558:	9303      	str	r3, [sp, #12]
 800655a:	ab0a      	add	r3, sp, #40	@ 0x28
 800655c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006560:	ab09      	add	r3, sp, #36	@ 0x24
 8006562:	9300      	str	r3, [sp, #0]
 8006564:	6861      	ldr	r1, [r4, #4]
 8006566:	ec49 8b10 	vmov	d0, r8, r9
 800656a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800656e:	4628      	mov	r0, r5
 8006570:	f7ff fed7 	bl	8006322 <__cvt>
 8006574:	9b06      	ldr	r3, [sp, #24]
 8006576:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006578:	2b47      	cmp	r3, #71	@ 0x47
 800657a:	4680      	mov	r8, r0
 800657c:	d129      	bne.n	80065d2 <_printf_float+0x172>
 800657e:	1cc8      	adds	r0, r1, #3
 8006580:	db02      	blt.n	8006588 <_printf_float+0x128>
 8006582:	6863      	ldr	r3, [r4, #4]
 8006584:	4299      	cmp	r1, r3
 8006586:	dd41      	ble.n	800660c <_printf_float+0x1ac>
 8006588:	f1aa 0a02 	sub.w	sl, sl, #2
 800658c:	fa5f fa8a 	uxtb.w	sl, sl
 8006590:	3901      	subs	r1, #1
 8006592:	4652      	mov	r2, sl
 8006594:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006598:	9109      	str	r1, [sp, #36]	@ 0x24
 800659a:	f7ff ff27 	bl	80063ec <__exponent>
 800659e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80065a0:	1813      	adds	r3, r2, r0
 80065a2:	2a01      	cmp	r2, #1
 80065a4:	4681      	mov	r9, r0
 80065a6:	6123      	str	r3, [r4, #16]
 80065a8:	dc02      	bgt.n	80065b0 <_printf_float+0x150>
 80065aa:	6822      	ldr	r2, [r4, #0]
 80065ac:	07d2      	lsls	r2, r2, #31
 80065ae:	d501      	bpl.n	80065b4 <_printf_float+0x154>
 80065b0:	3301      	adds	r3, #1
 80065b2:	6123      	str	r3, [r4, #16]
 80065b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d0a2      	beq.n	8006502 <_printf_float+0xa2>
 80065bc:	232d      	movs	r3, #45	@ 0x2d
 80065be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065c2:	e79e      	b.n	8006502 <_printf_float+0xa2>
 80065c4:	9a06      	ldr	r2, [sp, #24]
 80065c6:	2a47      	cmp	r2, #71	@ 0x47
 80065c8:	d1c2      	bne.n	8006550 <_printf_float+0xf0>
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1c0      	bne.n	8006550 <_printf_float+0xf0>
 80065ce:	2301      	movs	r3, #1
 80065d0:	e7bd      	b.n	800654e <_printf_float+0xee>
 80065d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80065d6:	d9db      	bls.n	8006590 <_printf_float+0x130>
 80065d8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80065dc:	d118      	bne.n	8006610 <_printf_float+0x1b0>
 80065de:	2900      	cmp	r1, #0
 80065e0:	6863      	ldr	r3, [r4, #4]
 80065e2:	dd0b      	ble.n	80065fc <_printf_float+0x19c>
 80065e4:	6121      	str	r1, [r4, #16]
 80065e6:	b913      	cbnz	r3, 80065ee <_printf_float+0x18e>
 80065e8:	6822      	ldr	r2, [r4, #0]
 80065ea:	07d0      	lsls	r0, r2, #31
 80065ec:	d502      	bpl.n	80065f4 <_printf_float+0x194>
 80065ee:	3301      	adds	r3, #1
 80065f0:	440b      	add	r3, r1
 80065f2:	6123      	str	r3, [r4, #16]
 80065f4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80065f6:	f04f 0900 	mov.w	r9, #0
 80065fa:	e7db      	b.n	80065b4 <_printf_float+0x154>
 80065fc:	b913      	cbnz	r3, 8006604 <_printf_float+0x1a4>
 80065fe:	6822      	ldr	r2, [r4, #0]
 8006600:	07d2      	lsls	r2, r2, #31
 8006602:	d501      	bpl.n	8006608 <_printf_float+0x1a8>
 8006604:	3302      	adds	r3, #2
 8006606:	e7f4      	b.n	80065f2 <_printf_float+0x192>
 8006608:	2301      	movs	r3, #1
 800660a:	e7f2      	b.n	80065f2 <_printf_float+0x192>
 800660c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006610:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006612:	4299      	cmp	r1, r3
 8006614:	db05      	blt.n	8006622 <_printf_float+0x1c2>
 8006616:	6823      	ldr	r3, [r4, #0]
 8006618:	6121      	str	r1, [r4, #16]
 800661a:	07d8      	lsls	r0, r3, #31
 800661c:	d5ea      	bpl.n	80065f4 <_printf_float+0x194>
 800661e:	1c4b      	adds	r3, r1, #1
 8006620:	e7e7      	b.n	80065f2 <_printf_float+0x192>
 8006622:	2900      	cmp	r1, #0
 8006624:	bfd4      	ite	le
 8006626:	f1c1 0202 	rsble	r2, r1, #2
 800662a:	2201      	movgt	r2, #1
 800662c:	4413      	add	r3, r2
 800662e:	e7e0      	b.n	80065f2 <_printf_float+0x192>
 8006630:	6823      	ldr	r3, [r4, #0]
 8006632:	055a      	lsls	r2, r3, #21
 8006634:	d407      	bmi.n	8006646 <_printf_float+0x1e6>
 8006636:	6923      	ldr	r3, [r4, #16]
 8006638:	4642      	mov	r2, r8
 800663a:	4631      	mov	r1, r6
 800663c:	4628      	mov	r0, r5
 800663e:	47b8      	blx	r7
 8006640:	3001      	adds	r0, #1
 8006642:	d12b      	bne.n	800669c <_printf_float+0x23c>
 8006644:	e767      	b.n	8006516 <_printf_float+0xb6>
 8006646:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800664a:	f240 80dd 	bls.w	8006808 <_printf_float+0x3a8>
 800664e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006652:	2200      	movs	r2, #0
 8006654:	2300      	movs	r3, #0
 8006656:	f7fa fa3f 	bl	8000ad8 <__aeabi_dcmpeq>
 800665a:	2800      	cmp	r0, #0
 800665c:	d033      	beq.n	80066c6 <_printf_float+0x266>
 800665e:	4a37      	ldr	r2, [pc, #220]	@ (800673c <_printf_float+0x2dc>)
 8006660:	2301      	movs	r3, #1
 8006662:	4631      	mov	r1, r6
 8006664:	4628      	mov	r0, r5
 8006666:	47b8      	blx	r7
 8006668:	3001      	adds	r0, #1
 800666a:	f43f af54 	beq.w	8006516 <_printf_float+0xb6>
 800666e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006672:	4543      	cmp	r3, r8
 8006674:	db02      	blt.n	800667c <_printf_float+0x21c>
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	07d8      	lsls	r0, r3, #31
 800667a:	d50f      	bpl.n	800669c <_printf_float+0x23c>
 800667c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006680:	4631      	mov	r1, r6
 8006682:	4628      	mov	r0, r5
 8006684:	47b8      	blx	r7
 8006686:	3001      	adds	r0, #1
 8006688:	f43f af45 	beq.w	8006516 <_printf_float+0xb6>
 800668c:	f04f 0900 	mov.w	r9, #0
 8006690:	f108 38ff 	add.w	r8, r8, #4294967295
 8006694:	f104 0a1a 	add.w	sl, r4, #26
 8006698:	45c8      	cmp	r8, r9
 800669a:	dc09      	bgt.n	80066b0 <_printf_float+0x250>
 800669c:	6823      	ldr	r3, [r4, #0]
 800669e:	079b      	lsls	r3, r3, #30
 80066a0:	f100 8103 	bmi.w	80068aa <_printf_float+0x44a>
 80066a4:	68e0      	ldr	r0, [r4, #12]
 80066a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066a8:	4298      	cmp	r0, r3
 80066aa:	bfb8      	it	lt
 80066ac:	4618      	movlt	r0, r3
 80066ae:	e734      	b.n	800651a <_printf_float+0xba>
 80066b0:	2301      	movs	r3, #1
 80066b2:	4652      	mov	r2, sl
 80066b4:	4631      	mov	r1, r6
 80066b6:	4628      	mov	r0, r5
 80066b8:	47b8      	blx	r7
 80066ba:	3001      	adds	r0, #1
 80066bc:	f43f af2b 	beq.w	8006516 <_printf_float+0xb6>
 80066c0:	f109 0901 	add.w	r9, r9, #1
 80066c4:	e7e8      	b.n	8006698 <_printf_float+0x238>
 80066c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	dc39      	bgt.n	8006740 <_printf_float+0x2e0>
 80066cc:	4a1b      	ldr	r2, [pc, #108]	@ (800673c <_printf_float+0x2dc>)
 80066ce:	2301      	movs	r3, #1
 80066d0:	4631      	mov	r1, r6
 80066d2:	4628      	mov	r0, r5
 80066d4:	47b8      	blx	r7
 80066d6:	3001      	adds	r0, #1
 80066d8:	f43f af1d 	beq.w	8006516 <_printf_float+0xb6>
 80066dc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80066e0:	ea59 0303 	orrs.w	r3, r9, r3
 80066e4:	d102      	bne.n	80066ec <_printf_float+0x28c>
 80066e6:	6823      	ldr	r3, [r4, #0]
 80066e8:	07d9      	lsls	r1, r3, #31
 80066ea:	d5d7      	bpl.n	800669c <_printf_float+0x23c>
 80066ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066f0:	4631      	mov	r1, r6
 80066f2:	4628      	mov	r0, r5
 80066f4:	47b8      	blx	r7
 80066f6:	3001      	adds	r0, #1
 80066f8:	f43f af0d 	beq.w	8006516 <_printf_float+0xb6>
 80066fc:	f04f 0a00 	mov.w	sl, #0
 8006700:	f104 0b1a 	add.w	fp, r4, #26
 8006704:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006706:	425b      	negs	r3, r3
 8006708:	4553      	cmp	r3, sl
 800670a:	dc01      	bgt.n	8006710 <_printf_float+0x2b0>
 800670c:	464b      	mov	r3, r9
 800670e:	e793      	b.n	8006638 <_printf_float+0x1d8>
 8006710:	2301      	movs	r3, #1
 8006712:	465a      	mov	r2, fp
 8006714:	4631      	mov	r1, r6
 8006716:	4628      	mov	r0, r5
 8006718:	47b8      	blx	r7
 800671a:	3001      	adds	r0, #1
 800671c:	f43f aefb 	beq.w	8006516 <_printf_float+0xb6>
 8006720:	f10a 0a01 	add.w	sl, sl, #1
 8006724:	e7ee      	b.n	8006704 <_printf_float+0x2a4>
 8006726:	bf00      	nop
 8006728:	7fefffff 	.word	0x7fefffff
 800672c:	08008cb0 	.word	0x08008cb0
 8006730:	08008cac 	.word	0x08008cac
 8006734:	08008cb8 	.word	0x08008cb8
 8006738:	08008cb4 	.word	0x08008cb4
 800673c:	08008cbc 	.word	0x08008cbc
 8006740:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006742:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006746:	4553      	cmp	r3, sl
 8006748:	bfa8      	it	ge
 800674a:	4653      	movge	r3, sl
 800674c:	2b00      	cmp	r3, #0
 800674e:	4699      	mov	r9, r3
 8006750:	dc36      	bgt.n	80067c0 <_printf_float+0x360>
 8006752:	f04f 0b00 	mov.w	fp, #0
 8006756:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800675a:	f104 021a 	add.w	r2, r4, #26
 800675e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006760:	9306      	str	r3, [sp, #24]
 8006762:	eba3 0309 	sub.w	r3, r3, r9
 8006766:	455b      	cmp	r3, fp
 8006768:	dc31      	bgt.n	80067ce <_printf_float+0x36e>
 800676a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800676c:	459a      	cmp	sl, r3
 800676e:	dc3a      	bgt.n	80067e6 <_printf_float+0x386>
 8006770:	6823      	ldr	r3, [r4, #0]
 8006772:	07da      	lsls	r2, r3, #31
 8006774:	d437      	bmi.n	80067e6 <_printf_float+0x386>
 8006776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006778:	ebaa 0903 	sub.w	r9, sl, r3
 800677c:	9b06      	ldr	r3, [sp, #24]
 800677e:	ebaa 0303 	sub.w	r3, sl, r3
 8006782:	4599      	cmp	r9, r3
 8006784:	bfa8      	it	ge
 8006786:	4699      	movge	r9, r3
 8006788:	f1b9 0f00 	cmp.w	r9, #0
 800678c:	dc33      	bgt.n	80067f6 <_printf_float+0x396>
 800678e:	f04f 0800 	mov.w	r8, #0
 8006792:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006796:	f104 0b1a 	add.w	fp, r4, #26
 800679a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800679c:	ebaa 0303 	sub.w	r3, sl, r3
 80067a0:	eba3 0309 	sub.w	r3, r3, r9
 80067a4:	4543      	cmp	r3, r8
 80067a6:	f77f af79 	ble.w	800669c <_printf_float+0x23c>
 80067aa:	2301      	movs	r3, #1
 80067ac:	465a      	mov	r2, fp
 80067ae:	4631      	mov	r1, r6
 80067b0:	4628      	mov	r0, r5
 80067b2:	47b8      	blx	r7
 80067b4:	3001      	adds	r0, #1
 80067b6:	f43f aeae 	beq.w	8006516 <_printf_float+0xb6>
 80067ba:	f108 0801 	add.w	r8, r8, #1
 80067be:	e7ec      	b.n	800679a <_printf_float+0x33a>
 80067c0:	4642      	mov	r2, r8
 80067c2:	4631      	mov	r1, r6
 80067c4:	4628      	mov	r0, r5
 80067c6:	47b8      	blx	r7
 80067c8:	3001      	adds	r0, #1
 80067ca:	d1c2      	bne.n	8006752 <_printf_float+0x2f2>
 80067cc:	e6a3      	b.n	8006516 <_printf_float+0xb6>
 80067ce:	2301      	movs	r3, #1
 80067d0:	4631      	mov	r1, r6
 80067d2:	4628      	mov	r0, r5
 80067d4:	9206      	str	r2, [sp, #24]
 80067d6:	47b8      	blx	r7
 80067d8:	3001      	adds	r0, #1
 80067da:	f43f ae9c 	beq.w	8006516 <_printf_float+0xb6>
 80067de:	9a06      	ldr	r2, [sp, #24]
 80067e0:	f10b 0b01 	add.w	fp, fp, #1
 80067e4:	e7bb      	b.n	800675e <_printf_float+0x2fe>
 80067e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067ea:	4631      	mov	r1, r6
 80067ec:	4628      	mov	r0, r5
 80067ee:	47b8      	blx	r7
 80067f0:	3001      	adds	r0, #1
 80067f2:	d1c0      	bne.n	8006776 <_printf_float+0x316>
 80067f4:	e68f      	b.n	8006516 <_printf_float+0xb6>
 80067f6:	9a06      	ldr	r2, [sp, #24]
 80067f8:	464b      	mov	r3, r9
 80067fa:	4442      	add	r2, r8
 80067fc:	4631      	mov	r1, r6
 80067fe:	4628      	mov	r0, r5
 8006800:	47b8      	blx	r7
 8006802:	3001      	adds	r0, #1
 8006804:	d1c3      	bne.n	800678e <_printf_float+0x32e>
 8006806:	e686      	b.n	8006516 <_printf_float+0xb6>
 8006808:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800680c:	f1ba 0f01 	cmp.w	sl, #1
 8006810:	dc01      	bgt.n	8006816 <_printf_float+0x3b6>
 8006812:	07db      	lsls	r3, r3, #31
 8006814:	d536      	bpl.n	8006884 <_printf_float+0x424>
 8006816:	2301      	movs	r3, #1
 8006818:	4642      	mov	r2, r8
 800681a:	4631      	mov	r1, r6
 800681c:	4628      	mov	r0, r5
 800681e:	47b8      	blx	r7
 8006820:	3001      	adds	r0, #1
 8006822:	f43f ae78 	beq.w	8006516 <_printf_float+0xb6>
 8006826:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800682a:	4631      	mov	r1, r6
 800682c:	4628      	mov	r0, r5
 800682e:	47b8      	blx	r7
 8006830:	3001      	adds	r0, #1
 8006832:	f43f ae70 	beq.w	8006516 <_printf_float+0xb6>
 8006836:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800683a:	2200      	movs	r2, #0
 800683c:	2300      	movs	r3, #0
 800683e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006842:	f7fa f949 	bl	8000ad8 <__aeabi_dcmpeq>
 8006846:	b9c0      	cbnz	r0, 800687a <_printf_float+0x41a>
 8006848:	4653      	mov	r3, sl
 800684a:	f108 0201 	add.w	r2, r8, #1
 800684e:	4631      	mov	r1, r6
 8006850:	4628      	mov	r0, r5
 8006852:	47b8      	blx	r7
 8006854:	3001      	adds	r0, #1
 8006856:	d10c      	bne.n	8006872 <_printf_float+0x412>
 8006858:	e65d      	b.n	8006516 <_printf_float+0xb6>
 800685a:	2301      	movs	r3, #1
 800685c:	465a      	mov	r2, fp
 800685e:	4631      	mov	r1, r6
 8006860:	4628      	mov	r0, r5
 8006862:	47b8      	blx	r7
 8006864:	3001      	adds	r0, #1
 8006866:	f43f ae56 	beq.w	8006516 <_printf_float+0xb6>
 800686a:	f108 0801 	add.w	r8, r8, #1
 800686e:	45d0      	cmp	r8, sl
 8006870:	dbf3      	blt.n	800685a <_printf_float+0x3fa>
 8006872:	464b      	mov	r3, r9
 8006874:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006878:	e6df      	b.n	800663a <_printf_float+0x1da>
 800687a:	f04f 0800 	mov.w	r8, #0
 800687e:	f104 0b1a 	add.w	fp, r4, #26
 8006882:	e7f4      	b.n	800686e <_printf_float+0x40e>
 8006884:	2301      	movs	r3, #1
 8006886:	4642      	mov	r2, r8
 8006888:	e7e1      	b.n	800684e <_printf_float+0x3ee>
 800688a:	2301      	movs	r3, #1
 800688c:	464a      	mov	r2, r9
 800688e:	4631      	mov	r1, r6
 8006890:	4628      	mov	r0, r5
 8006892:	47b8      	blx	r7
 8006894:	3001      	adds	r0, #1
 8006896:	f43f ae3e 	beq.w	8006516 <_printf_float+0xb6>
 800689a:	f108 0801 	add.w	r8, r8, #1
 800689e:	68e3      	ldr	r3, [r4, #12]
 80068a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80068a2:	1a5b      	subs	r3, r3, r1
 80068a4:	4543      	cmp	r3, r8
 80068a6:	dcf0      	bgt.n	800688a <_printf_float+0x42a>
 80068a8:	e6fc      	b.n	80066a4 <_printf_float+0x244>
 80068aa:	f04f 0800 	mov.w	r8, #0
 80068ae:	f104 0919 	add.w	r9, r4, #25
 80068b2:	e7f4      	b.n	800689e <_printf_float+0x43e>

080068b4 <_printf_common>:
 80068b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068b8:	4616      	mov	r6, r2
 80068ba:	4698      	mov	r8, r3
 80068bc:	688a      	ldr	r2, [r1, #8]
 80068be:	690b      	ldr	r3, [r1, #16]
 80068c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80068c4:	4293      	cmp	r3, r2
 80068c6:	bfb8      	it	lt
 80068c8:	4613      	movlt	r3, r2
 80068ca:	6033      	str	r3, [r6, #0]
 80068cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80068d0:	4607      	mov	r7, r0
 80068d2:	460c      	mov	r4, r1
 80068d4:	b10a      	cbz	r2, 80068da <_printf_common+0x26>
 80068d6:	3301      	adds	r3, #1
 80068d8:	6033      	str	r3, [r6, #0]
 80068da:	6823      	ldr	r3, [r4, #0]
 80068dc:	0699      	lsls	r1, r3, #26
 80068de:	bf42      	ittt	mi
 80068e0:	6833      	ldrmi	r3, [r6, #0]
 80068e2:	3302      	addmi	r3, #2
 80068e4:	6033      	strmi	r3, [r6, #0]
 80068e6:	6825      	ldr	r5, [r4, #0]
 80068e8:	f015 0506 	ands.w	r5, r5, #6
 80068ec:	d106      	bne.n	80068fc <_printf_common+0x48>
 80068ee:	f104 0a19 	add.w	sl, r4, #25
 80068f2:	68e3      	ldr	r3, [r4, #12]
 80068f4:	6832      	ldr	r2, [r6, #0]
 80068f6:	1a9b      	subs	r3, r3, r2
 80068f8:	42ab      	cmp	r3, r5
 80068fa:	dc26      	bgt.n	800694a <_printf_common+0x96>
 80068fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006900:	6822      	ldr	r2, [r4, #0]
 8006902:	3b00      	subs	r3, #0
 8006904:	bf18      	it	ne
 8006906:	2301      	movne	r3, #1
 8006908:	0692      	lsls	r2, r2, #26
 800690a:	d42b      	bmi.n	8006964 <_printf_common+0xb0>
 800690c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006910:	4641      	mov	r1, r8
 8006912:	4638      	mov	r0, r7
 8006914:	47c8      	blx	r9
 8006916:	3001      	adds	r0, #1
 8006918:	d01e      	beq.n	8006958 <_printf_common+0xa4>
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	6922      	ldr	r2, [r4, #16]
 800691e:	f003 0306 	and.w	r3, r3, #6
 8006922:	2b04      	cmp	r3, #4
 8006924:	bf02      	ittt	eq
 8006926:	68e5      	ldreq	r5, [r4, #12]
 8006928:	6833      	ldreq	r3, [r6, #0]
 800692a:	1aed      	subeq	r5, r5, r3
 800692c:	68a3      	ldr	r3, [r4, #8]
 800692e:	bf0c      	ite	eq
 8006930:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006934:	2500      	movne	r5, #0
 8006936:	4293      	cmp	r3, r2
 8006938:	bfc4      	itt	gt
 800693a:	1a9b      	subgt	r3, r3, r2
 800693c:	18ed      	addgt	r5, r5, r3
 800693e:	2600      	movs	r6, #0
 8006940:	341a      	adds	r4, #26
 8006942:	42b5      	cmp	r5, r6
 8006944:	d11a      	bne.n	800697c <_printf_common+0xc8>
 8006946:	2000      	movs	r0, #0
 8006948:	e008      	b.n	800695c <_printf_common+0xa8>
 800694a:	2301      	movs	r3, #1
 800694c:	4652      	mov	r2, sl
 800694e:	4641      	mov	r1, r8
 8006950:	4638      	mov	r0, r7
 8006952:	47c8      	blx	r9
 8006954:	3001      	adds	r0, #1
 8006956:	d103      	bne.n	8006960 <_printf_common+0xac>
 8006958:	f04f 30ff 	mov.w	r0, #4294967295
 800695c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006960:	3501      	adds	r5, #1
 8006962:	e7c6      	b.n	80068f2 <_printf_common+0x3e>
 8006964:	18e1      	adds	r1, r4, r3
 8006966:	1c5a      	adds	r2, r3, #1
 8006968:	2030      	movs	r0, #48	@ 0x30
 800696a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800696e:	4422      	add	r2, r4
 8006970:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006974:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006978:	3302      	adds	r3, #2
 800697a:	e7c7      	b.n	800690c <_printf_common+0x58>
 800697c:	2301      	movs	r3, #1
 800697e:	4622      	mov	r2, r4
 8006980:	4641      	mov	r1, r8
 8006982:	4638      	mov	r0, r7
 8006984:	47c8      	blx	r9
 8006986:	3001      	adds	r0, #1
 8006988:	d0e6      	beq.n	8006958 <_printf_common+0xa4>
 800698a:	3601      	adds	r6, #1
 800698c:	e7d9      	b.n	8006942 <_printf_common+0x8e>
	...

08006990 <_printf_i>:
 8006990:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006994:	7e0f      	ldrb	r7, [r1, #24]
 8006996:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006998:	2f78      	cmp	r7, #120	@ 0x78
 800699a:	4691      	mov	r9, r2
 800699c:	4680      	mov	r8, r0
 800699e:	460c      	mov	r4, r1
 80069a0:	469a      	mov	sl, r3
 80069a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80069a6:	d807      	bhi.n	80069b8 <_printf_i+0x28>
 80069a8:	2f62      	cmp	r7, #98	@ 0x62
 80069aa:	d80a      	bhi.n	80069c2 <_printf_i+0x32>
 80069ac:	2f00      	cmp	r7, #0
 80069ae:	f000 80d1 	beq.w	8006b54 <_printf_i+0x1c4>
 80069b2:	2f58      	cmp	r7, #88	@ 0x58
 80069b4:	f000 80b8 	beq.w	8006b28 <_printf_i+0x198>
 80069b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80069c0:	e03a      	b.n	8006a38 <_printf_i+0xa8>
 80069c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80069c6:	2b15      	cmp	r3, #21
 80069c8:	d8f6      	bhi.n	80069b8 <_printf_i+0x28>
 80069ca:	a101      	add	r1, pc, #4	@ (adr r1, 80069d0 <_printf_i+0x40>)
 80069cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069d0:	08006a29 	.word	0x08006a29
 80069d4:	08006a3d 	.word	0x08006a3d
 80069d8:	080069b9 	.word	0x080069b9
 80069dc:	080069b9 	.word	0x080069b9
 80069e0:	080069b9 	.word	0x080069b9
 80069e4:	080069b9 	.word	0x080069b9
 80069e8:	08006a3d 	.word	0x08006a3d
 80069ec:	080069b9 	.word	0x080069b9
 80069f0:	080069b9 	.word	0x080069b9
 80069f4:	080069b9 	.word	0x080069b9
 80069f8:	080069b9 	.word	0x080069b9
 80069fc:	08006b3b 	.word	0x08006b3b
 8006a00:	08006a67 	.word	0x08006a67
 8006a04:	08006af5 	.word	0x08006af5
 8006a08:	080069b9 	.word	0x080069b9
 8006a0c:	080069b9 	.word	0x080069b9
 8006a10:	08006b5d 	.word	0x08006b5d
 8006a14:	080069b9 	.word	0x080069b9
 8006a18:	08006a67 	.word	0x08006a67
 8006a1c:	080069b9 	.word	0x080069b9
 8006a20:	080069b9 	.word	0x080069b9
 8006a24:	08006afd 	.word	0x08006afd
 8006a28:	6833      	ldr	r3, [r6, #0]
 8006a2a:	1d1a      	adds	r2, r3, #4
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	6032      	str	r2, [r6, #0]
 8006a30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e09c      	b.n	8006b76 <_printf_i+0x1e6>
 8006a3c:	6833      	ldr	r3, [r6, #0]
 8006a3e:	6820      	ldr	r0, [r4, #0]
 8006a40:	1d19      	adds	r1, r3, #4
 8006a42:	6031      	str	r1, [r6, #0]
 8006a44:	0606      	lsls	r6, r0, #24
 8006a46:	d501      	bpl.n	8006a4c <_printf_i+0xbc>
 8006a48:	681d      	ldr	r5, [r3, #0]
 8006a4a:	e003      	b.n	8006a54 <_printf_i+0xc4>
 8006a4c:	0645      	lsls	r5, r0, #25
 8006a4e:	d5fb      	bpl.n	8006a48 <_printf_i+0xb8>
 8006a50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a54:	2d00      	cmp	r5, #0
 8006a56:	da03      	bge.n	8006a60 <_printf_i+0xd0>
 8006a58:	232d      	movs	r3, #45	@ 0x2d
 8006a5a:	426d      	negs	r5, r5
 8006a5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a60:	4858      	ldr	r0, [pc, #352]	@ (8006bc4 <_printf_i+0x234>)
 8006a62:	230a      	movs	r3, #10
 8006a64:	e011      	b.n	8006a8a <_printf_i+0xfa>
 8006a66:	6821      	ldr	r1, [r4, #0]
 8006a68:	6833      	ldr	r3, [r6, #0]
 8006a6a:	0608      	lsls	r0, r1, #24
 8006a6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a70:	d402      	bmi.n	8006a78 <_printf_i+0xe8>
 8006a72:	0649      	lsls	r1, r1, #25
 8006a74:	bf48      	it	mi
 8006a76:	b2ad      	uxthmi	r5, r5
 8006a78:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a7a:	4852      	ldr	r0, [pc, #328]	@ (8006bc4 <_printf_i+0x234>)
 8006a7c:	6033      	str	r3, [r6, #0]
 8006a7e:	bf14      	ite	ne
 8006a80:	230a      	movne	r3, #10
 8006a82:	2308      	moveq	r3, #8
 8006a84:	2100      	movs	r1, #0
 8006a86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a8a:	6866      	ldr	r6, [r4, #4]
 8006a8c:	60a6      	str	r6, [r4, #8]
 8006a8e:	2e00      	cmp	r6, #0
 8006a90:	db05      	blt.n	8006a9e <_printf_i+0x10e>
 8006a92:	6821      	ldr	r1, [r4, #0]
 8006a94:	432e      	orrs	r6, r5
 8006a96:	f021 0104 	bic.w	r1, r1, #4
 8006a9a:	6021      	str	r1, [r4, #0]
 8006a9c:	d04b      	beq.n	8006b36 <_printf_i+0x1a6>
 8006a9e:	4616      	mov	r6, r2
 8006aa0:	fbb5 f1f3 	udiv	r1, r5, r3
 8006aa4:	fb03 5711 	mls	r7, r3, r1, r5
 8006aa8:	5dc7      	ldrb	r7, [r0, r7]
 8006aaa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006aae:	462f      	mov	r7, r5
 8006ab0:	42bb      	cmp	r3, r7
 8006ab2:	460d      	mov	r5, r1
 8006ab4:	d9f4      	bls.n	8006aa0 <_printf_i+0x110>
 8006ab6:	2b08      	cmp	r3, #8
 8006ab8:	d10b      	bne.n	8006ad2 <_printf_i+0x142>
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	07df      	lsls	r7, r3, #31
 8006abe:	d508      	bpl.n	8006ad2 <_printf_i+0x142>
 8006ac0:	6923      	ldr	r3, [r4, #16]
 8006ac2:	6861      	ldr	r1, [r4, #4]
 8006ac4:	4299      	cmp	r1, r3
 8006ac6:	bfde      	ittt	le
 8006ac8:	2330      	movle	r3, #48	@ 0x30
 8006aca:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ace:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006ad2:	1b92      	subs	r2, r2, r6
 8006ad4:	6122      	str	r2, [r4, #16]
 8006ad6:	f8cd a000 	str.w	sl, [sp]
 8006ada:	464b      	mov	r3, r9
 8006adc:	aa03      	add	r2, sp, #12
 8006ade:	4621      	mov	r1, r4
 8006ae0:	4640      	mov	r0, r8
 8006ae2:	f7ff fee7 	bl	80068b4 <_printf_common>
 8006ae6:	3001      	adds	r0, #1
 8006ae8:	d14a      	bne.n	8006b80 <_printf_i+0x1f0>
 8006aea:	f04f 30ff 	mov.w	r0, #4294967295
 8006aee:	b004      	add	sp, #16
 8006af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006af4:	6823      	ldr	r3, [r4, #0]
 8006af6:	f043 0320 	orr.w	r3, r3, #32
 8006afa:	6023      	str	r3, [r4, #0]
 8006afc:	4832      	ldr	r0, [pc, #200]	@ (8006bc8 <_printf_i+0x238>)
 8006afe:	2778      	movs	r7, #120	@ 0x78
 8006b00:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006b04:	6823      	ldr	r3, [r4, #0]
 8006b06:	6831      	ldr	r1, [r6, #0]
 8006b08:	061f      	lsls	r7, r3, #24
 8006b0a:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b0e:	d402      	bmi.n	8006b16 <_printf_i+0x186>
 8006b10:	065f      	lsls	r7, r3, #25
 8006b12:	bf48      	it	mi
 8006b14:	b2ad      	uxthmi	r5, r5
 8006b16:	6031      	str	r1, [r6, #0]
 8006b18:	07d9      	lsls	r1, r3, #31
 8006b1a:	bf44      	itt	mi
 8006b1c:	f043 0320 	orrmi.w	r3, r3, #32
 8006b20:	6023      	strmi	r3, [r4, #0]
 8006b22:	b11d      	cbz	r5, 8006b2c <_printf_i+0x19c>
 8006b24:	2310      	movs	r3, #16
 8006b26:	e7ad      	b.n	8006a84 <_printf_i+0xf4>
 8006b28:	4826      	ldr	r0, [pc, #152]	@ (8006bc4 <_printf_i+0x234>)
 8006b2a:	e7e9      	b.n	8006b00 <_printf_i+0x170>
 8006b2c:	6823      	ldr	r3, [r4, #0]
 8006b2e:	f023 0320 	bic.w	r3, r3, #32
 8006b32:	6023      	str	r3, [r4, #0]
 8006b34:	e7f6      	b.n	8006b24 <_printf_i+0x194>
 8006b36:	4616      	mov	r6, r2
 8006b38:	e7bd      	b.n	8006ab6 <_printf_i+0x126>
 8006b3a:	6833      	ldr	r3, [r6, #0]
 8006b3c:	6825      	ldr	r5, [r4, #0]
 8006b3e:	6961      	ldr	r1, [r4, #20]
 8006b40:	1d18      	adds	r0, r3, #4
 8006b42:	6030      	str	r0, [r6, #0]
 8006b44:	062e      	lsls	r6, r5, #24
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	d501      	bpl.n	8006b4e <_printf_i+0x1be>
 8006b4a:	6019      	str	r1, [r3, #0]
 8006b4c:	e002      	b.n	8006b54 <_printf_i+0x1c4>
 8006b4e:	0668      	lsls	r0, r5, #25
 8006b50:	d5fb      	bpl.n	8006b4a <_printf_i+0x1ba>
 8006b52:	8019      	strh	r1, [r3, #0]
 8006b54:	2300      	movs	r3, #0
 8006b56:	6123      	str	r3, [r4, #16]
 8006b58:	4616      	mov	r6, r2
 8006b5a:	e7bc      	b.n	8006ad6 <_printf_i+0x146>
 8006b5c:	6833      	ldr	r3, [r6, #0]
 8006b5e:	1d1a      	adds	r2, r3, #4
 8006b60:	6032      	str	r2, [r6, #0]
 8006b62:	681e      	ldr	r6, [r3, #0]
 8006b64:	6862      	ldr	r2, [r4, #4]
 8006b66:	2100      	movs	r1, #0
 8006b68:	4630      	mov	r0, r6
 8006b6a:	f7f9 fb39 	bl	80001e0 <memchr>
 8006b6e:	b108      	cbz	r0, 8006b74 <_printf_i+0x1e4>
 8006b70:	1b80      	subs	r0, r0, r6
 8006b72:	6060      	str	r0, [r4, #4]
 8006b74:	6863      	ldr	r3, [r4, #4]
 8006b76:	6123      	str	r3, [r4, #16]
 8006b78:	2300      	movs	r3, #0
 8006b7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b7e:	e7aa      	b.n	8006ad6 <_printf_i+0x146>
 8006b80:	6923      	ldr	r3, [r4, #16]
 8006b82:	4632      	mov	r2, r6
 8006b84:	4649      	mov	r1, r9
 8006b86:	4640      	mov	r0, r8
 8006b88:	47d0      	blx	sl
 8006b8a:	3001      	adds	r0, #1
 8006b8c:	d0ad      	beq.n	8006aea <_printf_i+0x15a>
 8006b8e:	6823      	ldr	r3, [r4, #0]
 8006b90:	079b      	lsls	r3, r3, #30
 8006b92:	d413      	bmi.n	8006bbc <_printf_i+0x22c>
 8006b94:	68e0      	ldr	r0, [r4, #12]
 8006b96:	9b03      	ldr	r3, [sp, #12]
 8006b98:	4298      	cmp	r0, r3
 8006b9a:	bfb8      	it	lt
 8006b9c:	4618      	movlt	r0, r3
 8006b9e:	e7a6      	b.n	8006aee <_printf_i+0x15e>
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	4632      	mov	r2, r6
 8006ba4:	4649      	mov	r1, r9
 8006ba6:	4640      	mov	r0, r8
 8006ba8:	47d0      	blx	sl
 8006baa:	3001      	adds	r0, #1
 8006bac:	d09d      	beq.n	8006aea <_printf_i+0x15a>
 8006bae:	3501      	adds	r5, #1
 8006bb0:	68e3      	ldr	r3, [r4, #12]
 8006bb2:	9903      	ldr	r1, [sp, #12]
 8006bb4:	1a5b      	subs	r3, r3, r1
 8006bb6:	42ab      	cmp	r3, r5
 8006bb8:	dcf2      	bgt.n	8006ba0 <_printf_i+0x210>
 8006bba:	e7eb      	b.n	8006b94 <_printf_i+0x204>
 8006bbc:	2500      	movs	r5, #0
 8006bbe:	f104 0619 	add.w	r6, r4, #25
 8006bc2:	e7f5      	b.n	8006bb0 <_printf_i+0x220>
 8006bc4:	08008cbe 	.word	0x08008cbe
 8006bc8:	08008ccf 	.word	0x08008ccf

08006bcc <std>:
 8006bcc:	2300      	movs	r3, #0
 8006bce:	b510      	push	{r4, lr}
 8006bd0:	4604      	mov	r4, r0
 8006bd2:	e9c0 3300 	strd	r3, r3, [r0]
 8006bd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bda:	6083      	str	r3, [r0, #8]
 8006bdc:	8181      	strh	r1, [r0, #12]
 8006bde:	6643      	str	r3, [r0, #100]	@ 0x64
 8006be0:	81c2      	strh	r2, [r0, #14]
 8006be2:	6183      	str	r3, [r0, #24]
 8006be4:	4619      	mov	r1, r3
 8006be6:	2208      	movs	r2, #8
 8006be8:	305c      	adds	r0, #92	@ 0x5c
 8006bea:	f000 f906 	bl	8006dfa <memset>
 8006bee:	4b0d      	ldr	r3, [pc, #52]	@ (8006c24 <std+0x58>)
 8006bf0:	6263      	str	r3, [r4, #36]	@ 0x24
 8006bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8006c28 <std+0x5c>)
 8006bf4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8006c2c <std+0x60>)
 8006bf8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8006c30 <std+0x64>)
 8006bfc:	6323      	str	r3, [r4, #48]	@ 0x30
 8006bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8006c34 <std+0x68>)
 8006c00:	6224      	str	r4, [r4, #32]
 8006c02:	429c      	cmp	r4, r3
 8006c04:	d006      	beq.n	8006c14 <std+0x48>
 8006c06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006c0a:	4294      	cmp	r4, r2
 8006c0c:	d002      	beq.n	8006c14 <std+0x48>
 8006c0e:	33d0      	adds	r3, #208	@ 0xd0
 8006c10:	429c      	cmp	r4, r3
 8006c12:	d105      	bne.n	8006c20 <std+0x54>
 8006c14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c1c:	f000 b96a 	b.w	8006ef4 <__retarget_lock_init_recursive>
 8006c20:	bd10      	pop	{r4, pc}
 8006c22:	bf00      	nop
 8006c24:	08006d75 	.word	0x08006d75
 8006c28:	08006d97 	.word	0x08006d97
 8006c2c:	08006dcf 	.word	0x08006dcf
 8006c30:	08006df3 	.word	0x08006df3
 8006c34:	20000378 	.word	0x20000378

08006c38 <stdio_exit_handler>:
 8006c38:	4a02      	ldr	r2, [pc, #8]	@ (8006c44 <stdio_exit_handler+0xc>)
 8006c3a:	4903      	ldr	r1, [pc, #12]	@ (8006c48 <stdio_exit_handler+0x10>)
 8006c3c:	4803      	ldr	r0, [pc, #12]	@ (8006c4c <stdio_exit_handler+0x14>)
 8006c3e:	f000 b869 	b.w	8006d14 <_fwalk_sglue>
 8006c42:	bf00      	nop
 8006c44:	20000014 	.word	0x20000014
 8006c48:	08008831 	.word	0x08008831
 8006c4c:	20000024 	.word	0x20000024

08006c50 <cleanup_stdio>:
 8006c50:	6841      	ldr	r1, [r0, #4]
 8006c52:	4b0c      	ldr	r3, [pc, #48]	@ (8006c84 <cleanup_stdio+0x34>)
 8006c54:	4299      	cmp	r1, r3
 8006c56:	b510      	push	{r4, lr}
 8006c58:	4604      	mov	r4, r0
 8006c5a:	d001      	beq.n	8006c60 <cleanup_stdio+0x10>
 8006c5c:	f001 fde8 	bl	8008830 <_fflush_r>
 8006c60:	68a1      	ldr	r1, [r4, #8]
 8006c62:	4b09      	ldr	r3, [pc, #36]	@ (8006c88 <cleanup_stdio+0x38>)
 8006c64:	4299      	cmp	r1, r3
 8006c66:	d002      	beq.n	8006c6e <cleanup_stdio+0x1e>
 8006c68:	4620      	mov	r0, r4
 8006c6a:	f001 fde1 	bl	8008830 <_fflush_r>
 8006c6e:	68e1      	ldr	r1, [r4, #12]
 8006c70:	4b06      	ldr	r3, [pc, #24]	@ (8006c8c <cleanup_stdio+0x3c>)
 8006c72:	4299      	cmp	r1, r3
 8006c74:	d004      	beq.n	8006c80 <cleanup_stdio+0x30>
 8006c76:	4620      	mov	r0, r4
 8006c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c7c:	f001 bdd8 	b.w	8008830 <_fflush_r>
 8006c80:	bd10      	pop	{r4, pc}
 8006c82:	bf00      	nop
 8006c84:	20000378 	.word	0x20000378
 8006c88:	200003e0 	.word	0x200003e0
 8006c8c:	20000448 	.word	0x20000448

08006c90 <global_stdio_init.part.0>:
 8006c90:	b510      	push	{r4, lr}
 8006c92:	4b0b      	ldr	r3, [pc, #44]	@ (8006cc0 <global_stdio_init.part.0+0x30>)
 8006c94:	4c0b      	ldr	r4, [pc, #44]	@ (8006cc4 <global_stdio_init.part.0+0x34>)
 8006c96:	4a0c      	ldr	r2, [pc, #48]	@ (8006cc8 <global_stdio_init.part.0+0x38>)
 8006c98:	601a      	str	r2, [r3, #0]
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	2104      	movs	r1, #4
 8006ca0:	f7ff ff94 	bl	8006bcc <std>
 8006ca4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ca8:	2201      	movs	r2, #1
 8006caa:	2109      	movs	r1, #9
 8006cac:	f7ff ff8e 	bl	8006bcc <std>
 8006cb0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006cb4:	2202      	movs	r2, #2
 8006cb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cba:	2112      	movs	r1, #18
 8006cbc:	f7ff bf86 	b.w	8006bcc <std>
 8006cc0:	200004b0 	.word	0x200004b0
 8006cc4:	20000378 	.word	0x20000378
 8006cc8:	08006c39 	.word	0x08006c39

08006ccc <__sfp_lock_acquire>:
 8006ccc:	4801      	ldr	r0, [pc, #4]	@ (8006cd4 <__sfp_lock_acquire+0x8>)
 8006cce:	f000 b912 	b.w	8006ef6 <__retarget_lock_acquire_recursive>
 8006cd2:	bf00      	nop
 8006cd4:	200004b9 	.word	0x200004b9

08006cd8 <__sfp_lock_release>:
 8006cd8:	4801      	ldr	r0, [pc, #4]	@ (8006ce0 <__sfp_lock_release+0x8>)
 8006cda:	f000 b90d 	b.w	8006ef8 <__retarget_lock_release_recursive>
 8006cde:	bf00      	nop
 8006ce0:	200004b9 	.word	0x200004b9

08006ce4 <__sinit>:
 8006ce4:	b510      	push	{r4, lr}
 8006ce6:	4604      	mov	r4, r0
 8006ce8:	f7ff fff0 	bl	8006ccc <__sfp_lock_acquire>
 8006cec:	6a23      	ldr	r3, [r4, #32]
 8006cee:	b11b      	cbz	r3, 8006cf8 <__sinit+0x14>
 8006cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cf4:	f7ff bff0 	b.w	8006cd8 <__sfp_lock_release>
 8006cf8:	4b04      	ldr	r3, [pc, #16]	@ (8006d0c <__sinit+0x28>)
 8006cfa:	6223      	str	r3, [r4, #32]
 8006cfc:	4b04      	ldr	r3, [pc, #16]	@ (8006d10 <__sinit+0x2c>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1f5      	bne.n	8006cf0 <__sinit+0xc>
 8006d04:	f7ff ffc4 	bl	8006c90 <global_stdio_init.part.0>
 8006d08:	e7f2      	b.n	8006cf0 <__sinit+0xc>
 8006d0a:	bf00      	nop
 8006d0c:	08006c51 	.word	0x08006c51
 8006d10:	200004b0 	.word	0x200004b0

08006d14 <_fwalk_sglue>:
 8006d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d18:	4607      	mov	r7, r0
 8006d1a:	4688      	mov	r8, r1
 8006d1c:	4614      	mov	r4, r2
 8006d1e:	2600      	movs	r6, #0
 8006d20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d24:	f1b9 0901 	subs.w	r9, r9, #1
 8006d28:	d505      	bpl.n	8006d36 <_fwalk_sglue+0x22>
 8006d2a:	6824      	ldr	r4, [r4, #0]
 8006d2c:	2c00      	cmp	r4, #0
 8006d2e:	d1f7      	bne.n	8006d20 <_fwalk_sglue+0xc>
 8006d30:	4630      	mov	r0, r6
 8006d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d36:	89ab      	ldrh	r3, [r5, #12]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d907      	bls.n	8006d4c <_fwalk_sglue+0x38>
 8006d3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d40:	3301      	adds	r3, #1
 8006d42:	d003      	beq.n	8006d4c <_fwalk_sglue+0x38>
 8006d44:	4629      	mov	r1, r5
 8006d46:	4638      	mov	r0, r7
 8006d48:	47c0      	blx	r8
 8006d4a:	4306      	orrs	r6, r0
 8006d4c:	3568      	adds	r5, #104	@ 0x68
 8006d4e:	e7e9      	b.n	8006d24 <_fwalk_sglue+0x10>

08006d50 <iprintf>:
 8006d50:	b40f      	push	{r0, r1, r2, r3}
 8006d52:	b507      	push	{r0, r1, r2, lr}
 8006d54:	4906      	ldr	r1, [pc, #24]	@ (8006d70 <iprintf+0x20>)
 8006d56:	ab04      	add	r3, sp, #16
 8006d58:	6808      	ldr	r0, [r1, #0]
 8006d5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d5e:	6881      	ldr	r1, [r0, #8]
 8006d60:	9301      	str	r3, [sp, #4]
 8006d62:	f001 fbc9 	bl	80084f8 <_vfiprintf_r>
 8006d66:	b003      	add	sp, #12
 8006d68:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d6c:	b004      	add	sp, #16
 8006d6e:	4770      	bx	lr
 8006d70:	20000020 	.word	0x20000020

08006d74 <__sread>:
 8006d74:	b510      	push	{r4, lr}
 8006d76:	460c      	mov	r4, r1
 8006d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d7c:	f000 f86c 	bl	8006e58 <_read_r>
 8006d80:	2800      	cmp	r0, #0
 8006d82:	bfab      	itete	ge
 8006d84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006d86:	89a3      	ldrhlt	r3, [r4, #12]
 8006d88:	181b      	addge	r3, r3, r0
 8006d8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006d8e:	bfac      	ite	ge
 8006d90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006d92:	81a3      	strhlt	r3, [r4, #12]
 8006d94:	bd10      	pop	{r4, pc}

08006d96 <__swrite>:
 8006d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d9a:	461f      	mov	r7, r3
 8006d9c:	898b      	ldrh	r3, [r1, #12]
 8006d9e:	05db      	lsls	r3, r3, #23
 8006da0:	4605      	mov	r5, r0
 8006da2:	460c      	mov	r4, r1
 8006da4:	4616      	mov	r6, r2
 8006da6:	d505      	bpl.n	8006db4 <__swrite+0x1e>
 8006da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dac:	2302      	movs	r3, #2
 8006dae:	2200      	movs	r2, #0
 8006db0:	f000 f840 	bl	8006e34 <_lseek_r>
 8006db4:	89a3      	ldrh	r3, [r4, #12]
 8006db6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006dbe:	81a3      	strh	r3, [r4, #12]
 8006dc0:	4632      	mov	r2, r6
 8006dc2:	463b      	mov	r3, r7
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dca:	f000 b857 	b.w	8006e7c <_write_r>

08006dce <__sseek>:
 8006dce:	b510      	push	{r4, lr}
 8006dd0:	460c      	mov	r4, r1
 8006dd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dd6:	f000 f82d 	bl	8006e34 <_lseek_r>
 8006dda:	1c43      	adds	r3, r0, #1
 8006ddc:	89a3      	ldrh	r3, [r4, #12]
 8006dde:	bf15      	itete	ne
 8006de0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006de2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006de6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006dea:	81a3      	strheq	r3, [r4, #12]
 8006dec:	bf18      	it	ne
 8006dee:	81a3      	strhne	r3, [r4, #12]
 8006df0:	bd10      	pop	{r4, pc}

08006df2 <__sclose>:
 8006df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006df6:	f000 b80d 	b.w	8006e14 <_close_r>

08006dfa <memset>:
 8006dfa:	4402      	add	r2, r0
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d100      	bne.n	8006e04 <memset+0xa>
 8006e02:	4770      	bx	lr
 8006e04:	f803 1b01 	strb.w	r1, [r3], #1
 8006e08:	e7f9      	b.n	8006dfe <memset+0x4>
	...

08006e0c <_localeconv_r>:
 8006e0c:	4800      	ldr	r0, [pc, #0]	@ (8006e10 <_localeconv_r+0x4>)
 8006e0e:	4770      	bx	lr
 8006e10:	20000160 	.word	0x20000160

08006e14 <_close_r>:
 8006e14:	b538      	push	{r3, r4, r5, lr}
 8006e16:	4d06      	ldr	r5, [pc, #24]	@ (8006e30 <_close_r+0x1c>)
 8006e18:	2300      	movs	r3, #0
 8006e1a:	4604      	mov	r4, r0
 8006e1c:	4608      	mov	r0, r1
 8006e1e:	602b      	str	r3, [r5, #0]
 8006e20:	f7fa fb5e 	bl	80014e0 <_close>
 8006e24:	1c43      	adds	r3, r0, #1
 8006e26:	d102      	bne.n	8006e2e <_close_r+0x1a>
 8006e28:	682b      	ldr	r3, [r5, #0]
 8006e2a:	b103      	cbz	r3, 8006e2e <_close_r+0x1a>
 8006e2c:	6023      	str	r3, [r4, #0]
 8006e2e:	bd38      	pop	{r3, r4, r5, pc}
 8006e30:	200004b4 	.word	0x200004b4

08006e34 <_lseek_r>:
 8006e34:	b538      	push	{r3, r4, r5, lr}
 8006e36:	4d07      	ldr	r5, [pc, #28]	@ (8006e54 <_lseek_r+0x20>)
 8006e38:	4604      	mov	r4, r0
 8006e3a:	4608      	mov	r0, r1
 8006e3c:	4611      	mov	r1, r2
 8006e3e:	2200      	movs	r2, #0
 8006e40:	602a      	str	r2, [r5, #0]
 8006e42:	461a      	mov	r2, r3
 8006e44:	f7fa fb73 	bl	800152e <_lseek>
 8006e48:	1c43      	adds	r3, r0, #1
 8006e4a:	d102      	bne.n	8006e52 <_lseek_r+0x1e>
 8006e4c:	682b      	ldr	r3, [r5, #0]
 8006e4e:	b103      	cbz	r3, 8006e52 <_lseek_r+0x1e>
 8006e50:	6023      	str	r3, [r4, #0]
 8006e52:	bd38      	pop	{r3, r4, r5, pc}
 8006e54:	200004b4 	.word	0x200004b4

08006e58 <_read_r>:
 8006e58:	b538      	push	{r3, r4, r5, lr}
 8006e5a:	4d07      	ldr	r5, [pc, #28]	@ (8006e78 <_read_r+0x20>)
 8006e5c:	4604      	mov	r4, r0
 8006e5e:	4608      	mov	r0, r1
 8006e60:	4611      	mov	r1, r2
 8006e62:	2200      	movs	r2, #0
 8006e64:	602a      	str	r2, [r5, #0]
 8006e66:	461a      	mov	r2, r3
 8006e68:	f7fa fb01 	bl	800146e <_read>
 8006e6c:	1c43      	adds	r3, r0, #1
 8006e6e:	d102      	bne.n	8006e76 <_read_r+0x1e>
 8006e70:	682b      	ldr	r3, [r5, #0]
 8006e72:	b103      	cbz	r3, 8006e76 <_read_r+0x1e>
 8006e74:	6023      	str	r3, [r4, #0]
 8006e76:	bd38      	pop	{r3, r4, r5, pc}
 8006e78:	200004b4 	.word	0x200004b4

08006e7c <_write_r>:
 8006e7c:	b538      	push	{r3, r4, r5, lr}
 8006e7e:	4d07      	ldr	r5, [pc, #28]	@ (8006e9c <_write_r+0x20>)
 8006e80:	4604      	mov	r4, r0
 8006e82:	4608      	mov	r0, r1
 8006e84:	4611      	mov	r1, r2
 8006e86:	2200      	movs	r2, #0
 8006e88:	602a      	str	r2, [r5, #0]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	f7fa fb0c 	bl	80014a8 <_write>
 8006e90:	1c43      	adds	r3, r0, #1
 8006e92:	d102      	bne.n	8006e9a <_write_r+0x1e>
 8006e94:	682b      	ldr	r3, [r5, #0]
 8006e96:	b103      	cbz	r3, 8006e9a <_write_r+0x1e>
 8006e98:	6023      	str	r3, [r4, #0]
 8006e9a:	bd38      	pop	{r3, r4, r5, pc}
 8006e9c:	200004b4 	.word	0x200004b4

08006ea0 <__errno>:
 8006ea0:	4b01      	ldr	r3, [pc, #4]	@ (8006ea8 <__errno+0x8>)
 8006ea2:	6818      	ldr	r0, [r3, #0]
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	20000020 	.word	0x20000020

08006eac <__libc_init_array>:
 8006eac:	b570      	push	{r4, r5, r6, lr}
 8006eae:	4d0d      	ldr	r5, [pc, #52]	@ (8006ee4 <__libc_init_array+0x38>)
 8006eb0:	4c0d      	ldr	r4, [pc, #52]	@ (8006ee8 <__libc_init_array+0x3c>)
 8006eb2:	1b64      	subs	r4, r4, r5
 8006eb4:	10a4      	asrs	r4, r4, #2
 8006eb6:	2600      	movs	r6, #0
 8006eb8:	42a6      	cmp	r6, r4
 8006eba:	d109      	bne.n	8006ed0 <__libc_init_array+0x24>
 8006ebc:	4d0b      	ldr	r5, [pc, #44]	@ (8006eec <__libc_init_array+0x40>)
 8006ebe:	4c0c      	ldr	r4, [pc, #48]	@ (8006ef0 <__libc_init_array+0x44>)
 8006ec0:	f001 fec4 	bl	8008c4c <_init>
 8006ec4:	1b64      	subs	r4, r4, r5
 8006ec6:	10a4      	asrs	r4, r4, #2
 8006ec8:	2600      	movs	r6, #0
 8006eca:	42a6      	cmp	r6, r4
 8006ecc:	d105      	bne.n	8006eda <__libc_init_array+0x2e>
 8006ece:	bd70      	pop	{r4, r5, r6, pc}
 8006ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ed4:	4798      	blx	r3
 8006ed6:	3601      	adds	r6, #1
 8006ed8:	e7ee      	b.n	8006eb8 <__libc_init_array+0xc>
 8006eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ede:	4798      	blx	r3
 8006ee0:	3601      	adds	r6, #1
 8006ee2:	e7f2      	b.n	8006eca <__libc_init_array+0x1e>
 8006ee4:	0800902c 	.word	0x0800902c
 8006ee8:	0800902c 	.word	0x0800902c
 8006eec:	0800902c 	.word	0x0800902c
 8006ef0:	08009030 	.word	0x08009030

08006ef4 <__retarget_lock_init_recursive>:
 8006ef4:	4770      	bx	lr

08006ef6 <__retarget_lock_acquire_recursive>:
 8006ef6:	4770      	bx	lr

08006ef8 <__retarget_lock_release_recursive>:
 8006ef8:	4770      	bx	lr

08006efa <quorem>:
 8006efa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006efe:	6903      	ldr	r3, [r0, #16]
 8006f00:	690c      	ldr	r4, [r1, #16]
 8006f02:	42a3      	cmp	r3, r4
 8006f04:	4607      	mov	r7, r0
 8006f06:	db7e      	blt.n	8007006 <quorem+0x10c>
 8006f08:	3c01      	subs	r4, #1
 8006f0a:	f101 0814 	add.w	r8, r1, #20
 8006f0e:	00a3      	lsls	r3, r4, #2
 8006f10:	f100 0514 	add.w	r5, r0, #20
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f1a:	9301      	str	r3, [sp, #4]
 8006f1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f24:	3301      	adds	r3, #1
 8006f26:	429a      	cmp	r2, r3
 8006f28:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f2c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f30:	d32e      	bcc.n	8006f90 <quorem+0x96>
 8006f32:	f04f 0a00 	mov.w	sl, #0
 8006f36:	46c4      	mov	ip, r8
 8006f38:	46ae      	mov	lr, r5
 8006f3a:	46d3      	mov	fp, sl
 8006f3c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006f40:	b298      	uxth	r0, r3
 8006f42:	fb06 a000 	mla	r0, r6, r0, sl
 8006f46:	0c02      	lsrs	r2, r0, #16
 8006f48:	0c1b      	lsrs	r3, r3, #16
 8006f4a:	fb06 2303 	mla	r3, r6, r3, r2
 8006f4e:	f8de 2000 	ldr.w	r2, [lr]
 8006f52:	b280      	uxth	r0, r0
 8006f54:	b292      	uxth	r2, r2
 8006f56:	1a12      	subs	r2, r2, r0
 8006f58:	445a      	add	r2, fp
 8006f5a:	f8de 0000 	ldr.w	r0, [lr]
 8006f5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006f68:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006f6c:	b292      	uxth	r2, r2
 8006f6e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006f72:	45e1      	cmp	r9, ip
 8006f74:	f84e 2b04 	str.w	r2, [lr], #4
 8006f78:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006f7c:	d2de      	bcs.n	8006f3c <quorem+0x42>
 8006f7e:	9b00      	ldr	r3, [sp, #0]
 8006f80:	58eb      	ldr	r3, [r5, r3]
 8006f82:	b92b      	cbnz	r3, 8006f90 <quorem+0x96>
 8006f84:	9b01      	ldr	r3, [sp, #4]
 8006f86:	3b04      	subs	r3, #4
 8006f88:	429d      	cmp	r5, r3
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	d32f      	bcc.n	8006fee <quorem+0xf4>
 8006f8e:	613c      	str	r4, [r7, #16]
 8006f90:	4638      	mov	r0, r7
 8006f92:	f001 f97f 	bl	8008294 <__mcmp>
 8006f96:	2800      	cmp	r0, #0
 8006f98:	db25      	blt.n	8006fe6 <quorem+0xec>
 8006f9a:	4629      	mov	r1, r5
 8006f9c:	2000      	movs	r0, #0
 8006f9e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006fa2:	f8d1 c000 	ldr.w	ip, [r1]
 8006fa6:	fa1f fe82 	uxth.w	lr, r2
 8006faa:	fa1f f38c 	uxth.w	r3, ip
 8006fae:	eba3 030e 	sub.w	r3, r3, lr
 8006fb2:	4403      	add	r3, r0
 8006fb4:	0c12      	lsrs	r2, r2, #16
 8006fb6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006fba:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fc4:	45c1      	cmp	r9, r8
 8006fc6:	f841 3b04 	str.w	r3, [r1], #4
 8006fca:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006fce:	d2e6      	bcs.n	8006f9e <quorem+0xa4>
 8006fd0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fd4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fd8:	b922      	cbnz	r2, 8006fe4 <quorem+0xea>
 8006fda:	3b04      	subs	r3, #4
 8006fdc:	429d      	cmp	r5, r3
 8006fde:	461a      	mov	r2, r3
 8006fe0:	d30b      	bcc.n	8006ffa <quorem+0x100>
 8006fe2:	613c      	str	r4, [r7, #16]
 8006fe4:	3601      	adds	r6, #1
 8006fe6:	4630      	mov	r0, r6
 8006fe8:	b003      	add	sp, #12
 8006fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fee:	6812      	ldr	r2, [r2, #0]
 8006ff0:	3b04      	subs	r3, #4
 8006ff2:	2a00      	cmp	r2, #0
 8006ff4:	d1cb      	bne.n	8006f8e <quorem+0x94>
 8006ff6:	3c01      	subs	r4, #1
 8006ff8:	e7c6      	b.n	8006f88 <quorem+0x8e>
 8006ffa:	6812      	ldr	r2, [r2, #0]
 8006ffc:	3b04      	subs	r3, #4
 8006ffe:	2a00      	cmp	r2, #0
 8007000:	d1ef      	bne.n	8006fe2 <quorem+0xe8>
 8007002:	3c01      	subs	r4, #1
 8007004:	e7ea      	b.n	8006fdc <quorem+0xe2>
 8007006:	2000      	movs	r0, #0
 8007008:	e7ee      	b.n	8006fe8 <quorem+0xee>
 800700a:	0000      	movs	r0, r0
 800700c:	0000      	movs	r0, r0
	...

08007010 <_dtoa_r>:
 8007010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007014:	69c7      	ldr	r7, [r0, #28]
 8007016:	b097      	sub	sp, #92	@ 0x5c
 8007018:	ed8d 0b04 	vstr	d0, [sp, #16]
 800701c:	ec55 4b10 	vmov	r4, r5, d0
 8007020:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007022:	9107      	str	r1, [sp, #28]
 8007024:	4681      	mov	r9, r0
 8007026:	920c      	str	r2, [sp, #48]	@ 0x30
 8007028:	9311      	str	r3, [sp, #68]	@ 0x44
 800702a:	b97f      	cbnz	r7, 800704c <_dtoa_r+0x3c>
 800702c:	2010      	movs	r0, #16
 800702e:	f000 fe09 	bl	8007c44 <malloc>
 8007032:	4602      	mov	r2, r0
 8007034:	f8c9 001c 	str.w	r0, [r9, #28]
 8007038:	b920      	cbnz	r0, 8007044 <_dtoa_r+0x34>
 800703a:	4ba9      	ldr	r3, [pc, #676]	@ (80072e0 <_dtoa_r+0x2d0>)
 800703c:	21ef      	movs	r1, #239	@ 0xef
 800703e:	48a9      	ldr	r0, [pc, #676]	@ (80072e4 <_dtoa_r+0x2d4>)
 8007040:	f001 fcd0 	bl	80089e4 <__assert_func>
 8007044:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007048:	6007      	str	r7, [r0, #0]
 800704a:	60c7      	str	r7, [r0, #12]
 800704c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007050:	6819      	ldr	r1, [r3, #0]
 8007052:	b159      	cbz	r1, 800706c <_dtoa_r+0x5c>
 8007054:	685a      	ldr	r2, [r3, #4]
 8007056:	604a      	str	r2, [r1, #4]
 8007058:	2301      	movs	r3, #1
 800705a:	4093      	lsls	r3, r2
 800705c:	608b      	str	r3, [r1, #8]
 800705e:	4648      	mov	r0, r9
 8007060:	f000 fee6 	bl	8007e30 <_Bfree>
 8007064:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007068:	2200      	movs	r2, #0
 800706a:	601a      	str	r2, [r3, #0]
 800706c:	1e2b      	subs	r3, r5, #0
 800706e:	bfb9      	ittee	lt
 8007070:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007074:	9305      	strlt	r3, [sp, #20]
 8007076:	2300      	movge	r3, #0
 8007078:	6033      	strge	r3, [r6, #0]
 800707a:	9f05      	ldr	r7, [sp, #20]
 800707c:	4b9a      	ldr	r3, [pc, #616]	@ (80072e8 <_dtoa_r+0x2d8>)
 800707e:	bfbc      	itt	lt
 8007080:	2201      	movlt	r2, #1
 8007082:	6032      	strlt	r2, [r6, #0]
 8007084:	43bb      	bics	r3, r7
 8007086:	d112      	bne.n	80070ae <_dtoa_r+0x9e>
 8007088:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800708a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800708e:	6013      	str	r3, [r2, #0]
 8007090:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007094:	4323      	orrs	r3, r4
 8007096:	f000 855a 	beq.w	8007b4e <_dtoa_r+0xb3e>
 800709a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800709c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80072fc <_dtoa_r+0x2ec>
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f000 855c 	beq.w	8007b5e <_dtoa_r+0xb4e>
 80070a6:	f10a 0303 	add.w	r3, sl, #3
 80070aa:	f000 bd56 	b.w	8007b5a <_dtoa_r+0xb4a>
 80070ae:	ed9d 7b04 	vldr	d7, [sp, #16]
 80070b2:	2200      	movs	r2, #0
 80070b4:	ec51 0b17 	vmov	r0, r1, d7
 80070b8:	2300      	movs	r3, #0
 80070ba:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80070be:	f7f9 fd0b 	bl	8000ad8 <__aeabi_dcmpeq>
 80070c2:	4680      	mov	r8, r0
 80070c4:	b158      	cbz	r0, 80070de <_dtoa_r+0xce>
 80070c6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80070c8:	2301      	movs	r3, #1
 80070ca:	6013      	str	r3, [r2, #0]
 80070cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80070ce:	b113      	cbz	r3, 80070d6 <_dtoa_r+0xc6>
 80070d0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80070d2:	4b86      	ldr	r3, [pc, #536]	@ (80072ec <_dtoa_r+0x2dc>)
 80070d4:	6013      	str	r3, [r2, #0]
 80070d6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007300 <_dtoa_r+0x2f0>
 80070da:	f000 bd40 	b.w	8007b5e <_dtoa_r+0xb4e>
 80070de:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80070e2:	aa14      	add	r2, sp, #80	@ 0x50
 80070e4:	a915      	add	r1, sp, #84	@ 0x54
 80070e6:	4648      	mov	r0, r9
 80070e8:	f001 f984 	bl	80083f4 <__d2b>
 80070ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80070f0:	9002      	str	r0, [sp, #8]
 80070f2:	2e00      	cmp	r6, #0
 80070f4:	d078      	beq.n	80071e8 <_dtoa_r+0x1d8>
 80070f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070f8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80070fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007100:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007104:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007108:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800710c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007110:	4619      	mov	r1, r3
 8007112:	2200      	movs	r2, #0
 8007114:	4b76      	ldr	r3, [pc, #472]	@ (80072f0 <_dtoa_r+0x2e0>)
 8007116:	f7f9 f8bf 	bl	8000298 <__aeabi_dsub>
 800711a:	a36b      	add	r3, pc, #428	@ (adr r3, 80072c8 <_dtoa_r+0x2b8>)
 800711c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007120:	f7f9 fa72 	bl	8000608 <__aeabi_dmul>
 8007124:	a36a      	add	r3, pc, #424	@ (adr r3, 80072d0 <_dtoa_r+0x2c0>)
 8007126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712a:	f7f9 f8b7 	bl	800029c <__adddf3>
 800712e:	4604      	mov	r4, r0
 8007130:	4630      	mov	r0, r6
 8007132:	460d      	mov	r5, r1
 8007134:	f7f9 f9fe 	bl	8000534 <__aeabi_i2d>
 8007138:	a367      	add	r3, pc, #412	@ (adr r3, 80072d8 <_dtoa_r+0x2c8>)
 800713a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713e:	f7f9 fa63 	bl	8000608 <__aeabi_dmul>
 8007142:	4602      	mov	r2, r0
 8007144:	460b      	mov	r3, r1
 8007146:	4620      	mov	r0, r4
 8007148:	4629      	mov	r1, r5
 800714a:	f7f9 f8a7 	bl	800029c <__adddf3>
 800714e:	4604      	mov	r4, r0
 8007150:	460d      	mov	r5, r1
 8007152:	f7f9 fd09 	bl	8000b68 <__aeabi_d2iz>
 8007156:	2200      	movs	r2, #0
 8007158:	4607      	mov	r7, r0
 800715a:	2300      	movs	r3, #0
 800715c:	4620      	mov	r0, r4
 800715e:	4629      	mov	r1, r5
 8007160:	f7f9 fcc4 	bl	8000aec <__aeabi_dcmplt>
 8007164:	b140      	cbz	r0, 8007178 <_dtoa_r+0x168>
 8007166:	4638      	mov	r0, r7
 8007168:	f7f9 f9e4 	bl	8000534 <__aeabi_i2d>
 800716c:	4622      	mov	r2, r4
 800716e:	462b      	mov	r3, r5
 8007170:	f7f9 fcb2 	bl	8000ad8 <__aeabi_dcmpeq>
 8007174:	b900      	cbnz	r0, 8007178 <_dtoa_r+0x168>
 8007176:	3f01      	subs	r7, #1
 8007178:	2f16      	cmp	r7, #22
 800717a:	d852      	bhi.n	8007222 <_dtoa_r+0x212>
 800717c:	4b5d      	ldr	r3, [pc, #372]	@ (80072f4 <_dtoa_r+0x2e4>)
 800717e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007186:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800718a:	f7f9 fcaf 	bl	8000aec <__aeabi_dcmplt>
 800718e:	2800      	cmp	r0, #0
 8007190:	d049      	beq.n	8007226 <_dtoa_r+0x216>
 8007192:	3f01      	subs	r7, #1
 8007194:	2300      	movs	r3, #0
 8007196:	9310      	str	r3, [sp, #64]	@ 0x40
 8007198:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800719a:	1b9b      	subs	r3, r3, r6
 800719c:	1e5a      	subs	r2, r3, #1
 800719e:	bf45      	ittet	mi
 80071a0:	f1c3 0301 	rsbmi	r3, r3, #1
 80071a4:	9300      	strmi	r3, [sp, #0]
 80071a6:	2300      	movpl	r3, #0
 80071a8:	2300      	movmi	r3, #0
 80071aa:	9206      	str	r2, [sp, #24]
 80071ac:	bf54      	ite	pl
 80071ae:	9300      	strpl	r3, [sp, #0]
 80071b0:	9306      	strmi	r3, [sp, #24]
 80071b2:	2f00      	cmp	r7, #0
 80071b4:	db39      	blt.n	800722a <_dtoa_r+0x21a>
 80071b6:	9b06      	ldr	r3, [sp, #24]
 80071b8:	970d      	str	r7, [sp, #52]	@ 0x34
 80071ba:	443b      	add	r3, r7
 80071bc:	9306      	str	r3, [sp, #24]
 80071be:	2300      	movs	r3, #0
 80071c0:	9308      	str	r3, [sp, #32]
 80071c2:	9b07      	ldr	r3, [sp, #28]
 80071c4:	2b09      	cmp	r3, #9
 80071c6:	d863      	bhi.n	8007290 <_dtoa_r+0x280>
 80071c8:	2b05      	cmp	r3, #5
 80071ca:	bfc4      	itt	gt
 80071cc:	3b04      	subgt	r3, #4
 80071ce:	9307      	strgt	r3, [sp, #28]
 80071d0:	9b07      	ldr	r3, [sp, #28]
 80071d2:	f1a3 0302 	sub.w	r3, r3, #2
 80071d6:	bfcc      	ite	gt
 80071d8:	2400      	movgt	r4, #0
 80071da:	2401      	movle	r4, #1
 80071dc:	2b03      	cmp	r3, #3
 80071de:	d863      	bhi.n	80072a8 <_dtoa_r+0x298>
 80071e0:	e8df f003 	tbb	[pc, r3]
 80071e4:	2b375452 	.word	0x2b375452
 80071e8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80071ec:	441e      	add	r6, r3
 80071ee:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80071f2:	2b20      	cmp	r3, #32
 80071f4:	bfc1      	itttt	gt
 80071f6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80071fa:	409f      	lslgt	r7, r3
 80071fc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007200:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007204:	bfd6      	itet	le
 8007206:	f1c3 0320 	rsble	r3, r3, #32
 800720a:	ea47 0003 	orrgt.w	r0, r7, r3
 800720e:	fa04 f003 	lslle.w	r0, r4, r3
 8007212:	f7f9 f97f 	bl	8000514 <__aeabi_ui2d>
 8007216:	2201      	movs	r2, #1
 8007218:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800721c:	3e01      	subs	r6, #1
 800721e:	9212      	str	r2, [sp, #72]	@ 0x48
 8007220:	e776      	b.n	8007110 <_dtoa_r+0x100>
 8007222:	2301      	movs	r3, #1
 8007224:	e7b7      	b.n	8007196 <_dtoa_r+0x186>
 8007226:	9010      	str	r0, [sp, #64]	@ 0x40
 8007228:	e7b6      	b.n	8007198 <_dtoa_r+0x188>
 800722a:	9b00      	ldr	r3, [sp, #0]
 800722c:	1bdb      	subs	r3, r3, r7
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	427b      	negs	r3, r7
 8007232:	9308      	str	r3, [sp, #32]
 8007234:	2300      	movs	r3, #0
 8007236:	930d      	str	r3, [sp, #52]	@ 0x34
 8007238:	e7c3      	b.n	80071c2 <_dtoa_r+0x1b2>
 800723a:	2301      	movs	r3, #1
 800723c:	9309      	str	r3, [sp, #36]	@ 0x24
 800723e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007240:	eb07 0b03 	add.w	fp, r7, r3
 8007244:	f10b 0301 	add.w	r3, fp, #1
 8007248:	2b01      	cmp	r3, #1
 800724a:	9303      	str	r3, [sp, #12]
 800724c:	bfb8      	it	lt
 800724e:	2301      	movlt	r3, #1
 8007250:	e006      	b.n	8007260 <_dtoa_r+0x250>
 8007252:	2301      	movs	r3, #1
 8007254:	9309      	str	r3, [sp, #36]	@ 0x24
 8007256:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007258:	2b00      	cmp	r3, #0
 800725a:	dd28      	ble.n	80072ae <_dtoa_r+0x29e>
 800725c:	469b      	mov	fp, r3
 800725e:	9303      	str	r3, [sp, #12]
 8007260:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007264:	2100      	movs	r1, #0
 8007266:	2204      	movs	r2, #4
 8007268:	f102 0514 	add.w	r5, r2, #20
 800726c:	429d      	cmp	r5, r3
 800726e:	d926      	bls.n	80072be <_dtoa_r+0x2ae>
 8007270:	6041      	str	r1, [r0, #4]
 8007272:	4648      	mov	r0, r9
 8007274:	f000 fd9c 	bl	8007db0 <_Balloc>
 8007278:	4682      	mov	sl, r0
 800727a:	2800      	cmp	r0, #0
 800727c:	d142      	bne.n	8007304 <_dtoa_r+0x2f4>
 800727e:	4b1e      	ldr	r3, [pc, #120]	@ (80072f8 <_dtoa_r+0x2e8>)
 8007280:	4602      	mov	r2, r0
 8007282:	f240 11af 	movw	r1, #431	@ 0x1af
 8007286:	e6da      	b.n	800703e <_dtoa_r+0x2e>
 8007288:	2300      	movs	r3, #0
 800728a:	e7e3      	b.n	8007254 <_dtoa_r+0x244>
 800728c:	2300      	movs	r3, #0
 800728e:	e7d5      	b.n	800723c <_dtoa_r+0x22c>
 8007290:	2401      	movs	r4, #1
 8007292:	2300      	movs	r3, #0
 8007294:	9307      	str	r3, [sp, #28]
 8007296:	9409      	str	r4, [sp, #36]	@ 0x24
 8007298:	f04f 3bff 	mov.w	fp, #4294967295
 800729c:	2200      	movs	r2, #0
 800729e:	f8cd b00c 	str.w	fp, [sp, #12]
 80072a2:	2312      	movs	r3, #18
 80072a4:	920c      	str	r2, [sp, #48]	@ 0x30
 80072a6:	e7db      	b.n	8007260 <_dtoa_r+0x250>
 80072a8:	2301      	movs	r3, #1
 80072aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80072ac:	e7f4      	b.n	8007298 <_dtoa_r+0x288>
 80072ae:	f04f 0b01 	mov.w	fp, #1
 80072b2:	f8cd b00c 	str.w	fp, [sp, #12]
 80072b6:	465b      	mov	r3, fp
 80072b8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80072bc:	e7d0      	b.n	8007260 <_dtoa_r+0x250>
 80072be:	3101      	adds	r1, #1
 80072c0:	0052      	lsls	r2, r2, #1
 80072c2:	e7d1      	b.n	8007268 <_dtoa_r+0x258>
 80072c4:	f3af 8000 	nop.w
 80072c8:	636f4361 	.word	0x636f4361
 80072cc:	3fd287a7 	.word	0x3fd287a7
 80072d0:	8b60c8b3 	.word	0x8b60c8b3
 80072d4:	3fc68a28 	.word	0x3fc68a28
 80072d8:	509f79fb 	.word	0x509f79fb
 80072dc:	3fd34413 	.word	0x3fd34413
 80072e0:	08008ced 	.word	0x08008ced
 80072e4:	08008d04 	.word	0x08008d04
 80072e8:	7ff00000 	.word	0x7ff00000
 80072ec:	08008cbd 	.word	0x08008cbd
 80072f0:	3ff80000 	.word	0x3ff80000
 80072f4:	08008e58 	.word	0x08008e58
 80072f8:	08008d5c 	.word	0x08008d5c
 80072fc:	08008ce9 	.word	0x08008ce9
 8007300:	08008cbc 	.word	0x08008cbc
 8007304:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007308:	6018      	str	r0, [r3, #0]
 800730a:	9b03      	ldr	r3, [sp, #12]
 800730c:	2b0e      	cmp	r3, #14
 800730e:	f200 80a1 	bhi.w	8007454 <_dtoa_r+0x444>
 8007312:	2c00      	cmp	r4, #0
 8007314:	f000 809e 	beq.w	8007454 <_dtoa_r+0x444>
 8007318:	2f00      	cmp	r7, #0
 800731a:	dd33      	ble.n	8007384 <_dtoa_r+0x374>
 800731c:	4b9c      	ldr	r3, [pc, #624]	@ (8007590 <_dtoa_r+0x580>)
 800731e:	f007 020f 	and.w	r2, r7, #15
 8007322:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007326:	ed93 7b00 	vldr	d7, [r3]
 800732a:	05f8      	lsls	r0, r7, #23
 800732c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007330:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007334:	d516      	bpl.n	8007364 <_dtoa_r+0x354>
 8007336:	4b97      	ldr	r3, [pc, #604]	@ (8007594 <_dtoa_r+0x584>)
 8007338:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800733c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007340:	f7f9 fa8c 	bl	800085c <__aeabi_ddiv>
 8007344:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007348:	f004 040f 	and.w	r4, r4, #15
 800734c:	2603      	movs	r6, #3
 800734e:	4d91      	ldr	r5, [pc, #580]	@ (8007594 <_dtoa_r+0x584>)
 8007350:	b954      	cbnz	r4, 8007368 <_dtoa_r+0x358>
 8007352:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007356:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800735a:	f7f9 fa7f 	bl	800085c <__aeabi_ddiv>
 800735e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007362:	e028      	b.n	80073b6 <_dtoa_r+0x3a6>
 8007364:	2602      	movs	r6, #2
 8007366:	e7f2      	b.n	800734e <_dtoa_r+0x33e>
 8007368:	07e1      	lsls	r1, r4, #31
 800736a:	d508      	bpl.n	800737e <_dtoa_r+0x36e>
 800736c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007370:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007374:	f7f9 f948 	bl	8000608 <__aeabi_dmul>
 8007378:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800737c:	3601      	adds	r6, #1
 800737e:	1064      	asrs	r4, r4, #1
 8007380:	3508      	adds	r5, #8
 8007382:	e7e5      	b.n	8007350 <_dtoa_r+0x340>
 8007384:	f000 80af 	beq.w	80074e6 <_dtoa_r+0x4d6>
 8007388:	427c      	negs	r4, r7
 800738a:	4b81      	ldr	r3, [pc, #516]	@ (8007590 <_dtoa_r+0x580>)
 800738c:	4d81      	ldr	r5, [pc, #516]	@ (8007594 <_dtoa_r+0x584>)
 800738e:	f004 020f 	and.w	r2, r4, #15
 8007392:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800739e:	f7f9 f933 	bl	8000608 <__aeabi_dmul>
 80073a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073a6:	1124      	asrs	r4, r4, #4
 80073a8:	2300      	movs	r3, #0
 80073aa:	2602      	movs	r6, #2
 80073ac:	2c00      	cmp	r4, #0
 80073ae:	f040 808f 	bne.w	80074d0 <_dtoa_r+0x4c0>
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1d3      	bne.n	800735e <_dtoa_r+0x34e>
 80073b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80073b8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f000 8094 	beq.w	80074ea <_dtoa_r+0x4da>
 80073c2:	4b75      	ldr	r3, [pc, #468]	@ (8007598 <_dtoa_r+0x588>)
 80073c4:	2200      	movs	r2, #0
 80073c6:	4620      	mov	r0, r4
 80073c8:	4629      	mov	r1, r5
 80073ca:	f7f9 fb8f 	bl	8000aec <__aeabi_dcmplt>
 80073ce:	2800      	cmp	r0, #0
 80073d0:	f000 808b 	beq.w	80074ea <_dtoa_r+0x4da>
 80073d4:	9b03      	ldr	r3, [sp, #12]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f000 8087 	beq.w	80074ea <_dtoa_r+0x4da>
 80073dc:	f1bb 0f00 	cmp.w	fp, #0
 80073e0:	dd34      	ble.n	800744c <_dtoa_r+0x43c>
 80073e2:	4620      	mov	r0, r4
 80073e4:	4b6d      	ldr	r3, [pc, #436]	@ (800759c <_dtoa_r+0x58c>)
 80073e6:	2200      	movs	r2, #0
 80073e8:	4629      	mov	r1, r5
 80073ea:	f7f9 f90d 	bl	8000608 <__aeabi_dmul>
 80073ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073f2:	f107 38ff 	add.w	r8, r7, #4294967295
 80073f6:	3601      	adds	r6, #1
 80073f8:	465c      	mov	r4, fp
 80073fa:	4630      	mov	r0, r6
 80073fc:	f7f9 f89a 	bl	8000534 <__aeabi_i2d>
 8007400:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007404:	f7f9 f900 	bl	8000608 <__aeabi_dmul>
 8007408:	4b65      	ldr	r3, [pc, #404]	@ (80075a0 <_dtoa_r+0x590>)
 800740a:	2200      	movs	r2, #0
 800740c:	f7f8 ff46 	bl	800029c <__adddf3>
 8007410:	4605      	mov	r5, r0
 8007412:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007416:	2c00      	cmp	r4, #0
 8007418:	d16a      	bne.n	80074f0 <_dtoa_r+0x4e0>
 800741a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800741e:	4b61      	ldr	r3, [pc, #388]	@ (80075a4 <_dtoa_r+0x594>)
 8007420:	2200      	movs	r2, #0
 8007422:	f7f8 ff39 	bl	8000298 <__aeabi_dsub>
 8007426:	4602      	mov	r2, r0
 8007428:	460b      	mov	r3, r1
 800742a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800742e:	462a      	mov	r2, r5
 8007430:	4633      	mov	r3, r6
 8007432:	f7f9 fb79 	bl	8000b28 <__aeabi_dcmpgt>
 8007436:	2800      	cmp	r0, #0
 8007438:	f040 8298 	bne.w	800796c <_dtoa_r+0x95c>
 800743c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007440:	462a      	mov	r2, r5
 8007442:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007446:	f7f9 fb51 	bl	8000aec <__aeabi_dcmplt>
 800744a:	bb38      	cbnz	r0, 800749c <_dtoa_r+0x48c>
 800744c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007450:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007454:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007456:	2b00      	cmp	r3, #0
 8007458:	f2c0 8157 	blt.w	800770a <_dtoa_r+0x6fa>
 800745c:	2f0e      	cmp	r7, #14
 800745e:	f300 8154 	bgt.w	800770a <_dtoa_r+0x6fa>
 8007462:	4b4b      	ldr	r3, [pc, #300]	@ (8007590 <_dtoa_r+0x580>)
 8007464:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007468:	ed93 7b00 	vldr	d7, [r3]
 800746c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800746e:	2b00      	cmp	r3, #0
 8007470:	ed8d 7b00 	vstr	d7, [sp]
 8007474:	f280 80e5 	bge.w	8007642 <_dtoa_r+0x632>
 8007478:	9b03      	ldr	r3, [sp, #12]
 800747a:	2b00      	cmp	r3, #0
 800747c:	f300 80e1 	bgt.w	8007642 <_dtoa_r+0x632>
 8007480:	d10c      	bne.n	800749c <_dtoa_r+0x48c>
 8007482:	4b48      	ldr	r3, [pc, #288]	@ (80075a4 <_dtoa_r+0x594>)
 8007484:	2200      	movs	r2, #0
 8007486:	ec51 0b17 	vmov	r0, r1, d7
 800748a:	f7f9 f8bd 	bl	8000608 <__aeabi_dmul>
 800748e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007492:	f7f9 fb3f 	bl	8000b14 <__aeabi_dcmpge>
 8007496:	2800      	cmp	r0, #0
 8007498:	f000 8266 	beq.w	8007968 <_dtoa_r+0x958>
 800749c:	2400      	movs	r4, #0
 800749e:	4625      	mov	r5, r4
 80074a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80074a2:	4656      	mov	r6, sl
 80074a4:	ea6f 0803 	mvn.w	r8, r3
 80074a8:	2700      	movs	r7, #0
 80074aa:	4621      	mov	r1, r4
 80074ac:	4648      	mov	r0, r9
 80074ae:	f000 fcbf 	bl	8007e30 <_Bfree>
 80074b2:	2d00      	cmp	r5, #0
 80074b4:	f000 80bd 	beq.w	8007632 <_dtoa_r+0x622>
 80074b8:	b12f      	cbz	r7, 80074c6 <_dtoa_r+0x4b6>
 80074ba:	42af      	cmp	r7, r5
 80074bc:	d003      	beq.n	80074c6 <_dtoa_r+0x4b6>
 80074be:	4639      	mov	r1, r7
 80074c0:	4648      	mov	r0, r9
 80074c2:	f000 fcb5 	bl	8007e30 <_Bfree>
 80074c6:	4629      	mov	r1, r5
 80074c8:	4648      	mov	r0, r9
 80074ca:	f000 fcb1 	bl	8007e30 <_Bfree>
 80074ce:	e0b0      	b.n	8007632 <_dtoa_r+0x622>
 80074d0:	07e2      	lsls	r2, r4, #31
 80074d2:	d505      	bpl.n	80074e0 <_dtoa_r+0x4d0>
 80074d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80074d8:	f7f9 f896 	bl	8000608 <__aeabi_dmul>
 80074dc:	3601      	adds	r6, #1
 80074de:	2301      	movs	r3, #1
 80074e0:	1064      	asrs	r4, r4, #1
 80074e2:	3508      	adds	r5, #8
 80074e4:	e762      	b.n	80073ac <_dtoa_r+0x39c>
 80074e6:	2602      	movs	r6, #2
 80074e8:	e765      	b.n	80073b6 <_dtoa_r+0x3a6>
 80074ea:	9c03      	ldr	r4, [sp, #12]
 80074ec:	46b8      	mov	r8, r7
 80074ee:	e784      	b.n	80073fa <_dtoa_r+0x3ea>
 80074f0:	4b27      	ldr	r3, [pc, #156]	@ (8007590 <_dtoa_r+0x580>)
 80074f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80074f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80074f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80074fc:	4454      	add	r4, sl
 80074fe:	2900      	cmp	r1, #0
 8007500:	d054      	beq.n	80075ac <_dtoa_r+0x59c>
 8007502:	4929      	ldr	r1, [pc, #164]	@ (80075a8 <_dtoa_r+0x598>)
 8007504:	2000      	movs	r0, #0
 8007506:	f7f9 f9a9 	bl	800085c <__aeabi_ddiv>
 800750a:	4633      	mov	r3, r6
 800750c:	462a      	mov	r2, r5
 800750e:	f7f8 fec3 	bl	8000298 <__aeabi_dsub>
 8007512:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007516:	4656      	mov	r6, sl
 8007518:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800751c:	f7f9 fb24 	bl	8000b68 <__aeabi_d2iz>
 8007520:	4605      	mov	r5, r0
 8007522:	f7f9 f807 	bl	8000534 <__aeabi_i2d>
 8007526:	4602      	mov	r2, r0
 8007528:	460b      	mov	r3, r1
 800752a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800752e:	f7f8 feb3 	bl	8000298 <__aeabi_dsub>
 8007532:	3530      	adds	r5, #48	@ 0x30
 8007534:	4602      	mov	r2, r0
 8007536:	460b      	mov	r3, r1
 8007538:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800753c:	f806 5b01 	strb.w	r5, [r6], #1
 8007540:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007544:	f7f9 fad2 	bl	8000aec <__aeabi_dcmplt>
 8007548:	2800      	cmp	r0, #0
 800754a:	d172      	bne.n	8007632 <_dtoa_r+0x622>
 800754c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007550:	4911      	ldr	r1, [pc, #68]	@ (8007598 <_dtoa_r+0x588>)
 8007552:	2000      	movs	r0, #0
 8007554:	f7f8 fea0 	bl	8000298 <__aeabi_dsub>
 8007558:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800755c:	f7f9 fac6 	bl	8000aec <__aeabi_dcmplt>
 8007560:	2800      	cmp	r0, #0
 8007562:	f040 80b4 	bne.w	80076ce <_dtoa_r+0x6be>
 8007566:	42a6      	cmp	r6, r4
 8007568:	f43f af70 	beq.w	800744c <_dtoa_r+0x43c>
 800756c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007570:	4b0a      	ldr	r3, [pc, #40]	@ (800759c <_dtoa_r+0x58c>)
 8007572:	2200      	movs	r2, #0
 8007574:	f7f9 f848 	bl	8000608 <__aeabi_dmul>
 8007578:	4b08      	ldr	r3, [pc, #32]	@ (800759c <_dtoa_r+0x58c>)
 800757a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800757e:	2200      	movs	r2, #0
 8007580:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007584:	f7f9 f840 	bl	8000608 <__aeabi_dmul>
 8007588:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800758c:	e7c4      	b.n	8007518 <_dtoa_r+0x508>
 800758e:	bf00      	nop
 8007590:	08008e58 	.word	0x08008e58
 8007594:	08008e30 	.word	0x08008e30
 8007598:	3ff00000 	.word	0x3ff00000
 800759c:	40240000 	.word	0x40240000
 80075a0:	401c0000 	.word	0x401c0000
 80075a4:	40140000 	.word	0x40140000
 80075a8:	3fe00000 	.word	0x3fe00000
 80075ac:	4631      	mov	r1, r6
 80075ae:	4628      	mov	r0, r5
 80075b0:	f7f9 f82a 	bl	8000608 <__aeabi_dmul>
 80075b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80075b8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80075ba:	4656      	mov	r6, sl
 80075bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075c0:	f7f9 fad2 	bl	8000b68 <__aeabi_d2iz>
 80075c4:	4605      	mov	r5, r0
 80075c6:	f7f8 ffb5 	bl	8000534 <__aeabi_i2d>
 80075ca:	4602      	mov	r2, r0
 80075cc:	460b      	mov	r3, r1
 80075ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075d2:	f7f8 fe61 	bl	8000298 <__aeabi_dsub>
 80075d6:	3530      	adds	r5, #48	@ 0x30
 80075d8:	f806 5b01 	strb.w	r5, [r6], #1
 80075dc:	4602      	mov	r2, r0
 80075de:	460b      	mov	r3, r1
 80075e0:	42a6      	cmp	r6, r4
 80075e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80075e6:	f04f 0200 	mov.w	r2, #0
 80075ea:	d124      	bne.n	8007636 <_dtoa_r+0x626>
 80075ec:	4baf      	ldr	r3, [pc, #700]	@ (80078ac <_dtoa_r+0x89c>)
 80075ee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80075f2:	f7f8 fe53 	bl	800029c <__adddf3>
 80075f6:	4602      	mov	r2, r0
 80075f8:	460b      	mov	r3, r1
 80075fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075fe:	f7f9 fa93 	bl	8000b28 <__aeabi_dcmpgt>
 8007602:	2800      	cmp	r0, #0
 8007604:	d163      	bne.n	80076ce <_dtoa_r+0x6be>
 8007606:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800760a:	49a8      	ldr	r1, [pc, #672]	@ (80078ac <_dtoa_r+0x89c>)
 800760c:	2000      	movs	r0, #0
 800760e:	f7f8 fe43 	bl	8000298 <__aeabi_dsub>
 8007612:	4602      	mov	r2, r0
 8007614:	460b      	mov	r3, r1
 8007616:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800761a:	f7f9 fa67 	bl	8000aec <__aeabi_dcmplt>
 800761e:	2800      	cmp	r0, #0
 8007620:	f43f af14 	beq.w	800744c <_dtoa_r+0x43c>
 8007624:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007626:	1e73      	subs	r3, r6, #1
 8007628:	9313      	str	r3, [sp, #76]	@ 0x4c
 800762a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800762e:	2b30      	cmp	r3, #48	@ 0x30
 8007630:	d0f8      	beq.n	8007624 <_dtoa_r+0x614>
 8007632:	4647      	mov	r7, r8
 8007634:	e03b      	b.n	80076ae <_dtoa_r+0x69e>
 8007636:	4b9e      	ldr	r3, [pc, #632]	@ (80078b0 <_dtoa_r+0x8a0>)
 8007638:	f7f8 ffe6 	bl	8000608 <__aeabi_dmul>
 800763c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007640:	e7bc      	b.n	80075bc <_dtoa_r+0x5ac>
 8007642:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007646:	4656      	mov	r6, sl
 8007648:	e9dd 2300 	ldrd	r2, r3, [sp]
 800764c:	4620      	mov	r0, r4
 800764e:	4629      	mov	r1, r5
 8007650:	f7f9 f904 	bl	800085c <__aeabi_ddiv>
 8007654:	f7f9 fa88 	bl	8000b68 <__aeabi_d2iz>
 8007658:	4680      	mov	r8, r0
 800765a:	f7f8 ff6b 	bl	8000534 <__aeabi_i2d>
 800765e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007662:	f7f8 ffd1 	bl	8000608 <__aeabi_dmul>
 8007666:	4602      	mov	r2, r0
 8007668:	460b      	mov	r3, r1
 800766a:	4620      	mov	r0, r4
 800766c:	4629      	mov	r1, r5
 800766e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007672:	f7f8 fe11 	bl	8000298 <__aeabi_dsub>
 8007676:	f806 4b01 	strb.w	r4, [r6], #1
 800767a:	9d03      	ldr	r5, [sp, #12]
 800767c:	eba6 040a 	sub.w	r4, r6, sl
 8007680:	42a5      	cmp	r5, r4
 8007682:	4602      	mov	r2, r0
 8007684:	460b      	mov	r3, r1
 8007686:	d133      	bne.n	80076f0 <_dtoa_r+0x6e0>
 8007688:	f7f8 fe08 	bl	800029c <__adddf3>
 800768c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007690:	4604      	mov	r4, r0
 8007692:	460d      	mov	r5, r1
 8007694:	f7f9 fa48 	bl	8000b28 <__aeabi_dcmpgt>
 8007698:	b9c0      	cbnz	r0, 80076cc <_dtoa_r+0x6bc>
 800769a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800769e:	4620      	mov	r0, r4
 80076a0:	4629      	mov	r1, r5
 80076a2:	f7f9 fa19 	bl	8000ad8 <__aeabi_dcmpeq>
 80076a6:	b110      	cbz	r0, 80076ae <_dtoa_r+0x69e>
 80076a8:	f018 0f01 	tst.w	r8, #1
 80076ac:	d10e      	bne.n	80076cc <_dtoa_r+0x6bc>
 80076ae:	9902      	ldr	r1, [sp, #8]
 80076b0:	4648      	mov	r0, r9
 80076b2:	f000 fbbd 	bl	8007e30 <_Bfree>
 80076b6:	2300      	movs	r3, #0
 80076b8:	7033      	strb	r3, [r6, #0]
 80076ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80076bc:	3701      	adds	r7, #1
 80076be:	601f      	str	r7, [r3, #0]
 80076c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	f000 824b 	beq.w	8007b5e <_dtoa_r+0xb4e>
 80076c8:	601e      	str	r6, [r3, #0]
 80076ca:	e248      	b.n	8007b5e <_dtoa_r+0xb4e>
 80076cc:	46b8      	mov	r8, r7
 80076ce:	4633      	mov	r3, r6
 80076d0:	461e      	mov	r6, r3
 80076d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076d6:	2a39      	cmp	r2, #57	@ 0x39
 80076d8:	d106      	bne.n	80076e8 <_dtoa_r+0x6d8>
 80076da:	459a      	cmp	sl, r3
 80076dc:	d1f8      	bne.n	80076d0 <_dtoa_r+0x6c0>
 80076de:	2230      	movs	r2, #48	@ 0x30
 80076e0:	f108 0801 	add.w	r8, r8, #1
 80076e4:	f88a 2000 	strb.w	r2, [sl]
 80076e8:	781a      	ldrb	r2, [r3, #0]
 80076ea:	3201      	adds	r2, #1
 80076ec:	701a      	strb	r2, [r3, #0]
 80076ee:	e7a0      	b.n	8007632 <_dtoa_r+0x622>
 80076f0:	4b6f      	ldr	r3, [pc, #444]	@ (80078b0 <_dtoa_r+0x8a0>)
 80076f2:	2200      	movs	r2, #0
 80076f4:	f7f8 ff88 	bl	8000608 <__aeabi_dmul>
 80076f8:	2200      	movs	r2, #0
 80076fa:	2300      	movs	r3, #0
 80076fc:	4604      	mov	r4, r0
 80076fe:	460d      	mov	r5, r1
 8007700:	f7f9 f9ea 	bl	8000ad8 <__aeabi_dcmpeq>
 8007704:	2800      	cmp	r0, #0
 8007706:	d09f      	beq.n	8007648 <_dtoa_r+0x638>
 8007708:	e7d1      	b.n	80076ae <_dtoa_r+0x69e>
 800770a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800770c:	2a00      	cmp	r2, #0
 800770e:	f000 80ea 	beq.w	80078e6 <_dtoa_r+0x8d6>
 8007712:	9a07      	ldr	r2, [sp, #28]
 8007714:	2a01      	cmp	r2, #1
 8007716:	f300 80cd 	bgt.w	80078b4 <_dtoa_r+0x8a4>
 800771a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800771c:	2a00      	cmp	r2, #0
 800771e:	f000 80c1 	beq.w	80078a4 <_dtoa_r+0x894>
 8007722:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007726:	9c08      	ldr	r4, [sp, #32]
 8007728:	9e00      	ldr	r6, [sp, #0]
 800772a:	9a00      	ldr	r2, [sp, #0]
 800772c:	441a      	add	r2, r3
 800772e:	9200      	str	r2, [sp, #0]
 8007730:	9a06      	ldr	r2, [sp, #24]
 8007732:	2101      	movs	r1, #1
 8007734:	441a      	add	r2, r3
 8007736:	4648      	mov	r0, r9
 8007738:	9206      	str	r2, [sp, #24]
 800773a:	f000 fc2d 	bl	8007f98 <__i2b>
 800773e:	4605      	mov	r5, r0
 8007740:	b166      	cbz	r6, 800775c <_dtoa_r+0x74c>
 8007742:	9b06      	ldr	r3, [sp, #24]
 8007744:	2b00      	cmp	r3, #0
 8007746:	dd09      	ble.n	800775c <_dtoa_r+0x74c>
 8007748:	42b3      	cmp	r3, r6
 800774a:	9a00      	ldr	r2, [sp, #0]
 800774c:	bfa8      	it	ge
 800774e:	4633      	movge	r3, r6
 8007750:	1ad2      	subs	r2, r2, r3
 8007752:	9200      	str	r2, [sp, #0]
 8007754:	9a06      	ldr	r2, [sp, #24]
 8007756:	1af6      	subs	r6, r6, r3
 8007758:	1ad3      	subs	r3, r2, r3
 800775a:	9306      	str	r3, [sp, #24]
 800775c:	9b08      	ldr	r3, [sp, #32]
 800775e:	b30b      	cbz	r3, 80077a4 <_dtoa_r+0x794>
 8007760:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007762:	2b00      	cmp	r3, #0
 8007764:	f000 80c6 	beq.w	80078f4 <_dtoa_r+0x8e4>
 8007768:	2c00      	cmp	r4, #0
 800776a:	f000 80c0 	beq.w	80078ee <_dtoa_r+0x8de>
 800776e:	4629      	mov	r1, r5
 8007770:	4622      	mov	r2, r4
 8007772:	4648      	mov	r0, r9
 8007774:	f000 fcc8 	bl	8008108 <__pow5mult>
 8007778:	9a02      	ldr	r2, [sp, #8]
 800777a:	4601      	mov	r1, r0
 800777c:	4605      	mov	r5, r0
 800777e:	4648      	mov	r0, r9
 8007780:	f000 fc20 	bl	8007fc4 <__multiply>
 8007784:	9902      	ldr	r1, [sp, #8]
 8007786:	4680      	mov	r8, r0
 8007788:	4648      	mov	r0, r9
 800778a:	f000 fb51 	bl	8007e30 <_Bfree>
 800778e:	9b08      	ldr	r3, [sp, #32]
 8007790:	1b1b      	subs	r3, r3, r4
 8007792:	9308      	str	r3, [sp, #32]
 8007794:	f000 80b1 	beq.w	80078fa <_dtoa_r+0x8ea>
 8007798:	9a08      	ldr	r2, [sp, #32]
 800779a:	4641      	mov	r1, r8
 800779c:	4648      	mov	r0, r9
 800779e:	f000 fcb3 	bl	8008108 <__pow5mult>
 80077a2:	9002      	str	r0, [sp, #8]
 80077a4:	2101      	movs	r1, #1
 80077a6:	4648      	mov	r0, r9
 80077a8:	f000 fbf6 	bl	8007f98 <__i2b>
 80077ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80077ae:	4604      	mov	r4, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f000 81d8 	beq.w	8007b66 <_dtoa_r+0xb56>
 80077b6:	461a      	mov	r2, r3
 80077b8:	4601      	mov	r1, r0
 80077ba:	4648      	mov	r0, r9
 80077bc:	f000 fca4 	bl	8008108 <__pow5mult>
 80077c0:	9b07      	ldr	r3, [sp, #28]
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	4604      	mov	r4, r0
 80077c6:	f300 809f 	bgt.w	8007908 <_dtoa_r+0x8f8>
 80077ca:	9b04      	ldr	r3, [sp, #16]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f040 8097 	bne.w	8007900 <_dtoa_r+0x8f0>
 80077d2:	9b05      	ldr	r3, [sp, #20]
 80077d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f040 8093 	bne.w	8007904 <_dtoa_r+0x8f4>
 80077de:	9b05      	ldr	r3, [sp, #20]
 80077e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80077e4:	0d1b      	lsrs	r3, r3, #20
 80077e6:	051b      	lsls	r3, r3, #20
 80077e8:	b133      	cbz	r3, 80077f8 <_dtoa_r+0x7e8>
 80077ea:	9b00      	ldr	r3, [sp, #0]
 80077ec:	3301      	adds	r3, #1
 80077ee:	9300      	str	r3, [sp, #0]
 80077f0:	9b06      	ldr	r3, [sp, #24]
 80077f2:	3301      	adds	r3, #1
 80077f4:	9306      	str	r3, [sp, #24]
 80077f6:	2301      	movs	r3, #1
 80077f8:	9308      	str	r3, [sp, #32]
 80077fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 81b8 	beq.w	8007b72 <_dtoa_r+0xb62>
 8007802:	6923      	ldr	r3, [r4, #16]
 8007804:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007808:	6918      	ldr	r0, [r3, #16]
 800780a:	f000 fb79 	bl	8007f00 <__hi0bits>
 800780e:	f1c0 0020 	rsb	r0, r0, #32
 8007812:	9b06      	ldr	r3, [sp, #24]
 8007814:	4418      	add	r0, r3
 8007816:	f010 001f 	ands.w	r0, r0, #31
 800781a:	f000 8082 	beq.w	8007922 <_dtoa_r+0x912>
 800781e:	f1c0 0320 	rsb	r3, r0, #32
 8007822:	2b04      	cmp	r3, #4
 8007824:	dd73      	ble.n	800790e <_dtoa_r+0x8fe>
 8007826:	9b00      	ldr	r3, [sp, #0]
 8007828:	f1c0 001c 	rsb	r0, r0, #28
 800782c:	4403      	add	r3, r0
 800782e:	9300      	str	r3, [sp, #0]
 8007830:	9b06      	ldr	r3, [sp, #24]
 8007832:	4403      	add	r3, r0
 8007834:	4406      	add	r6, r0
 8007836:	9306      	str	r3, [sp, #24]
 8007838:	9b00      	ldr	r3, [sp, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	dd05      	ble.n	800784a <_dtoa_r+0x83a>
 800783e:	9902      	ldr	r1, [sp, #8]
 8007840:	461a      	mov	r2, r3
 8007842:	4648      	mov	r0, r9
 8007844:	f000 fcba 	bl	80081bc <__lshift>
 8007848:	9002      	str	r0, [sp, #8]
 800784a:	9b06      	ldr	r3, [sp, #24]
 800784c:	2b00      	cmp	r3, #0
 800784e:	dd05      	ble.n	800785c <_dtoa_r+0x84c>
 8007850:	4621      	mov	r1, r4
 8007852:	461a      	mov	r2, r3
 8007854:	4648      	mov	r0, r9
 8007856:	f000 fcb1 	bl	80081bc <__lshift>
 800785a:	4604      	mov	r4, r0
 800785c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800785e:	2b00      	cmp	r3, #0
 8007860:	d061      	beq.n	8007926 <_dtoa_r+0x916>
 8007862:	9802      	ldr	r0, [sp, #8]
 8007864:	4621      	mov	r1, r4
 8007866:	f000 fd15 	bl	8008294 <__mcmp>
 800786a:	2800      	cmp	r0, #0
 800786c:	da5b      	bge.n	8007926 <_dtoa_r+0x916>
 800786e:	2300      	movs	r3, #0
 8007870:	9902      	ldr	r1, [sp, #8]
 8007872:	220a      	movs	r2, #10
 8007874:	4648      	mov	r0, r9
 8007876:	f000 fafd 	bl	8007e74 <__multadd>
 800787a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800787c:	9002      	str	r0, [sp, #8]
 800787e:	f107 38ff 	add.w	r8, r7, #4294967295
 8007882:	2b00      	cmp	r3, #0
 8007884:	f000 8177 	beq.w	8007b76 <_dtoa_r+0xb66>
 8007888:	4629      	mov	r1, r5
 800788a:	2300      	movs	r3, #0
 800788c:	220a      	movs	r2, #10
 800788e:	4648      	mov	r0, r9
 8007890:	f000 faf0 	bl	8007e74 <__multadd>
 8007894:	f1bb 0f00 	cmp.w	fp, #0
 8007898:	4605      	mov	r5, r0
 800789a:	dc6f      	bgt.n	800797c <_dtoa_r+0x96c>
 800789c:	9b07      	ldr	r3, [sp, #28]
 800789e:	2b02      	cmp	r3, #2
 80078a0:	dc49      	bgt.n	8007936 <_dtoa_r+0x926>
 80078a2:	e06b      	b.n	800797c <_dtoa_r+0x96c>
 80078a4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80078a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80078aa:	e73c      	b.n	8007726 <_dtoa_r+0x716>
 80078ac:	3fe00000 	.word	0x3fe00000
 80078b0:	40240000 	.word	0x40240000
 80078b4:	9b03      	ldr	r3, [sp, #12]
 80078b6:	1e5c      	subs	r4, r3, #1
 80078b8:	9b08      	ldr	r3, [sp, #32]
 80078ba:	42a3      	cmp	r3, r4
 80078bc:	db09      	blt.n	80078d2 <_dtoa_r+0x8c2>
 80078be:	1b1c      	subs	r4, r3, r4
 80078c0:	9b03      	ldr	r3, [sp, #12]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	f6bf af30 	bge.w	8007728 <_dtoa_r+0x718>
 80078c8:	9b00      	ldr	r3, [sp, #0]
 80078ca:	9a03      	ldr	r2, [sp, #12]
 80078cc:	1a9e      	subs	r6, r3, r2
 80078ce:	2300      	movs	r3, #0
 80078d0:	e72b      	b.n	800772a <_dtoa_r+0x71a>
 80078d2:	9b08      	ldr	r3, [sp, #32]
 80078d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80078d6:	9408      	str	r4, [sp, #32]
 80078d8:	1ae3      	subs	r3, r4, r3
 80078da:	441a      	add	r2, r3
 80078dc:	9e00      	ldr	r6, [sp, #0]
 80078de:	9b03      	ldr	r3, [sp, #12]
 80078e0:	920d      	str	r2, [sp, #52]	@ 0x34
 80078e2:	2400      	movs	r4, #0
 80078e4:	e721      	b.n	800772a <_dtoa_r+0x71a>
 80078e6:	9c08      	ldr	r4, [sp, #32]
 80078e8:	9e00      	ldr	r6, [sp, #0]
 80078ea:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80078ec:	e728      	b.n	8007740 <_dtoa_r+0x730>
 80078ee:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80078f2:	e751      	b.n	8007798 <_dtoa_r+0x788>
 80078f4:	9a08      	ldr	r2, [sp, #32]
 80078f6:	9902      	ldr	r1, [sp, #8]
 80078f8:	e750      	b.n	800779c <_dtoa_r+0x78c>
 80078fa:	f8cd 8008 	str.w	r8, [sp, #8]
 80078fe:	e751      	b.n	80077a4 <_dtoa_r+0x794>
 8007900:	2300      	movs	r3, #0
 8007902:	e779      	b.n	80077f8 <_dtoa_r+0x7e8>
 8007904:	9b04      	ldr	r3, [sp, #16]
 8007906:	e777      	b.n	80077f8 <_dtoa_r+0x7e8>
 8007908:	2300      	movs	r3, #0
 800790a:	9308      	str	r3, [sp, #32]
 800790c:	e779      	b.n	8007802 <_dtoa_r+0x7f2>
 800790e:	d093      	beq.n	8007838 <_dtoa_r+0x828>
 8007910:	9a00      	ldr	r2, [sp, #0]
 8007912:	331c      	adds	r3, #28
 8007914:	441a      	add	r2, r3
 8007916:	9200      	str	r2, [sp, #0]
 8007918:	9a06      	ldr	r2, [sp, #24]
 800791a:	441a      	add	r2, r3
 800791c:	441e      	add	r6, r3
 800791e:	9206      	str	r2, [sp, #24]
 8007920:	e78a      	b.n	8007838 <_dtoa_r+0x828>
 8007922:	4603      	mov	r3, r0
 8007924:	e7f4      	b.n	8007910 <_dtoa_r+0x900>
 8007926:	9b03      	ldr	r3, [sp, #12]
 8007928:	2b00      	cmp	r3, #0
 800792a:	46b8      	mov	r8, r7
 800792c:	dc20      	bgt.n	8007970 <_dtoa_r+0x960>
 800792e:	469b      	mov	fp, r3
 8007930:	9b07      	ldr	r3, [sp, #28]
 8007932:	2b02      	cmp	r3, #2
 8007934:	dd1e      	ble.n	8007974 <_dtoa_r+0x964>
 8007936:	f1bb 0f00 	cmp.w	fp, #0
 800793a:	f47f adb1 	bne.w	80074a0 <_dtoa_r+0x490>
 800793e:	4621      	mov	r1, r4
 8007940:	465b      	mov	r3, fp
 8007942:	2205      	movs	r2, #5
 8007944:	4648      	mov	r0, r9
 8007946:	f000 fa95 	bl	8007e74 <__multadd>
 800794a:	4601      	mov	r1, r0
 800794c:	4604      	mov	r4, r0
 800794e:	9802      	ldr	r0, [sp, #8]
 8007950:	f000 fca0 	bl	8008294 <__mcmp>
 8007954:	2800      	cmp	r0, #0
 8007956:	f77f ada3 	ble.w	80074a0 <_dtoa_r+0x490>
 800795a:	4656      	mov	r6, sl
 800795c:	2331      	movs	r3, #49	@ 0x31
 800795e:	f806 3b01 	strb.w	r3, [r6], #1
 8007962:	f108 0801 	add.w	r8, r8, #1
 8007966:	e59f      	b.n	80074a8 <_dtoa_r+0x498>
 8007968:	9c03      	ldr	r4, [sp, #12]
 800796a:	46b8      	mov	r8, r7
 800796c:	4625      	mov	r5, r4
 800796e:	e7f4      	b.n	800795a <_dtoa_r+0x94a>
 8007970:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007974:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007976:	2b00      	cmp	r3, #0
 8007978:	f000 8101 	beq.w	8007b7e <_dtoa_r+0xb6e>
 800797c:	2e00      	cmp	r6, #0
 800797e:	dd05      	ble.n	800798c <_dtoa_r+0x97c>
 8007980:	4629      	mov	r1, r5
 8007982:	4632      	mov	r2, r6
 8007984:	4648      	mov	r0, r9
 8007986:	f000 fc19 	bl	80081bc <__lshift>
 800798a:	4605      	mov	r5, r0
 800798c:	9b08      	ldr	r3, [sp, #32]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d05c      	beq.n	8007a4c <_dtoa_r+0xa3c>
 8007992:	6869      	ldr	r1, [r5, #4]
 8007994:	4648      	mov	r0, r9
 8007996:	f000 fa0b 	bl	8007db0 <_Balloc>
 800799a:	4606      	mov	r6, r0
 800799c:	b928      	cbnz	r0, 80079aa <_dtoa_r+0x99a>
 800799e:	4b82      	ldr	r3, [pc, #520]	@ (8007ba8 <_dtoa_r+0xb98>)
 80079a0:	4602      	mov	r2, r0
 80079a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80079a6:	f7ff bb4a 	b.w	800703e <_dtoa_r+0x2e>
 80079aa:	692a      	ldr	r2, [r5, #16]
 80079ac:	3202      	adds	r2, #2
 80079ae:	0092      	lsls	r2, r2, #2
 80079b0:	f105 010c 	add.w	r1, r5, #12
 80079b4:	300c      	adds	r0, #12
 80079b6:	f001 f807 	bl	80089c8 <memcpy>
 80079ba:	2201      	movs	r2, #1
 80079bc:	4631      	mov	r1, r6
 80079be:	4648      	mov	r0, r9
 80079c0:	f000 fbfc 	bl	80081bc <__lshift>
 80079c4:	f10a 0301 	add.w	r3, sl, #1
 80079c8:	9300      	str	r3, [sp, #0]
 80079ca:	eb0a 030b 	add.w	r3, sl, fp
 80079ce:	9308      	str	r3, [sp, #32]
 80079d0:	9b04      	ldr	r3, [sp, #16]
 80079d2:	f003 0301 	and.w	r3, r3, #1
 80079d6:	462f      	mov	r7, r5
 80079d8:	9306      	str	r3, [sp, #24]
 80079da:	4605      	mov	r5, r0
 80079dc:	9b00      	ldr	r3, [sp, #0]
 80079de:	9802      	ldr	r0, [sp, #8]
 80079e0:	4621      	mov	r1, r4
 80079e2:	f103 3bff 	add.w	fp, r3, #4294967295
 80079e6:	f7ff fa88 	bl	8006efa <quorem>
 80079ea:	4603      	mov	r3, r0
 80079ec:	3330      	adds	r3, #48	@ 0x30
 80079ee:	9003      	str	r0, [sp, #12]
 80079f0:	4639      	mov	r1, r7
 80079f2:	9802      	ldr	r0, [sp, #8]
 80079f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80079f6:	f000 fc4d 	bl	8008294 <__mcmp>
 80079fa:	462a      	mov	r2, r5
 80079fc:	9004      	str	r0, [sp, #16]
 80079fe:	4621      	mov	r1, r4
 8007a00:	4648      	mov	r0, r9
 8007a02:	f000 fc63 	bl	80082cc <__mdiff>
 8007a06:	68c2      	ldr	r2, [r0, #12]
 8007a08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a0a:	4606      	mov	r6, r0
 8007a0c:	bb02      	cbnz	r2, 8007a50 <_dtoa_r+0xa40>
 8007a0e:	4601      	mov	r1, r0
 8007a10:	9802      	ldr	r0, [sp, #8]
 8007a12:	f000 fc3f 	bl	8008294 <__mcmp>
 8007a16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a18:	4602      	mov	r2, r0
 8007a1a:	4631      	mov	r1, r6
 8007a1c:	4648      	mov	r0, r9
 8007a1e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007a20:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a22:	f000 fa05 	bl	8007e30 <_Bfree>
 8007a26:	9b07      	ldr	r3, [sp, #28]
 8007a28:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007a2a:	9e00      	ldr	r6, [sp, #0]
 8007a2c:	ea42 0103 	orr.w	r1, r2, r3
 8007a30:	9b06      	ldr	r3, [sp, #24]
 8007a32:	4319      	orrs	r1, r3
 8007a34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a36:	d10d      	bne.n	8007a54 <_dtoa_r+0xa44>
 8007a38:	2b39      	cmp	r3, #57	@ 0x39
 8007a3a:	d027      	beq.n	8007a8c <_dtoa_r+0xa7c>
 8007a3c:	9a04      	ldr	r2, [sp, #16]
 8007a3e:	2a00      	cmp	r2, #0
 8007a40:	dd01      	ble.n	8007a46 <_dtoa_r+0xa36>
 8007a42:	9b03      	ldr	r3, [sp, #12]
 8007a44:	3331      	adds	r3, #49	@ 0x31
 8007a46:	f88b 3000 	strb.w	r3, [fp]
 8007a4a:	e52e      	b.n	80074aa <_dtoa_r+0x49a>
 8007a4c:	4628      	mov	r0, r5
 8007a4e:	e7b9      	b.n	80079c4 <_dtoa_r+0x9b4>
 8007a50:	2201      	movs	r2, #1
 8007a52:	e7e2      	b.n	8007a1a <_dtoa_r+0xa0a>
 8007a54:	9904      	ldr	r1, [sp, #16]
 8007a56:	2900      	cmp	r1, #0
 8007a58:	db04      	blt.n	8007a64 <_dtoa_r+0xa54>
 8007a5a:	9807      	ldr	r0, [sp, #28]
 8007a5c:	4301      	orrs	r1, r0
 8007a5e:	9806      	ldr	r0, [sp, #24]
 8007a60:	4301      	orrs	r1, r0
 8007a62:	d120      	bne.n	8007aa6 <_dtoa_r+0xa96>
 8007a64:	2a00      	cmp	r2, #0
 8007a66:	ddee      	ble.n	8007a46 <_dtoa_r+0xa36>
 8007a68:	9902      	ldr	r1, [sp, #8]
 8007a6a:	9300      	str	r3, [sp, #0]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	4648      	mov	r0, r9
 8007a70:	f000 fba4 	bl	80081bc <__lshift>
 8007a74:	4621      	mov	r1, r4
 8007a76:	9002      	str	r0, [sp, #8]
 8007a78:	f000 fc0c 	bl	8008294 <__mcmp>
 8007a7c:	2800      	cmp	r0, #0
 8007a7e:	9b00      	ldr	r3, [sp, #0]
 8007a80:	dc02      	bgt.n	8007a88 <_dtoa_r+0xa78>
 8007a82:	d1e0      	bne.n	8007a46 <_dtoa_r+0xa36>
 8007a84:	07da      	lsls	r2, r3, #31
 8007a86:	d5de      	bpl.n	8007a46 <_dtoa_r+0xa36>
 8007a88:	2b39      	cmp	r3, #57	@ 0x39
 8007a8a:	d1da      	bne.n	8007a42 <_dtoa_r+0xa32>
 8007a8c:	2339      	movs	r3, #57	@ 0x39
 8007a8e:	f88b 3000 	strb.w	r3, [fp]
 8007a92:	4633      	mov	r3, r6
 8007a94:	461e      	mov	r6, r3
 8007a96:	3b01      	subs	r3, #1
 8007a98:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007a9c:	2a39      	cmp	r2, #57	@ 0x39
 8007a9e:	d04e      	beq.n	8007b3e <_dtoa_r+0xb2e>
 8007aa0:	3201      	adds	r2, #1
 8007aa2:	701a      	strb	r2, [r3, #0]
 8007aa4:	e501      	b.n	80074aa <_dtoa_r+0x49a>
 8007aa6:	2a00      	cmp	r2, #0
 8007aa8:	dd03      	ble.n	8007ab2 <_dtoa_r+0xaa2>
 8007aaa:	2b39      	cmp	r3, #57	@ 0x39
 8007aac:	d0ee      	beq.n	8007a8c <_dtoa_r+0xa7c>
 8007aae:	3301      	adds	r3, #1
 8007ab0:	e7c9      	b.n	8007a46 <_dtoa_r+0xa36>
 8007ab2:	9a00      	ldr	r2, [sp, #0]
 8007ab4:	9908      	ldr	r1, [sp, #32]
 8007ab6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007aba:	428a      	cmp	r2, r1
 8007abc:	d028      	beq.n	8007b10 <_dtoa_r+0xb00>
 8007abe:	9902      	ldr	r1, [sp, #8]
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	220a      	movs	r2, #10
 8007ac4:	4648      	mov	r0, r9
 8007ac6:	f000 f9d5 	bl	8007e74 <__multadd>
 8007aca:	42af      	cmp	r7, r5
 8007acc:	9002      	str	r0, [sp, #8]
 8007ace:	f04f 0300 	mov.w	r3, #0
 8007ad2:	f04f 020a 	mov.w	r2, #10
 8007ad6:	4639      	mov	r1, r7
 8007ad8:	4648      	mov	r0, r9
 8007ada:	d107      	bne.n	8007aec <_dtoa_r+0xadc>
 8007adc:	f000 f9ca 	bl	8007e74 <__multadd>
 8007ae0:	4607      	mov	r7, r0
 8007ae2:	4605      	mov	r5, r0
 8007ae4:	9b00      	ldr	r3, [sp, #0]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	e777      	b.n	80079dc <_dtoa_r+0x9cc>
 8007aec:	f000 f9c2 	bl	8007e74 <__multadd>
 8007af0:	4629      	mov	r1, r5
 8007af2:	4607      	mov	r7, r0
 8007af4:	2300      	movs	r3, #0
 8007af6:	220a      	movs	r2, #10
 8007af8:	4648      	mov	r0, r9
 8007afa:	f000 f9bb 	bl	8007e74 <__multadd>
 8007afe:	4605      	mov	r5, r0
 8007b00:	e7f0      	b.n	8007ae4 <_dtoa_r+0xad4>
 8007b02:	f1bb 0f00 	cmp.w	fp, #0
 8007b06:	bfcc      	ite	gt
 8007b08:	465e      	movgt	r6, fp
 8007b0a:	2601      	movle	r6, #1
 8007b0c:	4456      	add	r6, sl
 8007b0e:	2700      	movs	r7, #0
 8007b10:	9902      	ldr	r1, [sp, #8]
 8007b12:	9300      	str	r3, [sp, #0]
 8007b14:	2201      	movs	r2, #1
 8007b16:	4648      	mov	r0, r9
 8007b18:	f000 fb50 	bl	80081bc <__lshift>
 8007b1c:	4621      	mov	r1, r4
 8007b1e:	9002      	str	r0, [sp, #8]
 8007b20:	f000 fbb8 	bl	8008294 <__mcmp>
 8007b24:	2800      	cmp	r0, #0
 8007b26:	dcb4      	bgt.n	8007a92 <_dtoa_r+0xa82>
 8007b28:	d102      	bne.n	8007b30 <_dtoa_r+0xb20>
 8007b2a:	9b00      	ldr	r3, [sp, #0]
 8007b2c:	07db      	lsls	r3, r3, #31
 8007b2e:	d4b0      	bmi.n	8007a92 <_dtoa_r+0xa82>
 8007b30:	4633      	mov	r3, r6
 8007b32:	461e      	mov	r6, r3
 8007b34:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b38:	2a30      	cmp	r2, #48	@ 0x30
 8007b3a:	d0fa      	beq.n	8007b32 <_dtoa_r+0xb22>
 8007b3c:	e4b5      	b.n	80074aa <_dtoa_r+0x49a>
 8007b3e:	459a      	cmp	sl, r3
 8007b40:	d1a8      	bne.n	8007a94 <_dtoa_r+0xa84>
 8007b42:	2331      	movs	r3, #49	@ 0x31
 8007b44:	f108 0801 	add.w	r8, r8, #1
 8007b48:	f88a 3000 	strb.w	r3, [sl]
 8007b4c:	e4ad      	b.n	80074aa <_dtoa_r+0x49a>
 8007b4e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007b50:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007bac <_dtoa_r+0xb9c>
 8007b54:	b11b      	cbz	r3, 8007b5e <_dtoa_r+0xb4e>
 8007b56:	f10a 0308 	add.w	r3, sl, #8
 8007b5a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007b5c:	6013      	str	r3, [r2, #0]
 8007b5e:	4650      	mov	r0, sl
 8007b60:	b017      	add	sp, #92	@ 0x5c
 8007b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b66:	9b07      	ldr	r3, [sp, #28]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	f77f ae2e 	ble.w	80077ca <_dtoa_r+0x7ba>
 8007b6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b70:	9308      	str	r3, [sp, #32]
 8007b72:	2001      	movs	r0, #1
 8007b74:	e64d      	b.n	8007812 <_dtoa_r+0x802>
 8007b76:	f1bb 0f00 	cmp.w	fp, #0
 8007b7a:	f77f aed9 	ble.w	8007930 <_dtoa_r+0x920>
 8007b7e:	4656      	mov	r6, sl
 8007b80:	9802      	ldr	r0, [sp, #8]
 8007b82:	4621      	mov	r1, r4
 8007b84:	f7ff f9b9 	bl	8006efa <quorem>
 8007b88:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007b8c:	f806 3b01 	strb.w	r3, [r6], #1
 8007b90:	eba6 020a 	sub.w	r2, r6, sl
 8007b94:	4593      	cmp	fp, r2
 8007b96:	ddb4      	ble.n	8007b02 <_dtoa_r+0xaf2>
 8007b98:	9902      	ldr	r1, [sp, #8]
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	220a      	movs	r2, #10
 8007b9e:	4648      	mov	r0, r9
 8007ba0:	f000 f968 	bl	8007e74 <__multadd>
 8007ba4:	9002      	str	r0, [sp, #8]
 8007ba6:	e7eb      	b.n	8007b80 <_dtoa_r+0xb70>
 8007ba8:	08008d5c 	.word	0x08008d5c
 8007bac:	08008ce0 	.word	0x08008ce0

08007bb0 <_free_r>:
 8007bb0:	b538      	push	{r3, r4, r5, lr}
 8007bb2:	4605      	mov	r5, r0
 8007bb4:	2900      	cmp	r1, #0
 8007bb6:	d041      	beq.n	8007c3c <_free_r+0x8c>
 8007bb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bbc:	1f0c      	subs	r4, r1, #4
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	bfb8      	it	lt
 8007bc2:	18e4      	addlt	r4, r4, r3
 8007bc4:	f000 f8e8 	bl	8007d98 <__malloc_lock>
 8007bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8007c40 <_free_r+0x90>)
 8007bca:	6813      	ldr	r3, [r2, #0]
 8007bcc:	b933      	cbnz	r3, 8007bdc <_free_r+0x2c>
 8007bce:	6063      	str	r3, [r4, #4]
 8007bd0:	6014      	str	r4, [r2, #0]
 8007bd2:	4628      	mov	r0, r5
 8007bd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bd8:	f000 b8e4 	b.w	8007da4 <__malloc_unlock>
 8007bdc:	42a3      	cmp	r3, r4
 8007bde:	d908      	bls.n	8007bf2 <_free_r+0x42>
 8007be0:	6820      	ldr	r0, [r4, #0]
 8007be2:	1821      	adds	r1, r4, r0
 8007be4:	428b      	cmp	r3, r1
 8007be6:	bf01      	itttt	eq
 8007be8:	6819      	ldreq	r1, [r3, #0]
 8007bea:	685b      	ldreq	r3, [r3, #4]
 8007bec:	1809      	addeq	r1, r1, r0
 8007bee:	6021      	streq	r1, [r4, #0]
 8007bf0:	e7ed      	b.n	8007bce <_free_r+0x1e>
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	b10b      	cbz	r3, 8007bfc <_free_r+0x4c>
 8007bf8:	42a3      	cmp	r3, r4
 8007bfa:	d9fa      	bls.n	8007bf2 <_free_r+0x42>
 8007bfc:	6811      	ldr	r1, [r2, #0]
 8007bfe:	1850      	adds	r0, r2, r1
 8007c00:	42a0      	cmp	r0, r4
 8007c02:	d10b      	bne.n	8007c1c <_free_r+0x6c>
 8007c04:	6820      	ldr	r0, [r4, #0]
 8007c06:	4401      	add	r1, r0
 8007c08:	1850      	adds	r0, r2, r1
 8007c0a:	4283      	cmp	r3, r0
 8007c0c:	6011      	str	r1, [r2, #0]
 8007c0e:	d1e0      	bne.n	8007bd2 <_free_r+0x22>
 8007c10:	6818      	ldr	r0, [r3, #0]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	6053      	str	r3, [r2, #4]
 8007c16:	4408      	add	r0, r1
 8007c18:	6010      	str	r0, [r2, #0]
 8007c1a:	e7da      	b.n	8007bd2 <_free_r+0x22>
 8007c1c:	d902      	bls.n	8007c24 <_free_r+0x74>
 8007c1e:	230c      	movs	r3, #12
 8007c20:	602b      	str	r3, [r5, #0]
 8007c22:	e7d6      	b.n	8007bd2 <_free_r+0x22>
 8007c24:	6820      	ldr	r0, [r4, #0]
 8007c26:	1821      	adds	r1, r4, r0
 8007c28:	428b      	cmp	r3, r1
 8007c2a:	bf04      	itt	eq
 8007c2c:	6819      	ldreq	r1, [r3, #0]
 8007c2e:	685b      	ldreq	r3, [r3, #4]
 8007c30:	6063      	str	r3, [r4, #4]
 8007c32:	bf04      	itt	eq
 8007c34:	1809      	addeq	r1, r1, r0
 8007c36:	6021      	streq	r1, [r4, #0]
 8007c38:	6054      	str	r4, [r2, #4]
 8007c3a:	e7ca      	b.n	8007bd2 <_free_r+0x22>
 8007c3c:	bd38      	pop	{r3, r4, r5, pc}
 8007c3e:	bf00      	nop
 8007c40:	200004c0 	.word	0x200004c0

08007c44 <malloc>:
 8007c44:	4b02      	ldr	r3, [pc, #8]	@ (8007c50 <malloc+0xc>)
 8007c46:	4601      	mov	r1, r0
 8007c48:	6818      	ldr	r0, [r3, #0]
 8007c4a:	f000 b825 	b.w	8007c98 <_malloc_r>
 8007c4e:	bf00      	nop
 8007c50:	20000020 	.word	0x20000020

08007c54 <sbrk_aligned>:
 8007c54:	b570      	push	{r4, r5, r6, lr}
 8007c56:	4e0f      	ldr	r6, [pc, #60]	@ (8007c94 <sbrk_aligned+0x40>)
 8007c58:	460c      	mov	r4, r1
 8007c5a:	6831      	ldr	r1, [r6, #0]
 8007c5c:	4605      	mov	r5, r0
 8007c5e:	b911      	cbnz	r1, 8007c66 <sbrk_aligned+0x12>
 8007c60:	f000 fea2 	bl	80089a8 <_sbrk_r>
 8007c64:	6030      	str	r0, [r6, #0]
 8007c66:	4621      	mov	r1, r4
 8007c68:	4628      	mov	r0, r5
 8007c6a:	f000 fe9d 	bl	80089a8 <_sbrk_r>
 8007c6e:	1c43      	adds	r3, r0, #1
 8007c70:	d103      	bne.n	8007c7a <sbrk_aligned+0x26>
 8007c72:	f04f 34ff 	mov.w	r4, #4294967295
 8007c76:	4620      	mov	r0, r4
 8007c78:	bd70      	pop	{r4, r5, r6, pc}
 8007c7a:	1cc4      	adds	r4, r0, #3
 8007c7c:	f024 0403 	bic.w	r4, r4, #3
 8007c80:	42a0      	cmp	r0, r4
 8007c82:	d0f8      	beq.n	8007c76 <sbrk_aligned+0x22>
 8007c84:	1a21      	subs	r1, r4, r0
 8007c86:	4628      	mov	r0, r5
 8007c88:	f000 fe8e 	bl	80089a8 <_sbrk_r>
 8007c8c:	3001      	adds	r0, #1
 8007c8e:	d1f2      	bne.n	8007c76 <sbrk_aligned+0x22>
 8007c90:	e7ef      	b.n	8007c72 <sbrk_aligned+0x1e>
 8007c92:	bf00      	nop
 8007c94:	200004bc 	.word	0x200004bc

08007c98 <_malloc_r>:
 8007c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c9c:	1ccd      	adds	r5, r1, #3
 8007c9e:	f025 0503 	bic.w	r5, r5, #3
 8007ca2:	3508      	adds	r5, #8
 8007ca4:	2d0c      	cmp	r5, #12
 8007ca6:	bf38      	it	cc
 8007ca8:	250c      	movcc	r5, #12
 8007caa:	2d00      	cmp	r5, #0
 8007cac:	4606      	mov	r6, r0
 8007cae:	db01      	blt.n	8007cb4 <_malloc_r+0x1c>
 8007cb0:	42a9      	cmp	r1, r5
 8007cb2:	d904      	bls.n	8007cbe <_malloc_r+0x26>
 8007cb4:	230c      	movs	r3, #12
 8007cb6:	6033      	str	r3, [r6, #0]
 8007cb8:	2000      	movs	r0, #0
 8007cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007d94 <_malloc_r+0xfc>
 8007cc2:	f000 f869 	bl	8007d98 <__malloc_lock>
 8007cc6:	f8d8 3000 	ldr.w	r3, [r8]
 8007cca:	461c      	mov	r4, r3
 8007ccc:	bb44      	cbnz	r4, 8007d20 <_malloc_r+0x88>
 8007cce:	4629      	mov	r1, r5
 8007cd0:	4630      	mov	r0, r6
 8007cd2:	f7ff ffbf 	bl	8007c54 <sbrk_aligned>
 8007cd6:	1c43      	adds	r3, r0, #1
 8007cd8:	4604      	mov	r4, r0
 8007cda:	d158      	bne.n	8007d8e <_malloc_r+0xf6>
 8007cdc:	f8d8 4000 	ldr.w	r4, [r8]
 8007ce0:	4627      	mov	r7, r4
 8007ce2:	2f00      	cmp	r7, #0
 8007ce4:	d143      	bne.n	8007d6e <_malloc_r+0xd6>
 8007ce6:	2c00      	cmp	r4, #0
 8007ce8:	d04b      	beq.n	8007d82 <_malloc_r+0xea>
 8007cea:	6823      	ldr	r3, [r4, #0]
 8007cec:	4639      	mov	r1, r7
 8007cee:	4630      	mov	r0, r6
 8007cf0:	eb04 0903 	add.w	r9, r4, r3
 8007cf4:	f000 fe58 	bl	80089a8 <_sbrk_r>
 8007cf8:	4581      	cmp	r9, r0
 8007cfa:	d142      	bne.n	8007d82 <_malloc_r+0xea>
 8007cfc:	6821      	ldr	r1, [r4, #0]
 8007cfe:	1a6d      	subs	r5, r5, r1
 8007d00:	4629      	mov	r1, r5
 8007d02:	4630      	mov	r0, r6
 8007d04:	f7ff ffa6 	bl	8007c54 <sbrk_aligned>
 8007d08:	3001      	adds	r0, #1
 8007d0a:	d03a      	beq.n	8007d82 <_malloc_r+0xea>
 8007d0c:	6823      	ldr	r3, [r4, #0]
 8007d0e:	442b      	add	r3, r5
 8007d10:	6023      	str	r3, [r4, #0]
 8007d12:	f8d8 3000 	ldr.w	r3, [r8]
 8007d16:	685a      	ldr	r2, [r3, #4]
 8007d18:	bb62      	cbnz	r2, 8007d74 <_malloc_r+0xdc>
 8007d1a:	f8c8 7000 	str.w	r7, [r8]
 8007d1e:	e00f      	b.n	8007d40 <_malloc_r+0xa8>
 8007d20:	6822      	ldr	r2, [r4, #0]
 8007d22:	1b52      	subs	r2, r2, r5
 8007d24:	d420      	bmi.n	8007d68 <_malloc_r+0xd0>
 8007d26:	2a0b      	cmp	r2, #11
 8007d28:	d917      	bls.n	8007d5a <_malloc_r+0xc2>
 8007d2a:	1961      	adds	r1, r4, r5
 8007d2c:	42a3      	cmp	r3, r4
 8007d2e:	6025      	str	r5, [r4, #0]
 8007d30:	bf18      	it	ne
 8007d32:	6059      	strne	r1, [r3, #4]
 8007d34:	6863      	ldr	r3, [r4, #4]
 8007d36:	bf08      	it	eq
 8007d38:	f8c8 1000 	streq.w	r1, [r8]
 8007d3c:	5162      	str	r2, [r4, r5]
 8007d3e:	604b      	str	r3, [r1, #4]
 8007d40:	4630      	mov	r0, r6
 8007d42:	f000 f82f 	bl	8007da4 <__malloc_unlock>
 8007d46:	f104 000b 	add.w	r0, r4, #11
 8007d4a:	1d23      	adds	r3, r4, #4
 8007d4c:	f020 0007 	bic.w	r0, r0, #7
 8007d50:	1ac2      	subs	r2, r0, r3
 8007d52:	bf1c      	itt	ne
 8007d54:	1a1b      	subne	r3, r3, r0
 8007d56:	50a3      	strne	r3, [r4, r2]
 8007d58:	e7af      	b.n	8007cba <_malloc_r+0x22>
 8007d5a:	6862      	ldr	r2, [r4, #4]
 8007d5c:	42a3      	cmp	r3, r4
 8007d5e:	bf0c      	ite	eq
 8007d60:	f8c8 2000 	streq.w	r2, [r8]
 8007d64:	605a      	strne	r2, [r3, #4]
 8007d66:	e7eb      	b.n	8007d40 <_malloc_r+0xa8>
 8007d68:	4623      	mov	r3, r4
 8007d6a:	6864      	ldr	r4, [r4, #4]
 8007d6c:	e7ae      	b.n	8007ccc <_malloc_r+0x34>
 8007d6e:	463c      	mov	r4, r7
 8007d70:	687f      	ldr	r7, [r7, #4]
 8007d72:	e7b6      	b.n	8007ce2 <_malloc_r+0x4a>
 8007d74:	461a      	mov	r2, r3
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	42a3      	cmp	r3, r4
 8007d7a:	d1fb      	bne.n	8007d74 <_malloc_r+0xdc>
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	6053      	str	r3, [r2, #4]
 8007d80:	e7de      	b.n	8007d40 <_malloc_r+0xa8>
 8007d82:	230c      	movs	r3, #12
 8007d84:	6033      	str	r3, [r6, #0]
 8007d86:	4630      	mov	r0, r6
 8007d88:	f000 f80c 	bl	8007da4 <__malloc_unlock>
 8007d8c:	e794      	b.n	8007cb8 <_malloc_r+0x20>
 8007d8e:	6005      	str	r5, [r0, #0]
 8007d90:	e7d6      	b.n	8007d40 <_malloc_r+0xa8>
 8007d92:	bf00      	nop
 8007d94:	200004c0 	.word	0x200004c0

08007d98 <__malloc_lock>:
 8007d98:	4801      	ldr	r0, [pc, #4]	@ (8007da0 <__malloc_lock+0x8>)
 8007d9a:	f7ff b8ac 	b.w	8006ef6 <__retarget_lock_acquire_recursive>
 8007d9e:	bf00      	nop
 8007da0:	200004b8 	.word	0x200004b8

08007da4 <__malloc_unlock>:
 8007da4:	4801      	ldr	r0, [pc, #4]	@ (8007dac <__malloc_unlock+0x8>)
 8007da6:	f7ff b8a7 	b.w	8006ef8 <__retarget_lock_release_recursive>
 8007daa:	bf00      	nop
 8007dac:	200004b8 	.word	0x200004b8

08007db0 <_Balloc>:
 8007db0:	b570      	push	{r4, r5, r6, lr}
 8007db2:	69c6      	ldr	r6, [r0, #28]
 8007db4:	4604      	mov	r4, r0
 8007db6:	460d      	mov	r5, r1
 8007db8:	b976      	cbnz	r6, 8007dd8 <_Balloc+0x28>
 8007dba:	2010      	movs	r0, #16
 8007dbc:	f7ff ff42 	bl	8007c44 <malloc>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	61e0      	str	r0, [r4, #28]
 8007dc4:	b920      	cbnz	r0, 8007dd0 <_Balloc+0x20>
 8007dc6:	4b18      	ldr	r3, [pc, #96]	@ (8007e28 <_Balloc+0x78>)
 8007dc8:	4818      	ldr	r0, [pc, #96]	@ (8007e2c <_Balloc+0x7c>)
 8007dca:	216b      	movs	r1, #107	@ 0x6b
 8007dcc:	f000 fe0a 	bl	80089e4 <__assert_func>
 8007dd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007dd4:	6006      	str	r6, [r0, #0]
 8007dd6:	60c6      	str	r6, [r0, #12]
 8007dd8:	69e6      	ldr	r6, [r4, #28]
 8007dda:	68f3      	ldr	r3, [r6, #12]
 8007ddc:	b183      	cbz	r3, 8007e00 <_Balloc+0x50>
 8007dde:	69e3      	ldr	r3, [r4, #28]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007de6:	b9b8      	cbnz	r0, 8007e18 <_Balloc+0x68>
 8007de8:	2101      	movs	r1, #1
 8007dea:	fa01 f605 	lsl.w	r6, r1, r5
 8007dee:	1d72      	adds	r2, r6, #5
 8007df0:	0092      	lsls	r2, r2, #2
 8007df2:	4620      	mov	r0, r4
 8007df4:	f000 fe14 	bl	8008a20 <_calloc_r>
 8007df8:	b160      	cbz	r0, 8007e14 <_Balloc+0x64>
 8007dfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007dfe:	e00e      	b.n	8007e1e <_Balloc+0x6e>
 8007e00:	2221      	movs	r2, #33	@ 0x21
 8007e02:	2104      	movs	r1, #4
 8007e04:	4620      	mov	r0, r4
 8007e06:	f000 fe0b 	bl	8008a20 <_calloc_r>
 8007e0a:	69e3      	ldr	r3, [r4, #28]
 8007e0c:	60f0      	str	r0, [r6, #12]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d1e4      	bne.n	8007dde <_Balloc+0x2e>
 8007e14:	2000      	movs	r0, #0
 8007e16:	bd70      	pop	{r4, r5, r6, pc}
 8007e18:	6802      	ldr	r2, [r0, #0]
 8007e1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007e1e:	2300      	movs	r3, #0
 8007e20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007e24:	e7f7      	b.n	8007e16 <_Balloc+0x66>
 8007e26:	bf00      	nop
 8007e28:	08008ced 	.word	0x08008ced
 8007e2c:	08008d6d 	.word	0x08008d6d

08007e30 <_Bfree>:
 8007e30:	b570      	push	{r4, r5, r6, lr}
 8007e32:	69c6      	ldr	r6, [r0, #28]
 8007e34:	4605      	mov	r5, r0
 8007e36:	460c      	mov	r4, r1
 8007e38:	b976      	cbnz	r6, 8007e58 <_Bfree+0x28>
 8007e3a:	2010      	movs	r0, #16
 8007e3c:	f7ff ff02 	bl	8007c44 <malloc>
 8007e40:	4602      	mov	r2, r0
 8007e42:	61e8      	str	r0, [r5, #28]
 8007e44:	b920      	cbnz	r0, 8007e50 <_Bfree+0x20>
 8007e46:	4b09      	ldr	r3, [pc, #36]	@ (8007e6c <_Bfree+0x3c>)
 8007e48:	4809      	ldr	r0, [pc, #36]	@ (8007e70 <_Bfree+0x40>)
 8007e4a:	218f      	movs	r1, #143	@ 0x8f
 8007e4c:	f000 fdca 	bl	80089e4 <__assert_func>
 8007e50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e54:	6006      	str	r6, [r0, #0]
 8007e56:	60c6      	str	r6, [r0, #12]
 8007e58:	b13c      	cbz	r4, 8007e6a <_Bfree+0x3a>
 8007e5a:	69eb      	ldr	r3, [r5, #28]
 8007e5c:	6862      	ldr	r2, [r4, #4]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e64:	6021      	str	r1, [r4, #0]
 8007e66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007e6a:	bd70      	pop	{r4, r5, r6, pc}
 8007e6c:	08008ced 	.word	0x08008ced
 8007e70:	08008d6d 	.word	0x08008d6d

08007e74 <__multadd>:
 8007e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e78:	690d      	ldr	r5, [r1, #16]
 8007e7a:	4607      	mov	r7, r0
 8007e7c:	460c      	mov	r4, r1
 8007e7e:	461e      	mov	r6, r3
 8007e80:	f101 0c14 	add.w	ip, r1, #20
 8007e84:	2000      	movs	r0, #0
 8007e86:	f8dc 3000 	ldr.w	r3, [ip]
 8007e8a:	b299      	uxth	r1, r3
 8007e8c:	fb02 6101 	mla	r1, r2, r1, r6
 8007e90:	0c1e      	lsrs	r6, r3, #16
 8007e92:	0c0b      	lsrs	r3, r1, #16
 8007e94:	fb02 3306 	mla	r3, r2, r6, r3
 8007e98:	b289      	uxth	r1, r1
 8007e9a:	3001      	adds	r0, #1
 8007e9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ea0:	4285      	cmp	r5, r0
 8007ea2:	f84c 1b04 	str.w	r1, [ip], #4
 8007ea6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007eaa:	dcec      	bgt.n	8007e86 <__multadd+0x12>
 8007eac:	b30e      	cbz	r6, 8007ef2 <__multadd+0x7e>
 8007eae:	68a3      	ldr	r3, [r4, #8]
 8007eb0:	42ab      	cmp	r3, r5
 8007eb2:	dc19      	bgt.n	8007ee8 <__multadd+0x74>
 8007eb4:	6861      	ldr	r1, [r4, #4]
 8007eb6:	4638      	mov	r0, r7
 8007eb8:	3101      	adds	r1, #1
 8007eba:	f7ff ff79 	bl	8007db0 <_Balloc>
 8007ebe:	4680      	mov	r8, r0
 8007ec0:	b928      	cbnz	r0, 8007ece <__multadd+0x5a>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8007ef8 <__multadd+0x84>)
 8007ec6:	480d      	ldr	r0, [pc, #52]	@ (8007efc <__multadd+0x88>)
 8007ec8:	21ba      	movs	r1, #186	@ 0xba
 8007eca:	f000 fd8b 	bl	80089e4 <__assert_func>
 8007ece:	6922      	ldr	r2, [r4, #16]
 8007ed0:	3202      	adds	r2, #2
 8007ed2:	f104 010c 	add.w	r1, r4, #12
 8007ed6:	0092      	lsls	r2, r2, #2
 8007ed8:	300c      	adds	r0, #12
 8007eda:	f000 fd75 	bl	80089c8 <memcpy>
 8007ede:	4621      	mov	r1, r4
 8007ee0:	4638      	mov	r0, r7
 8007ee2:	f7ff ffa5 	bl	8007e30 <_Bfree>
 8007ee6:	4644      	mov	r4, r8
 8007ee8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007eec:	3501      	adds	r5, #1
 8007eee:	615e      	str	r6, [r3, #20]
 8007ef0:	6125      	str	r5, [r4, #16]
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ef8:	08008d5c 	.word	0x08008d5c
 8007efc:	08008d6d 	.word	0x08008d6d

08007f00 <__hi0bits>:
 8007f00:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007f04:	4603      	mov	r3, r0
 8007f06:	bf36      	itet	cc
 8007f08:	0403      	lslcc	r3, r0, #16
 8007f0a:	2000      	movcs	r0, #0
 8007f0c:	2010      	movcc	r0, #16
 8007f0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f12:	bf3c      	itt	cc
 8007f14:	021b      	lslcc	r3, r3, #8
 8007f16:	3008      	addcc	r0, #8
 8007f18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f1c:	bf3c      	itt	cc
 8007f1e:	011b      	lslcc	r3, r3, #4
 8007f20:	3004      	addcc	r0, #4
 8007f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f26:	bf3c      	itt	cc
 8007f28:	009b      	lslcc	r3, r3, #2
 8007f2a:	3002      	addcc	r0, #2
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	db05      	blt.n	8007f3c <__hi0bits+0x3c>
 8007f30:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007f34:	f100 0001 	add.w	r0, r0, #1
 8007f38:	bf08      	it	eq
 8007f3a:	2020      	moveq	r0, #32
 8007f3c:	4770      	bx	lr

08007f3e <__lo0bits>:
 8007f3e:	6803      	ldr	r3, [r0, #0]
 8007f40:	4602      	mov	r2, r0
 8007f42:	f013 0007 	ands.w	r0, r3, #7
 8007f46:	d00b      	beq.n	8007f60 <__lo0bits+0x22>
 8007f48:	07d9      	lsls	r1, r3, #31
 8007f4a:	d421      	bmi.n	8007f90 <__lo0bits+0x52>
 8007f4c:	0798      	lsls	r0, r3, #30
 8007f4e:	bf49      	itett	mi
 8007f50:	085b      	lsrmi	r3, r3, #1
 8007f52:	089b      	lsrpl	r3, r3, #2
 8007f54:	2001      	movmi	r0, #1
 8007f56:	6013      	strmi	r3, [r2, #0]
 8007f58:	bf5c      	itt	pl
 8007f5a:	6013      	strpl	r3, [r2, #0]
 8007f5c:	2002      	movpl	r0, #2
 8007f5e:	4770      	bx	lr
 8007f60:	b299      	uxth	r1, r3
 8007f62:	b909      	cbnz	r1, 8007f68 <__lo0bits+0x2a>
 8007f64:	0c1b      	lsrs	r3, r3, #16
 8007f66:	2010      	movs	r0, #16
 8007f68:	b2d9      	uxtb	r1, r3
 8007f6a:	b909      	cbnz	r1, 8007f70 <__lo0bits+0x32>
 8007f6c:	3008      	adds	r0, #8
 8007f6e:	0a1b      	lsrs	r3, r3, #8
 8007f70:	0719      	lsls	r1, r3, #28
 8007f72:	bf04      	itt	eq
 8007f74:	091b      	lsreq	r3, r3, #4
 8007f76:	3004      	addeq	r0, #4
 8007f78:	0799      	lsls	r1, r3, #30
 8007f7a:	bf04      	itt	eq
 8007f7c:	089b      	lsreq	r3, r3, #2
 8007f7e:	3002      	addeq	r0, #2
 8007f80:	07d9      	lsls	r1, r3, #31
 8007f82:	d403      	bmi.n	8007f8c <__lo0bits+0x4e>
 8007f84:	085b      	lsrs	r3, r3, #1
 8007f86:	f100 0001 	add.w	r0, r0, #1
 8007f8a:	d003      	beq.n	8007f94 <__lo0bits+0x56>
 8007f8c:	6013      	str	r3, [r2, #0]
 8007f8e:	4770      	bx	lr
 8007f90:	2000      	movs	r0, #0
 8007f92:	4770      	bx	lr
 8007f94:	2020      	movs	r0, #32
 8007f96:	4770      	bx	lr

08007f98 <__i2b>:
 8007f98:	b510      	push	{r4, lr}
 8007f9a:	460c      	mov	r4, r1
 8007f9c:	2101      	movs	r1, #1
 8007f9e:	f7ff ff07 	bl	8007db0 <_Balloc>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	b928      	cbnz	r0, 8007fb2 <__i2b+0x1a>
 8007fa6:	4b05      	ldr	r3, [pc, #20]	@ (8007fbc <__i2b+0x24>)
 8007fa8:	4805      	ldr	r0, [pc, #20]	@ (8007fc0 <__i2b+0x28>)
 8007faa:	f240 1145 	movw	r1, #325	@ 0x145
 8007fae:	f000 fd19 	bl	80089e4 <__assert_func>
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	6144      	str	r4, [r0, #20]
 8007fb6:	6103      	str	r3, [r0, #16]
 8007fb8:	bd10      	pop	{r4, pc}
 8007fba:	bf00      	nop
 8007fbc:	08008d5c 	.word	0x08008d5c
 8007fc0:	08008d6d 	.word	0x08008d6d

08007fc4 <__multiply>:
 8007fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc8:	4617      	mov	r7, r2
 8007fca:	690a      	ldr	r2, [r1, #16]
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	bfa8      	it	ge
 8007fd2:	463b      	movge	r3, r7
 8007fd4:	4689      	mov	r9, r1
 8007fd6:	bfa4      	itt	ge
 8007fd8:	460f      	movge	r7, r1
 8007fda:	4699      	movge	r9, r3
 8007fdc:	693d      	ldr	r5, [r7, #16]
 8007fde:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	6879      	ldr	r1, [r7, #4]
 8007fe6:	eb05 060a 	add.w	r6, r5, sl
 8007fea:	42b3      	cmp	r3, r6
 8007fec:	b085      	sub	sp, #20
 8007fee:	bfb8      	it	lt
 8007ff0:	3101      	addlt	r1, #1
 8007ff2:	f7ff fedd 	bl	8007db0 <_Balloc>
 8007ff6:	b930      	cbnz	r0, 8008006 <__multiply+0x42>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	4b41      	ldr	r3, [pc, #260]	@ (8008100 <__multiply+0x13c>)
 8007ffc:	4841      	ldr	r0, [pc, #260]	@ (8008104 <__multiply+0x140>)
 8007ffe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008002:	f000 fcef 	bl	80089e4 <__assert_func>
 8008006:	f100 0414 	add.w	r4, r0, #20
 800800a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800800e:	4623      	mov	r3, r4
 8008010:	2200      	movs	r2, #0
 8008012:	4573      	cmp	r3, lr
 8008014:	d320      	bcc.n	8008058 <__multiply+0x94>
 8008016:	f107 0814 	add.w	r8, r7, #20
 800801a:	f109 0114 	add.w	r1, r9, #20
 800801e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008022:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008026:	9302      	str	r3, [sp, #8]
 8008028:	1beb      	subs	r3, r5, r7
 800802a:	3b15      	subs	r3, #21
 800802c:	f023 0303 	bic.w	r3, r3, #3
 8008030:	3304      	adds	r3, #4
 8008032:	3715      	adds	r7, #21
 8008034:	42bd      	cmp	r5, r7
 8008036:	bf38      	it	cc
 8008038:	2304      	movcc	r3, #4
 800803a:	9301      	str	r3, [sp, #4]
 800803c:	9b02      	ldr	r3, [sp, #8]
 800803e:	9103      	str	r1, [sp, #12]
 8008040:	428b      	cmp	r3, r1
 8008042:	d80c      	bhi.n	800805e <__multiply+0x9a>
 8008044:	2e00      	cmp	r6, #0
 8008046:	dd03      	ble.n	8008050 <__multiply+0x8c>
 8008048:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800804c:	2b00      	cmp	r3, #0
 800804e:	d055      	beq.n	80080fc <__multiply+0x138>
 8008050:	6106      	str	r6, [r0, #16]
 8008052:	b005      	add	sp, #20
 8008054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008058:	f843 2b04 	str.w	r2, [r3], #4
 800805c:	e7d9      	b.n	8008012 <__multiply+0x4e>
 800805e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008062:	f1ba 0f00 	cmp.w	sl, #0
 8008066:	d01f      	beq.n	80080a8 <__multiply+0xe4>
 8008068:	46c4      	mov	ip, r8
 800806a:	46a1      	mov	r9, r4
 800806c:	2700      	movs	r7, #0
 800806e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008072:	f8d9 3000 	ldr.w	r3, [r9]
 8008076:	fa1f fb82 	uxth.w	fp, r2
 800807a:	b29b      	uxth	r3, r3
 800807c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008080:	443b      	add	r3, r7
 8008082:	f8d9 7000 	ldr.w	r7, [r9]
 8008086:	0c12      	lsrs	r2, r2, #16
 8008088:	0c3f      	lsrs	r7, r7, #16
 800808a:	fb0a 7202 	mla	r2, sl, r2, r7
 800808e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008092:	b29b      	uxth	r3, r3
 8008094:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008098:	4565      	cmp	r5, ip
 800809a:	f849 3b04 	str.w	r3, [r9], #4
 800809e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80080a2:	d8e4      	bhi.n	800806e <__multiply+0xaa>
 80080a4:	9b01      	ldr	r3, [sp, #4]
 80080a6:	50e7      	str	r7, [r4, r3]
 80080a8:	9b03      	ldr	r3, [sp, #12]
 80080aa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80080ae:	3104      	adds	r1, #4
 80080b0:	f1b9 0f00 	cmp.w	r9, #0
 80080b4:	d020      	beq.n	80080f8 <__multiply+0x134>
 80080b6:	6823      	ldr	r3, [r4, #0]
 80080b8:	4647      	mov	r7, r8
 80080ba:	46a4      	mov	ip, r4
 80080bc:	f04f 0a00 	mov.w	sl, #0
 80080c0:	f8b7 b000 	ldrh.w	fp, [r7]
 80080c4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80080c8:	fb09 220b 	mla	r2, r9, fp, r2
 80080cc:	4452      	add	r2, sl
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080d4:	f84c 3b04 	str.w	r3, [ip], #4
 80080d8:	f857 3b04 	ldr.w	r3, [r7], #4
 80080dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80080e0:	f8bc 3000 	ldrh.w	r3, [ip]
 80080e4:	fb09 330a 	mla	r3, r9, sl, r3
 80080e8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80080ec:	42bd      	cmp	r5, r7
 80080ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80080f2:	d8e5      	bhi.n	80080c0 <__multiply+0xfc>
 80080f4:	9a01      	ldr	r2, [sp, #4]
 80080f6:	50a3      	str	r3, [r4, r2]
 80080f8:	3404      	adds	r4, #4
 80080fa:	e79f      	b.n	800803c <__multiply+0x78>
 80080fc:	3e01      	subs	r6, #1
 80080fe:	e7a1      	b.n	8008044 <__multiply+0x80>
 8008100:	08008d5c 	.word	0x08008d5c
 8008104:	08008d6d 	.word	0x08008d6d

08008108 <__pow5mult>:
 8008108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800810c:	4615      	mov	r5, r2
 800810e:	f012 0203 	ands.w	r2, r2, #3
 8008112:	4607      	mov	r7, r0
 8008114:	460e      	mov	r6, r1
 8008116:	d007      	beq.n	8008128 <__pow5mult+0x20>
 8008118:	4c25      	ldr	r4, [pc, #148]	@ (80081b0 <__pow5mult+0xa8>)
 800811a:	3a01      	subs	r2, #1
 800811c:	2300      	movs	r3, #0
 800811e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008122:	f7ff fea7 	bl	8007e74 <__multadd>
 8008126:	4606      	mov	r6, r0
 8008128:	10ad      	asrs	r5, r5, #2
 800812a:	d03d      	beq.n	80081a8 <__pow5mult+0xa0>
 800812c:	69fc      	ldr	r4, [r7, #28]
 800812e:	b97c      	cbnz	r4, 8008150 <__pow5mult+0x48>
 8008130:	2010      	movs	r0, #16
 8008132:	f7ff fd87 	bl	8007c44 <malloc>
 8008136:	4602      	mov	r2, r0
 8008138:	61f8      	str	r0, [r7, #28]
 800813a:	b928      	cbnz	r0, 8008148 <__pow5mult+0x40>
 800813c:	4b1d      	ldr	r3, [pc, #116]	@ (80081b4 <__pow5mult+0xac>)
 800813e:	481e      	ldr	r0, [pc, #120]	@ (80081b8 <__pow5mult+0xb0>)
 8008140:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008144:	f000 fc4e 	bl	80089e4 <__assert_func>
 8008148:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800814c:	6004      	str	r4, [r0, #0]
 800814e:	60c4      	str	r4, [r0, #12]
 8008150:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008154:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008158:	b94c      	cbnz	r4, 800816e <__pow5mult+0x66>
 800815a:	f240 2171 	movw	r1, #625	@ 0x271
 800815e:	4638      	mov	r0, r7
 8008160:	f7ff ff1a 	bl	8007f98 <__i2b>
 8008164:	2300      	movs	r3, #0
 8008166:	f8c8 0008 	str.w	r0, [r8, #8]
 800816a:	4604      	mov	r4, r0
 800816c:	6003      	str	r3, [r0, #0]
 800816e:	f04f 0900 	mov.w	r9, #0
 8008172:	07eb      	lsls	r3, r5, #31
 8008174:	d50a      	bpl.n	800818c <__pow5mult+0x84>
 8008176:	4631      	mov	r1, r6
 8008178:	4622      	mov	r2, r4
 800817a:	4638      	mov	r0, r7
 800817c:	f7ff ff22 	bl	8007fc4 <__multiply>
 8008180:	4631      	mov	r1, r6
 8008182:	4680      	mov	r8, r0
 8008184:	4638      	mov	r0, r7
 8008186:	f7ff fe53 	bl	8007e30 <_Bfree>
 800818a:	4646      	mov	r6, r8
 800818c:	106d      	asrs	r5, r5, #1
 800818e:	d00b      	beq.n	80081a8 <__pow5mult+0xa0>
 8008190:	6820      	ldr	r0, [r4, #0]
 8008192:	b938      	cbnz	r0, 80081a4 <__pow5mult+0x9c>
 8008194:	4622      	mov	r2, r4
 8008196:	4621      	mov	r1, r4
 8008198:	4638      	mov	r0, r7
 800819a:	f7ff ff13 	bl	8007fc4 <__multiply>
 800819e:	6020      	str	r0, [r4, #0]
 80081a0:	f8c0 9000 	str.w	r9, [r0]
 80081a4:	4604      	mov	r4, r0
 80081a6:	e7e4      	b.n	8008172 <__pow5mult+0x6a>
 80081a8:	4630      	mov	r0, r6
 80081aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081ae:	bf00      	nop
 80081b0:	08008e20 	.word	0x08008e20
 80081b4:	08008ced 	.word	0x08008ced
 80081b8:	08008d6d 	.word	0x08008d6d

080081bc <__lshift>:
 80081bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081c0:	460c      	mov	r4, r1
 80081c2:	6849      	ldr	r1, [r1, #4]
 80081c4:	6923      	ldr	r3, [r4, #16]
 80081c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80081ca:	68a3      	ldr	r3, [r4, #8]
 80081cc:	4607      	mov	r7, r0
 80081ce:	4691      	mov	r9, r2
 80081d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80081d4:	f108 0601 	add.w	r6, r8, #1
 80081d8:	42b3      	cmp	r3, r6
 80081da:	db0b      	blt.n	80081f4 <__lshift+0x38>
 80081dc:	4638      	mov	r0, r7
 80081de:	f7ff fde7 	bl	8007db0 <_Balloc>
 80081e2:	4605      	mov	r5, r0
 80081e4:	b948      	cbnz	r0, 80081fa <__lshift+0x3e>
 80081e6:	4602      	mov	r2, r0
 80081e8:	4b28      	ldr	r3, [pc, #160]	@ (800828c <__lshift+0xd0>)
 80081ea:	4829      	ldr	r0, [pc, #164]	@ (8008290 <__lshift+0xd4>)
 80081ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80081f0:	f000 fbf8 	bl	80089e4 <__assert_func>
 80081f4:	3101      	adds	r1, #1
 80081f6:	005b      	lsls	r3, r3, #1
 80081f8:	e7ee      	b.n	80081d8 <__lshift+0x1c>
 80081fa:	2300      	movs	r3, #0
 80081fc:	f100 0114 	add.w	r1, r0, #20
 8008200:	f100 0210 	add.w	r2, r0, #16
 8008204:	4618      	mov	r0, r3
 8008206:	4553      	cmp	r3, sl
 8008208:	db33      	blt.n	8008272 <__lshift+0xb6>
 800820a:	6920      	ldr	r0, [r4, #16]
 800820c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008210:	f104 0314 	add.w	r3, r4, #20
 8008214:	f019 091f 	ands.w	r9, r9, #31
 8008218:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800821c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008220:	d02b      	beq.n	800827a <__lshift+0xbe>
 8008222:	f1c9 0e20 	rsb	lr, r9, #32
 8008226:	468a      	mov	sl, r1
 8008228:	2200      	movs	r2, #0
 800822a:	6818      	ldr	r0, [r3, #0]
 800822c:	fa00 f009 	lsl.w	r0, r0, r9
 8008230:	4310      	orrs	r0, r2
 8008232:	f84a 0b04 	str.w	r0, [sl], #4
 8008236:	f853 2b04 	ldr.w	r2, [r3], #4
 800823a:	459c      	cmp	ip, r3
 800823c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008240:	d8f3      	bhi.n	800822a <__lshift+0x6e>
 8008242:	ebac 0304 	sub.w	r3, ip, r4
 8008246:	3b15      	subs	r3, #21
 8008248:	f023 0303 	bic.w	r3, r3, #3
 800824c:	3304      	adds	r3, #4
 800824e:	f104 0015 	add.w	r0, r4, #21
 8008252:	4560      	cmp	r0, ip
 8008254:	bf88      	it	hi
 8008256:	2304      	movhi	r3, #4
 8008258:	50ca      	str	r2, [r1, r3]
 800825a:	b10a      	cbz	r2, 8008260 <__lshift+0xa4>
 800825c:	f108 0602 	add.w	r6, r8, #2
 8008260:	3e01      	subs	r6, #1
 8008262:	4638      	mov	r0, r7
 8008264:	612e      	str	r6, [r5, #16]
 8008266:	4621      	mov	r1, r4
 8008268:	f7ff fde2 	bl	8007e30 <_Bfree>
 800826c:	4628      	mov	r0, r5
 800826e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008272:	f842 0f04 	str.w	r0, [r2, #4]!
 8008276:	3301      	adds	r3, #1
 8008278:	e7c5      	b.n	8008206 <__lshift+0x4a>
 800827a:	3904      	subs	r1, #4
 800827c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008280:	f841 2f04 	str.w	r2, [r1, #4]!
 8008284:	459c      	cmp	ip, r3
 8008286:	d8f9      	bhi.n	800827c <__lshift+0xc0>
 8008288:	e7ea      	b.n	8008260 <__lshift+0xa4>
 800828a:	bf00      	nop
 800828c:	08008d5c 	.word	0x08008d5c
 8008290:	08008d6d 	.word	0x08008d6d

08008294 <__mcmp>:
 8008294:	690a      	ldr	r2, [r1, #16]
 8008296:	4603      	mov	r3, r0
 8008298:	6900      	ldr	r0, [r0, #16]
 800829a:	1a80      	subs	r0, r0, r2
 800829c:	b530      	push	{r4, r5, lr}
 800829e:	d10e      	bne.n	80082be <__mcmp+0x2a>
 80082a0:	3314      	adds	r3, #20
 80082a2:	3114      	adds	r1, #20
 80082a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80082a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80082ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80082b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80082b4:	4295      	cmp	r5, r2
 80082b6:	d003      	beq.n	80082c0 <__mcmp+0x2c>
 80082b8:	d205      	bcs.n	80082c6 <__mcmp+0x32>
 80082ba:	f04f 30ff 	mov.w	r0, #4294967295
 80082be:	bd30      	pop	{r4, r5, pc}
 80082c0:	42a3      	cmp	r3, r4
 80082c2:	d3f3      	bcc.n	80082ac <__mcmp+0x18>
 80082c4:	e7fb      	b.n	80082be <__mcmp+0x2a>
 80082c6:	2001      	movs	r0, #1
 80082c8:	e7f9      	b.n	80082be <__mcmp+0x2a>
	...

080082cc <__mdiff>:
 80082cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d0:	4689      	mov	r9, r1
 80082d2:	4606      	mov	r6, r0
 80082d4:	4611      	mov	r1, r2
 80082d6:	4648      	mov	r0, r9
 80082d8:	4614      	mov	r4, r2
 80082da:	f7ff ffdb 	bl	8008294 <__mcmp>
 80082de:	1e05      	subs	r5, r0, #0
 80082e0:	d112      	bne.n	8008308 <__mdiff+0x3c>
 80082e2:	4629      	mov	r1, r5
 80082e4:	4630      	mov	r0, r6
 80082e6:	f7ff fd63 	bl	8007db0 <_Balloc>
 80082ea:	4602      	mov	r2, r0
 80082ec:	b928      	cbnz	r0, 80082fa <__mdiff+0x2e>
 80082ee:	4b3f      	ldr	r3, [pc, #252]	@ (80083ec <__mdiff+0x120>)
 80082f0:	f240 2137 	movw	r1, #567	@ 0x237
 80082f4:	483e      	ldr	r0, [pc, #248]	@ (80083f0 <__mdiff+0x124>)
 80082f6:	f000 fb75 	bl	80089e4 <__assert_func>
 80082fa:	2301      	movs	r3, #1
 80082fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008300:	4610      	mov	r0, r2
 8008302:	b003      	add	sp, #12
 8008304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008308:	bfbc      	itt	lt
 800830a:	464b      	movlt	r3, r9
 800830c:	46a1      	movlt	r9, r4
 800830e:	4630      	mov	r0, r6
 8008310:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008314:	bfba      	itte	lt
 8008316:	461c      	movlt	r4, r3
 8008318:	2501      	movlt	r5, #1
 800831a:	2500      	movge	r5, #0
 800831c:	f7ff fd48 	bl	8007db0 <_Balloc>
 8008320:	4602      	mov	r2, r0
 8008322:	b918      	cbnz	r0, 800832c <__mdiff+0x60>
 8008324:	4b31      	ldr	r3, [pc, #196]	@ (80083ec <__mdiff+0x120>)
 8008326:	f240 2145 	movw	r1, #581	@ 0x245
 800832a:	e7e3      	b.n	80082f4 <__mdiff+0x28>
 800832c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008330:	6926      	ldr	r6, [r4, #16]
 8008332:	60c5      	str	r5, [r0, #12]
 8008334:	f109 0310 	add.w	r3, r9, #16
 8008338:	f109 0514 	add.w	r5, r9, #20
 800833c:	f104 0e14 	add.w	lr, r4, #20
 8008340:	f100 0b14 	add.w	fp, r0, #20
 8008344:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008348:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800834c:	9301      	str	r3, [sp, #4]
 800834e:	46d9      	mov	r9, fp
 8008350:	f04f 0c00 	mov.w	ip, #0
 8008354:	9b01      	ldr	r3, [sp, #4]
 8008356:	f85e 0b04 	ldr.w	r0, [lr], #4
 800835a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800835e:	9301      	str	r3, [sp, #4]
 8008360:	fa1f f38a 	uxth.w	r3, sl
 8008364:	4619      	mov	r1, r3
 8008366:	b283      	uxth	r3, r0
 8008368:	1acb      	subs	r3, r1, r3
 800836a:	0c00      	lsrs	r0, r0, #16
 800836c:	4463      	add	r3, ip
 800836e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008372:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008376:	b29b      	uxth	r3, r3
 8008378:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800837c:	4576      	cmp	r6, lr
 800837e:	f849 3b04 	str.w	r3, [r9], #4
 8008382:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008386:	d8e5      	bhi.n	8008354 <__mdiff+0x88>
 8008388:	1b33      	subs	r3, r6, r4
 800838a:	3b15      	subs	r3, #21
 800838c:	f023 0303 	bic.w	r3, r3, #3
 8008390:	3415      	adds	r4, #21
 8008392:	3304      	adds	r3, #4
 8008394:	42a6      	cmp	r6, r4
 8008396:	bf38      	it	cc
 8008398:	2304      	movcc	r3, #4
 800839a:	441d      	add	r5, r3
 800839c:	445b      	add	r3, fp
 800839e:	461e      	mov	r6, r3
 80083a0:	462c      	mov	r4, r5
 80083a2:	4544      	cmp	r4, r8
 80083a4:	d30e      	bcc.n	80083c4 <__mdiff+0xf8>
 80083a6:	f108 0103 	add.w	r1, r8, #3
 80083aa:	1b49      	subs	r1, r1, r5
 80083ac:	f021 0103 	bic.w	r1, r1, #3
 80083b0:	3d03      	subs	r5, #3
 80083b2:	45a8      	cmp	r8, r5
 80083b4:	bf38      	it	cc
 80083b6:	2100      	movcc	r1, #0
 80083b8:	440b      	add	r3, r1
 80083ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80083be:	b191      	cbz	r1, 80083e6 <__mdiff+0x11a>
 80083c0:	6117      	str	r7, [r2, #16]
 80083c2:	e79d      	b.n	8008300 <__mdiff+0x34>
 80083c4:	f854 1b04 	ldr.w	r1, [r4], #4
 80083c8:	46e6      	mov	lr, ip
 80083ca:	0c08      	lsrs	r0, r1, #16
 80083cc:	fa1c fc81 	uxtah	ip, ip, r1
 80083d0:	4471      	add	r1, lr
 80083d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80083d6:	b289      	uxth	r1, r1
 80083d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80083dc:	f846 1b04 	str.w	r1, [r6], #4
 80083e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80083e4:	e7dd      	b.n	80083a2 <__mdiff+0xd6>
 80083e6:	3f01      	subs	r7, #1
 80083e8:	e7e7      	b.n	80083ba <__mdiff+0xee>
 80083ea:	bf00      	nop
 80083ec:	08008d5c 	.word	0x08008d5c
 80083f0:	08008d6d 	.word	0x08008d6d

080083f4 <__d2b>:
 80083f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80083f8:	460f      	mov	r7, r1
 80083fa:	2101      	movs	r1, #1
 80083fc:	ec59 8b10 	vmov	r8, r9, d0
 8008400:	4616      	mov	r6, r2
 8008402:	f7ff fcd5 	bl	8007db0 <_Balloc>
 8008406:	4604      	mov	r4, r0
 8008408:	b930      	cbnz	r0, 8008418 <__d2b+0x24>
 800840a:	4602      	mov	r2, r0
 800840c:	4b23      	ldr	r3, [pc, #140]	@ (800849c <__d2b+0xa8>)
 800840e:	4824      	ldr	r0, [pc, #144]	@ (80084a0 <__d2b+0xac>)
 8008410:	f240 310f 	movw	r1, #783	@ 0x30f
 8008414:	f000 fae6 	bl	80089e4 <__assert_func>
 8008418:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800841c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008420:	b10d      	cbz	r5, 8008426 <__d2b+0x32>
 8008422:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008426:	9301      	str	r3, [sp, #4]
 8008428:	f1b8 0300 	subs.w	r3, r8, #0
 800842c:	d023      	beq.n	8008476 <__d2b+0x82>
 800842e:	4668      	mov	r0, sp
 8008430:	9300      	str	r3, [sp, #0]
 8008432:	f7ff fd84 	bl	8007f3e <__lo0bits>
 8008436:	e9dd 1200 	ldrd	r1, r2, [sp]
 800843a:	b1d0      	cbz	r0, 8008472 <__d2b+0x7e>
 800843c:	f1c0 0320 	rsb	r3, r0, #32
 8008440:	fa02 f303 	lsl.w	r3, r2, r3
 8008444:	430b      	orrs	r3, r1
 8008446:	40c2      	lsrs	r2, r0
 8008448:	6163      	str	r3, [r4, #20]
 800844a:	9201      	str	r2, [sp, #4]
 800844c:	9b01      	ldr	r3, [sp, #4]
 800844e:	61a3      	str	r3, [r4, #24]
 8008450:	2b00      	cmp	r3, #0
 8008452:	bf0c      	ite	eq
 8008454:	2201      	moveq	r2, #1
 8008456:	2202      	movne	r2, #2
 8008458:	6122      	str	r2, [r4, #16]
 800845a:	b1a5      	cbz	r5, 8008486 <__d2b+0x92>
 800845c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008460:	4405      	add	r5, r0
 8008462:	603d      	str	r5, [r7, #0]
 8008464:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008468:	6030      	str	r0, [r6, #0]
 800846a:	4620      	mov	r0, r4
 800846c:	b003      	add	sp, #12
 800846e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008472:	6161      	str	r1, [r4, #20]
 8008474:	e7ea      	b.n	800844c <__d2b+0x58>
 8008476:	a801      	add	r0, sp, #4
 8008478:	f7ff fd61 	bl	8007f3e <__lo0bits>
 800847c:	9b01      	ldr	r3, [sp, #4]
 800847e:	6163      	str	r3, [r4, #20]
 8008480:	3020      	adds	r0, #32
 8008482:	2201      	movs	r2, #1
 8008484:	e7e8      	b.n	8008458 <__d2b+0x64>
 8008486:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800848a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800848e:	6038      	str	r0, [r7, #0]
 8008490:	6918      	ldr	r0, [r3, #16]
 8008492:	f7ff fd35 	bl	8007f00 <__hi0bits>
 8008496:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800849a:	e7e5      	b.n	8008468 <__d2b+0x74>
 800849c:	08008d5c 	.word	0x08008d5c
 80084a0:	08008d6d 	.word	0x08008d6d

080084a4 <__sfputc_r>:
 80084a4:	6893      	ldr	r3, [r2, #8]
 80084a6:	3b01      	subs	r3, #1
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	b410      	push	{r4}
 80084ac:	6093      	str	r3, [r2, #8]
 80084ae:	da08      	bge.n	80084c2 <__sfputc_r+0x1e>
 80084b0:	6994      	ldr	r4, [r2, #24]
 80084b2:	42a3      	cmp	r3, r4
 80084b4:	db01      	blt.n	80084ba <__sfputc_r+0x16>
 80084b6:	290a      	cmp	r1, #10
 80084b8:	d103      	bne.n	80084c2 <__sfputc_r+0x1e>
 80084ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084be:	f000 b9df 	b.w	8008880 <__swbuf_r>
 80084c2:	6813      	ldr	r3, [r2, #0]
 80084c4:	1c58      	adds	r0, r3, #1
 80084c6:	6010      	str	r0, [r2, #0]
 80084c8:	7019      	strb	r1, [r3, #0]
 80084ca:	4608      	mov	r0, r1
 80084cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084d0:	4770      	bx	lr

080084d2 <__sfputs_r>:
 80084d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084d4:	4606      	mov	r6, r0
 80084d6:	460f      	mov	r7, r1
 80084d8:	4614      	mov	r4, r2
 80084da:	18d5      	adds	r5, r2, r3
 80084dc:	42ac      	cmp	r4, r5
 80084de:	d101      	bne.n	80084e4 <__sfputs_r+0x12>
 80084e0:	2000      	movs	r0, #0
 80084e2:	e007      	b.n	80084f4 <__sfputs_r+0x22>
 80084e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084e8:	463a      	mov	r2, r7
 80084ea:	4630      	mov	r0, r6
 80084ec:	f7ff ffda 	bl	80084a4 <__sfputc_r>
 80084f0:	1c43      	adds	r3, r0, #1
 80084f2:	d1f3      	bne.n	80084dc <__sfputs_r+0xa>
 80084f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080084f8 <_vfiprintf_r>:
 80084f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084fc:	460d      	mov	r5, r1
 80084fe:	b09d      	sub	sp, #116	@ 0x74
 8008500:	4614      	mov	r4, r2
 8008502:	4698      	mov	r8, r3
 8008504:	4606      	mov	r6, r0
 8008506:	b118      	cbz	r0, 8008510 <_vfiprintf_r+0x18>
 8008508:	6a03      	ldr	r3, [r0, #32]
 800850a:	b90b      	cbnz	r3, 8008510 <_vfiprintf_r+0x18>
 800850c:	f7fe fbea 	bl	8006ce4 <__sinit>
 8008510:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008512:	07d9      	lsls	r1, r3, #31
 8008514:	d405      	bmi.n	8008522 <_vfiprintf_r+0x2a>
 8008516:	89ab      	ldrh	r3, [r5, #12]
 8008518:	059a      	lsls	r2, r3, #22
 800851a:	d402      	bmi.n	8008522 <_vfiprintf_r+0x2a>
 800851c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800851e:	f7fe fcea 	bl	8006ef6 <__retarget_lock_acquire_recursive>
 8008522:	89ab      	ldrh	r3, [r5, #12]
 8008524:	071b      	lsls	r3, r3, #28
 8008526:	d501      	bpl.n	800852c <_vfiprintf_r+0x34>
 8008528:	692b      	ldr	r3, [r5, #16]
 800852a:	b99b      	cbnz	r3, 8008554 <_vfiprintf_r+0x5c>
 800852c:	4629      	mov	r1, r5
 800852e:	4630      	mov	r0, r6
 8008530:	f000 f9e4 	bl	80088fc <__swsetup_r>
 8008534:	b170      	cbz	r0, 8008554 <_vfiprintf_r+0x5c>
 8008536:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008538:	07dc      	lsls	r4, r3, #31
 800853a:	d504      	bpl.n	8008546 <_vfiprintf_r+0x4e>
 800853c:	f04f 30ff 	mov.w	r0, #4294967295
 8008540:	b01d      	add	sp, #116	@ 0x74
 8008542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008546:	89ab      	ldrh	r3, [r5, #12]
 8008548:	0598      	lsls	r0, r3, #22
 800854a:	d4f7      	bmi.n	800853c <_vfiprintf_r+0x44>
 800854c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800854e:	f7fe fcd3 	bl	8006ef8 <__retarget_lock_release_recursive>
 8008552:	e7f3      	b.n	800853c <_vfiprintf_r+0x44>
 8008554:	2300      	movs	r3, #0
 8008556:	9309      	str	r3, [sp, #36]	@ 0x24
 8008558:	2320      	movs	r3, #32
 800855a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800855e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008562:	2330      	movs	r3, #48	@ 0x30
 8008564:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008714 <_vfiprintf_r+0x21c>
 8008568:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800856c:	f04f 0901 	mov.w	r9, #1
 8008570:	4623      	mov	r3, r4
 8008572:	469a      	mov	sl, r3
 8008574:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008578:	b10a      	cbz	r2, 800857e <_vfiprintf_r+0x86>
 800857a:	2a25      	cmp	r2, #37	@ 0x25
 800857c:	d1f9      	bne.n	8008572 <_vfiprintf_r+0x7a>
 800857e:	ebba 0b04 	subs.w	fp, sl, r4
 8008582:	d00b      	beq.n	800859c <_vfiprintf_r+0xa4>
 8008584:	465b      	mov	r3, fp
 8008586:	4622      	mov	r2, r4
 8008588:	4629      	mov	r1, r5
 800858a:	4630      	mov	r0, r6
 800858c:	f7ff ffa1 	bl	80084d2 <__sfputs_r>
 8008590:	3001      	adds	r0, #1
 8008592:	f000 80a7 	beq.w	80086e4 <_vfiprintf_r+0x1ec>
 8008596:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008598:	445a      	add	r2, fp
 800859a:	9209      	str	r2, [sp, #36]	@ 0x24
 800859c:	f89a 3000 	ldrb.w	r3, [sl]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f000 809f 	beq.w	80086e4 <_vfiprintf_r+0x1ec>
 80085a6:	2300      	movs	r3, #0
 80085a8:	f04f 32ff 	mov.w	r2, #4294967295
 80085ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085b0:	f10a 0a01 	add.w	sl, sl, #1
 80085b4:	9304      	str	r3, [sp, #16]
 80085b6:	9307      	str	r3, [sp, #28]
 80085b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80085bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80085be:	4654      	mov	r4, sl
 80085c0:	2205      	movs	r2, #5
 80085c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085c6:	4853      	ldr	r0, [pc, #332]	@ (8008714 <_vfiprintf_r+0x21c>)
 80085c8:	f7f7 fe0a 	bl	80001e0 <memchr>
 80085cc:	9a04      	ldr	r2, [sp, #16]
 80085ce:	b9d8      	cbnz	r0, 8008608 <_vfiprintf_r+0x110>
 80085d0:	06d1      	lsls	r1, r2, #27
 80085d2:	bf44      	itt	mi
 80085d4:	2320      	movmi	r3, #32
 80085d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085da:	0713      	lsls	r3, r2, #28
 80085dc:	bf44      	itt	mi
 80085de:	232b      	movmi	r3, #43	@ 0x2b
 80085e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085e4:	f89a 3000 	ldrb.w	r3, [sl]
 80085e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80085ea:	d015      	beq.n	8008618 <_vfiprintf_r+0x120>
 80085ec:	9a07      	ldr	r2, [sp, #28]
 80085ee:	4654      	mov	r4, sl
 80085f0:	2000      	movs	r0, #0
 80085f2:	f04f 0c0a 	mov.w	ip, #10
 80085f6:	4621      	mov	r1, r4
 80085f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085fc:	3b30      	subs	r3, #48	@ 0x30
 80085fe:	2b09      	cmp	r3, #9
 8008600:	d94b      	bls.n	800869a <_vfiprintf_r+0x1a2>
 8008602:	b1b0      	cbz	r0, 8008632 <_vfiprintf_r+0x13a>
 8008604:	9207      	str	r2, [sp, #28]
 8008606:	e014      	b.n	8008632 <_vfiprintf_r+0x13a>
 8008608:	eba0 0308 	sub.w	r3, r0, r8
 800860c:	fa09 f303 	lsl.w	r3, r9, r3
 8008610:	4313      	orrs	r3, r2
 8008612:	9304      	str	r3, [sp, #16]
 8008614:	46a2      	mov	sl, r4
 8008616:	e7d2      	b.n	80085be <_vfiprintf_r+0xc6>
 8008618:	9b03      	ldr	r3, [sp, #12]
 800861a:	1d19      	adds	r1, r3, #4
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	9103      	str	r1, [sp, #12]
 8008620:	2b00      	cmp	r3, #0
 8008622:	bfbb      	ittet	lt
 8008624:	425b      	neglt	r3, r3
 8008626:	f042 0202 	orrlt.w	r2, r2, #2
 800862a:	9307      	strge	r3, [sp, #28]
 800862c:	9307      	strlt	r3, [sp, #28]
 800862e:	bfb8      	it	lt
 8008630:	9204      	strlt	r2, [sp, #16]
 8008632:	7823      	ldrb	r3, [r4, #0]
 8008634:	2b2e      	cmp	r3, #46	@ 0x2e
 8008636:	d10a      	bne.n	800864e <_vfiprintf_r+0x156>
 8008638:	7863      	ldrb	r3, [r4, #1]
 800863a:	2b2a      	cmp	r3, #42	@ 0x2a
 800863c:	d132      	bne.n	80086a4 <_vfiprintf_r+0x1ac>
 800863e:	9b03      	ldr	r3, [sp, #12]
 8008640:	1d1a      	adds	r2, r3, #4
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	9203      	str	r2, [sp, #12]
 8008646:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800864a:	3402      	adds	r4, #2
 800864c:	9305      	str	r3, [sp, #20]
 800864e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008724 <_vfiprintf_r+0x22c>
 8008652:	7821      	ldrb	r1, [r4, #0]
 8008654:	2203      	movs	r2, #3
 8008656:	4650      	mov	r0, sl
 8008658:	f7f7 fdc2 	bl	80001e0 <memchr>
 800865c:	b138      	cbz	r0, 800866e <_vfiprintf_r+0x176>
 800865e:	9b04      	ldr	r3, [sp, #16]
 8008660:	eba0 000a 	sub.w	r0, r0, sl
 8008664:	2240      	movs	r2, #64	@ 0x40
 8008666:	4082      	lsls	r2, r0
 8008668:	4313      	orrs	r3, r2
 800866a:	3401      	adds	r4, #1
 800866c:	9304      	str	r3, [sp, #16]
 800866e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008672:	4829      	ldr	r0, [pc, #164]	@ (8008718 <_vfiprintf_r+0x220>)
 8008674:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008678:	2206      	movs	r2, #6
 800867a:	f7f7 fdb1 	bl	80001e0 <memchr>
 800867e:	2800      	cmp	r0, #0
 8008680:	d03f      	beq.n	8008702 <_vfiprintf_r+0x20a>
 8008682:	4b26      	ldr	r3, [pc, #152]	@ (800871c <_vfiprintf_r+0x224>)
 8008684:	bb1b      	cbnz	r3, 80086ce <_vfiprintf_r+0x1d6>
 8008686:	9b03      	ldr	r3, [sp, #12]
 8008688:	3307      	adds	r3, #7
 800868a:	f023 0307 	bic.w	r3, r3, #7
 800868e:	3308      	adds	r3, #8
 8008690:	9303      	str	r3, [sp, #12]
 8008692:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008694:	443b      	add	r3, r7
 8008696:	9309      	str	r3, [sp, #36]	@ 0x24
 8008698:	e76a      	b.n	8008570 <_vfiprintf_r+0x78>
 800869a:	fb0c 3202 	mla	r2, ip, r2, r3
 800869e:	460c      	mov	r4, r1
 80086a0:	2001      	movs	r0, #1
 80086a2:	e7a8      	b.n	80085f6 <_vfiprintf_r+0xfe>
 80086a4:	2300      	movs	r3, #0
 80086a6:	3401      	adds	r4, #1
 80086a8:	9305      	str	r3, [sp, #20]
 80086aa:	4619      	mov	r1, r3
 80086ac:	f04f 0c0a 	mov.w	ip, #10
 80086b0:	4620      	mov	r0, r4
 80086b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086b6:	3a30      	subs	r2, #48	@ 0x30
 80086b8:	2a09      	cmp	r2, #9
 80086ba:	d903      	bls.n	80086c4 <_vfiprintf_r+0x1cc>
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d0c6      	beq.n	800864e <_vfiprintf_r+0x156>
 80086c0:	9105      	str	r1, [sp, #20]
 80086c2:	e7c4      	b.n	800864e <_vfiprintf_r+0x156>
 80086c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80086c8:	4604      	mov	r4, r0
 80086ca:	2301      	movs	r3, #1
 80086cc:	e7f0      	b.n	80086b0 <_vfiprintf_r+0x1b8>
 80086ce:	ab03      	add	r3, sp, #12
 80086d0:	9300      	str	r3, [sp, #0]
 80086d2:	462a      	mov	r2, r5
 80086d4:	4b12      	ldr	r3, [pc, #72]	@ (8008720 <_vfiprintf_r+0x228>)
 80086d6:	a904      	add	r1, sp, #16
 80086d8:	4630      	mov	r0, r6
 80086da:	f7fd fec1 	bl	8006460 <_printf_float>
 80086de:	4607      	mov	r7, r0
 80086e0:	1c78      	adds	r0, r7, #1
 80086e2:	d1d6      	bne.n	8008692 <_vfiprintf_r+0x19a>
 80086e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086e6:	07d9      	lsls	r1, r3, #31
 80086e8:	d405      	bmi.n	80086f6 <_vfiprintf_r+0x1fe>
 80086ea:	89ab      	ldrh	r3, [r5, #12]
 80086ec:	059a      	lsls	r2, r3, #22
 80086ee:	d402      	bmi.n	80086f6 <_vfiprintf_r+0x1fe>
 80086f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80086f2:	f7fe fc01 	bl	8006ef8 <__retarget_lock_release_recursive>
 80086f6:	89ab      	ldrh	r3, [r5, #12]
 80086f8:	065b      	lsls	r3, r3, #25
 80086fa:	f53f af1f 	bmi.w	800853c <_vfiprintf_r+0x44>
 80086fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008700:	e71e      	b.n	8008540 <_vfiprintf_r+0x48>
 8008702:	ab03      	add	r3, sp, #12
 8008704:	9300      	str	r3, [sp, #0]
 8008706:	462a      	mov	r2, r5
 8008708:	4b05      	ldr	r3, [pc, #20]	@ (8008720 <_vfiprintf_r+0x228>)
 800870a:	a904      	add	r1, sp, #16
 800870c:	4630      	mov	r0, r6
 800870e:	f7fe f93f 	bl	8006990 <_printf_i>
 8008712:	e7e4      	b.n	80086de <_vfiprintf_r+0x1e6>
 8008714:	08008dc6 	.word	0x08008dc6
 8008718:	08008dd0 	.word	0x08008dd0
 800871c:	08006461 	.word	0x08006461
 8008720:	080084d3 	.word	0x080084d3
 8008724:	08008dcc 	.word	0x08008dcc

08008728 <__sflush_r>:
 8008728:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800872c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008730:	0716      	lsls	r6, r2, #28
 8008732:	4605      	mov	r5, r0
 8008734:	460c      	mov	r4, r1
 8008736:	d454      	bmi.n	80087e2 <__sflush_r+0xba>
 8008738:	684b      	ldr	r3, [r1, #4]
 800873a:	2b00      	cmp	r3, #0
 800873c:	dc02      	bgt.n	8008744 <__sflush_r+0x1c>
 800873e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008740:	2b00      	cmp	r3, #0
 8008742:	dd48      	ble.n	80087d6 <__sflush_r+0xae>
 8008744:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008746:	2e00      	cmp	r6, #0
 8008748:	d045      	beq.n	80087d6 <__sflush_r+0xae>
 800874a:	2300      	movs	r3, #0
 800874c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008750:	682f      	ldr	r7, [r5, #0]
 8008752:	6a21      	ldr	r1, [r4, #32]
 8008754:	602b      	str	r3, [r5, #0]
 8008756:	d030      	beq.n	80087ba <__sflush_r+0x92>
 8008758:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800875a:	89a3      	ldrh	r3, [r4, #12]
 800875c:	0759      	lsls	r1, r3, #29
 800875e:	d505      	bpl.n	800876c <__sflush_r+0x44>
 8008760:	6863      	ldr	r3, [r4, #4]
 8008762:	1ad2      	subs	r2, r2, r3
 8008764:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008766:	b10b      	cbz	r3, 800876c <__sflush_r+0x44>
 8008768:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800876a:	1ad2      	subs	r2, r2, r3
 800876c:	2300      	movs	r3, #0
 800876e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008770:	6a21      	ldr	r1, [r4, #32]
 8008772:	4628      	mov	r0, r5
 8008774:	47b0      	blx	r6
 8008776:	1c43      	adds	r3, r0, #1
 8008778:	89a3      	ldrh	r3, [r4, #12]
 800877a:	d106      	bne.n	800878a <__sflush_r+0x62>
 800877c:	6829      	ldr	r1, [r5, #0]
 800877e:	291d      	cmp	r1, #29
 8008780:	d82b      	bhi.n	80087da <__sflush_r+0xb2>
 8008782:	4a2a      	ldr	r2, [pc, #168]	@ (800882c <__sflush_r+0x104>)
 8008784:	40ca      	lsrs	r2, r1
 8008786:	07d6      	lsls	r6, r2, #31
 8008788:	d527      	bpl.n	80087da <__sflush_r+0xb2>
 800878a:	2200      	movs	r2, #0
 800878c:	6062      	str	r2, [r4, #4]
 800878e:	04d9      	lsls	r1, r3, #19
 8008790:	6922      	ldr	r2, [r4, #16]
 8008792:	6022      	str	r2, [r4, #0]
 8008794:	d504      	bpl.n	80087a0 <__sflush_r+0x78>
 8008796:	1c42      	adds	r2, r0, #1
 8008798:	d101      	bne.n	800879e <__sflush_r+0x76>
 800879a:	682b      	ldr	r3, [r5, #0]
 800879c:	b903      	cbnz	r3, 80087a0 <__sflush_r+0x78>
 800879e:	6560      	str	r0, [r4, #84]	@ 0x54
 80087a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80087a2:	602f      	str	r7, [r5, #0]
 80087a4:	b1b9      	cbz	r1, 80087d6 <__sflush_r+0xae>
 80087a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80087aa:	4299      	cmp	r1, r3
 80087ac:	d002      	beq.n	80087b4 <__sflush_r+0x8c>
 80087ae:	4628      	mov	r0, r5
 80087b0:	f7ff f9fe 	bl	8007bb0 <_free_r>
 80087b4:	2300      	movs	r3, #0
 80087b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80087b8:	e00d      	b.n	80087d6 <__sflush_r+0xae>
 80087ba:	2301      	movs	r3, #1
 80087bc:	4628      	mov	r0, r5
 80087be:	47b0      	blx	r6
 80087c0:	4602      	mov	r2, r0
 80087c2:	1c50      	adds	r0, r2, #1
 80087c4:	d1c9      	bne.n	800875a <__sflush_r+0x32>
 80087c6:	682b      	ldr	r3, [r5, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d0c6      	beq.n	800875a <__sflush_r+0x32>
 80087cc:	2b1d      	cmp	r3, #29
 80087ce:	d001      	beq.n	80087d4 <__sflush_r+0xac>
 80087d0:	2b16      	cmp	r3, #22
 80087d2:	d11e      	bne.n	8008812 <__sflush_r+0xea>
 80087d4:	602f      	str	r7, [r5, #0]
 80087d6:	2000      	movs	r0, #0
 80087d8:	e022      	b.n	8008820 <__sflush_r+0xf8>
 80087da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087de:	b21b      	sxth	r3, r3
 80087e0:	e01b      	b.n	800881a <__sflush_r+0xf2>
 80087e2:	690f      	ldr	r7, [r1, #16]
 80087e4:	2f00      	cmp	r7, #0
 80087e6:	d0f6      	beq.n	80087d6 <__sflush_r+0xae>
 80087e8:	0793      	lsls	r3, r2, #30
 80087ea:	680e      	ldr	r6, [r1, #0]
 80087ec:	bf08      	it	eq
 80087ee:	694b      	ldreq	r3, [r1, #20]
 80087f0:	600f      	str	r7, [r1, #0]
 80087f2:	bf18      	it	ne
 80087f4:	2300      	movne	r3, #0
 80087f6:	eba6 0807 	sub.w	r8, r6, r7
 80087fa:	608b      	str	r3, [r1, #8]
 80087fc:	f1b8 0f00 	cmp.w	r8, #0
 8008800:	dde9      	ble.n	80087d6 <__sflush_r+0xae>
 8008802:	6a21      	ldr	r1, [r4, #32]
 8008804:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008806:	4643      	mov	r3, r8
 8008808:	463a      	mov	r2, r7
 800880a:	4628      	mov	r0, r5
 800880c:	47b0      	blx	r6
 800880e:	2800      	cmp	r0, #0
 8008810:	dc08      	bgt.n	8008824 <__sflush_r+0xfc>
 8008812:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008816:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800881a:	81a3      	strh	r3, [r4, #12]
 800881c:	f04f 30ff 	mov.w	r0, #4294967295
 8008820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008824:	4407      	add	r7, r0
 8008826:	eba8 0800 	sub.w	r8, r8, r0
 800882a:	e7e7      	b.n	80087fc <__sflush_r+0xd4>
 800882c:	20400001 	.word	0x20400001

08008830 <_fflush_r>:
 8008830:	b538      	push	{r3, r4, r5, lr}
 8008832:	690b      	ldr	r3, [r1, #16]
 8008834:	4605      	mov	r5, r0
 8008836:	460c      	mov	r4, r1
 8008838:	b913      	cbnz	r3, 8008840 <_fflush_r+0x10>
 800883a:	2500      	movs	r5, #0
 800883c:	4628      	mov	r0, r5
 800883e:	bd38      	pop	{r3, r4, r5, pc}
 8008840:	b118      	cbz	r0, 800884a <_fflush_r+0x1a>
 8008842:	6a03      	ldr	r3, [r0, #32]
 8008844:	b90b      	cbnz	r3, 800884a <_fflush_r+0x1a>
 8008846:	f7fe fa4d 	bl	8006ce4 <__sinit>
 800884a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d0f3      	beq.n	800883a <_fflush_r+0xa>
 8008852:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008854:	07d0      	lsls	r0, r2, #31
 8008856:	d404      	bmi.n	8008862 <_fflush_r+0x32>
 8008858:	0599      	lsls	r1, r3, #22
 800885a:	d402      	bmi.n	8008862 <_fflush_r+0x32>
 800885c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800885e:	f7fe fb4a 	bl	8006ef6 <__retarget_lock_acquire_recursive>
 8008862:	4628      	mov	r0, r5
 8008864:	4621      	mov	r1, r4
 8008866:	f7ff ff5f 	bl	8008728 <__sflush_r>
 800886a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800886c:	07da      	lsls	r2, r3, #31
 800886e:	4605      	mov	r5, r0
 8008870:	d4e4      	bmi.n	800883c <_fflush_r+0xc>
 8008872:	89a3      	ldrh	r3, [r4, #12]
 8008874:	059b      	lsls	r3, r3, #22
 8008876:	d4e1      	bmi.n	800883c <_fflush_r+0xc>
 8008878:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800887a:	f7fe fb3d 	bl	8006ef8 <__retarget_lock_release_recursive>
 800887e:	e7dd      	b.n	800883c <_fflush_r+0xc>

08008880 <__swbuf_r>:
 8008880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008882:	460e      	mov	r6, r1
 8008884:	4614      	mov	r4, r2
 8008886:	4605      	mov	r5, r0
 8008888:	b118      	cbz	r0, 8008892 <__swbuf_r+0x12>
 800888a:	6a03      	ldr	r3, [r0, #32]
 800888c:	b90b      	cbnz	r3, 8008892 <__swbuf_r+0x12>
 800888e:	f7fe fa29 	bl	8006ce4 <__sinit>
 8008892:	69a3      	ldr	r3, [r4, #24]
 8008894:	60a3      	str	r3, [r4, #8]
 8008896:	89a3      	ldrh	r3, [r4, #12]
 8008898:	071a      	lsls	r2, r3, #28
 800889a:	d501      	bpl.n	80088a0 <__swbuf_r+0x20>
 800889c:	6923      	ldr	r3, [r4, #16]
 800889e:	b943      	cbnz	r3, 80088b2 <__swbuf_r+0x32>
 80088a0:	4621      	mov	r1, r4
 80088a2:	4628      	mov	r0, r5
 80088a4:	f000 f82a 	bl	80088fc <__swsetup_r>
 80088a8:	b118      	cbz	r0, 80088b2 <__swbuf_r+0x32>
 80088aa:	f04f 37ff 	mov.w	r7, #4294967295
 80088ae:	4638      	mov	r0, r7
 80088b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088b2:	6823      	ldr	r3, [r4, #0]
 80088b4:	6922      	ldr	r2, [r4, #16]
 80088b6:	1a98      	subs	r0, r3, r2
 80088b8:	6963      	ldr	r3, [r4, #20]
 80088ba:	b2f6      	uxtb	r6, r6
 80088bc:	4283      	cmp	r3, r0
 80088be:	4637      	mov	r7, r6
 80088c0:	dc05      	bgt.n	80088ce <__swbuf_r+0x4e>
 80088c2:	4621      	mov	r1, r4
 80088c4:	4628      	mov	r0, r5
 80088c6:	f7ff ffb3 	bl	8008830 <_fflush_r>
 80088ca:	2800      	cmp	r0, #0
 80088cc:	d1ed      	bne.n	80088aa <__swbuf_r+0x2a>
 80088ce:	68a3      	ldr	r3, [r4, #8]
 80088d0:	3b01      	subs	r3, #1
 80088d2:	60a3      	str	r3, [r4, #8]
 80088d4:	6823      	ldr	r3, [r4, #0]
 80088d6:	1c5a      	adds	r2, r3, #1
 80088d8:	6022      	str	r2, [r4, #0]
 80088da:	701e      	strb	r6, [r3, #0]
 80088dc:	6962      	ldr	r2, [r4, #20]
 80088de:	1c43      	adds	r3, r0, #1
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d004      	beq.n	80088ee <__swbuf_r+0x6e>
 80088e4:	89a3      	ldrh	r3, [r4, #12]
 80088e6:	07db      	lsls	r3, r3, #31
 80088e8:	d5e1      	bpl.n	80088ae <__swbuf_r+0x2e>
 80088ea:	2e0a      	cmp	r6, #10
 80088ec:	d1df      	bne.n	80088ae <__swbuf_r+0x2e>
 80088ee:	4621      	mov	r1, r4
 80088f0:	4628      	mov	r0, r5
 80088f2:	f7ff ff9d 	bl	8008830 <_fflush_r>
 80088f6:	2800      	cmp	r0, #0
 80088f8:	d0d9      	beq.n	80088ae <__swbuf_r+0x2e>
 80088fa:	e7d6      	b.n	80088aa <__swbuf_r+0x2a>

080088fc <__swsetup_r>:
 80088fc:	b538      	push	{r3, r4, r5, lr}
 80088fe:	4b29      	ldr	r3, [pc, #164]	@ (80089a4 <__swsetup_r+0xa8>)
 8008900:	4605      	mov	r5, r0
 8008902:	6818      	ldr	r0, [r3, #0]
 8008904:	460c      	mov	r4, r1
 8008906:	b118      	cbz	r0, 8008910 <__swsetup_r+0x14>
 8008908:	6a03      	ldr	r3, [r0, #32]
 800890a:	b90b      	cbnz	r3, 8008910 <__swsetup_r+0x14>
 800890c:	f7fe f9ea 	bl	8006ce4 <__sinit>
 8008910:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008914:	0719      	lsls	r1, r3, #28
 8008916:	d422      	bmi.n	800895e <__swsetup_r+0x62>
 8008918:	06da      	lsls	r2, r3, #27
 800891a:	d407      	bmi.n	800892c <__swsetup_r+0x30>
 800891c:	2209      	movs	r2, #9
 800891e:	602a      	str	r2, [r5, #0]
 8008920:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008924:	81a3      	strh	r3, [r4, #12]
 8008926:	f04f 30ff 	mov.w	r0, #4294967295
 800892a:	e033      	b.n	8008994 <__swsetup_r+0x98>
 800892c:	0758      	lsls	r0, r3, #29
 800892e:	d512      	bpl.n	8008956 <__swsetup_r+0x5a>
 8008930:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008932:	b141      	cbz	r1, 8008946 <__swsetup_r+0x4a>
 8008934:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008938:	4299      	cmp	r1, r3
 800893a:	d002      	beq.n	8008942 <__swsetup_r+0x46>
 800893c:	4628      	mov	r0, r5
 800893e:	f7ff f937 	bl	8007bb0 <_free_r>
 8008942:	2300      	movs	r3, #0
 8008944:	6363      	str	r3, [r4, #52]	@ 0x34
 8008946:	89a3      	ldrh	r3, [r4, #12]
 8008948:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800894c:	81a3      	strh	r3, [r4, #12]
 800894e:	2300      	movs	r3, #0
 8008950:	6063      	str	r3, [r4, #4]
 8008952:	6923      	ldr	r3, [r4, #16]
 8008954:	6023      	str	r3, [r4, #0]
 8008956:	89a3      	ldrh	r3, [r4, #12]
 8008958:	f043 0308 	orr.w	r3, r3, #8
 800895c:	81a3      	strh	r3, [r4, #12]
 800895e:	6923      	ldr	r3, [r4, #16]
 8008960:	b94b      	cbnz	r3, 8008976 <__swsetup_r+0x7a>
 8008962:	89a3      	ldrh	r3, [r4, #12]
 8008964:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008968:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800896c:	d003      	beq.n	8008976 <__swsetup_r+0x7a>
 800896e:	4621      	mov	r1, r4
 8008970:	4628      	mov	r0, r5
 8008972:	f000 f8c1 	bl	8008af8 <__smakebuf_r>
 8008976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800897a:	f013 0201 	ands.w	r2, r3, #1
 800897e:	d00a      	beq.n	8008996 <__swsetup_r+0x9a>
 8008980:	2200      	movs	r2, #0
 8008982:	60a2      	str	r2, [r4, #8]
 8008984:	6962      	ldr	r2, [r4, #20]
 8008986:	4252      	negs	r2, r2
 8008988:	61a2      	str	r2, [r4, #24]
 800898a:	6922      	ldr	r2, [r4, #16]
 800898c:	b942      	cbnz	r2, 80089a0 <__swsetup_r+0xa4>
 800898e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008992:	d1c5      	bne.n	8008920 <__swsetup_r+0x24>
 8008994:	bd38      	pop	{r3, r4, r5, pc}
 8008996:	0799      	lsls	r1, r3, #30
 8008998:	bf58      	it	pl
 800899a:	6962      	ldrpl	r2, [r4, #20]
 800899c:	60a2      	str	r2, [r4, #8]
 800899e:	e7f4      	b.n	800898a <__swsetup_r+0x8e>
 80089a0:	2000      	movs	r0, #0
 80089a2:	e7f7      	b.n	8008994 <__swsetup_r+0x98>
 80089a4:	20000020 	.word	0x20000020

080089a8 <_sbrk_r>:
 80089a8:	b538      	push	{r3, r4, r5, lr}
 80089aa:	4d06      	ldr	r5, [pc, #24]	@ (80089c4 <_sbrk_r+0x1c>)
 80089ac:	2300      	movs	r3, #0
 80089ae:	4604      	mov	r4, r0
 80089b0:	4608      	mov	r0, r1
 80089b2:	602b      	str	r3, [r5, #0]
 80089b4:	f7f8 fdc8 	bl	8001548 <_sbrk>
 80089b8:	1c43      	adds	r3, r0, #1
 80089ba:	d102      	bne.n	80089c2 <_sbrk_r+0x1a>
 80089bc:	682b      	ldr	r3, [r5, #0]
 80089be:	b103      	cbz	r3, 80089c2 <_sbrk_r+0x1a>
 80089c0:	6023      	str	r3, [r4, #0]
 80089c2:	bd38      	pop	{r3, r4, r5, pc}
 80089c4:	200004b4 	.word	0x200004b4

080089c8 <memcpy>:
 80089c8:	440a      	add	r2, r1
 80089ca:	4291      	cmp	r1, r2
 80089cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80089d0:	d100      	bne.n	80089d4 <memcpy+0xc>
 80089d2:	4770      	bx	lr
 80089d4:	b510      	push	{r4, lr}
 80089d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089de:	4291      	cmp	r1, r2
 80089e0:	d1f9      	bne.n	80089d6 <memcpy+0xe>
 80089e2:	bd10      	pop	{r4, pc}

080089e4 <__assert_func>:
 80089e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80089e6:	4614      	mov	r4, r2
 80089e8:	461a      	mov	r2, r3
 80089ea:	4b09      	ldr	r3, [pc, #36]	@ (8008a10 <__assert_func+0x2c>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4605      	mov	r5, r0
 80089f0:	68d8      	ldr	r0, [r3, #12]
 80089f2:	b14c      	cbz	r4, 8008a08 <__assert_func+0x24>
 80089f4:	4b07      	ldr	r3, [pc, #28]	@ (8008a14 <__assert_func+0x30>)
 80089f6:	9100      	str	r1, [sp, #0]
 80089f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80089fc:	4906      	ldr	r1, [pc, #24]	@ (8008a18 <__assert_func+0x34>)
 80089fe:	462b      	mov	r3, r5
 8008a00:	f000 f842 	bl	8008a88 <fiprintf>
 8008a04:	f000 f8d6 	bl	8008bb4 <abort>
 8008a08:	4b04      	ldr	r3, [pc, #16]	@ (8008a1c <__assert_func+0x38>)
 8008a0a:	461c      	mov	r4, r3
 8008a0c:	e7f3      	b.n	80089f6 <__assert_func+0x12>
 8008a0e:	bf00      	nop
 8008a10:	20000020 	.word	0x20000020
 8008a14:	08008de1 	.word	0x08008de1
 8008a18:	08008dee 	.word	0x08008dee
 8008a1c:	08008e1c 	.word	0x08008e1c

08008a20 <_calloc_r>:
 8008a20:	b570      	push	{r4, r5, r6, lr}
 8008a22:	fba1 5402 	umull	r5, r4, r1, r2
 8008a26:	b934      	cbnz	r4, 8008a36 <_calloc_r+0x16>
 8008a28:	4629      	mov	r1, r5
 8008a2a:	f7ff f935 	bl	8007c98 <_malloc_r>
 8008a2e:	4606      	mov	r6, r0
 8008a30:	b928      	cbnz	r0, 8008a3e <_calloc_r+0x1e>
 8008a32:	4630      	mov	r0, r6
 8008a34:	bd70      	pop	{r4, r5, r6, pc}
 8008a36:	220c      	movs	r2, #12
 8008a38:	6002      	str	r2, [r0, #0]
 8008a3a:	2600      	movs	r6, #0
 8008a3c:	e7f9      	b.n	8008a32 <_calloc_r+0x12>
 8008a3e:	462a      	mov	r2, r5
 8008a40:	4621      	mov	r1, r4
 8008a42:	f7fe f9da 	bl	8006dfa <memset>
 8008a46:	e7f4      	b.n	8008a32 <_calloc_r+0x12>

08008a48 <__ascii_mbtowc>:
 8008a48:	b082      	sub	sp, #8
 8008a4a:	b901      	cbnz	r1, 8008a4e <__ascii_mbtowc+0x6>
 8008a4c:	a901      	add	r1, sp, #4
 8008a4e:	b142      	cbz	r2, 8008a62 <__ascii_mbtowc+0x1a>
 8008a50:	b14b      	cbz	r3, 8008a66 <__ascii_mbtowc+0x1e>
 8008a52:	7813      	ldrb	r3, [r2, #0]
 8008a54:	600b      	str	r3, [r1, #0]
 8008a56:	7812      	ldrb	r2, [r2, #0]
 8008a58:	1e10      	subs	r0, r2, #0
 8008a5a:	bf18      	it	ne
 8008a5c:	2001      	movne	r0, #1
 8008a5e:	b002      	add	sp, #8
 8008a60:	4770      	bx	lr
 8008a62:	4610      	mov	r0, r2
 8008a64:	e7fb      	b.n	8008a5e <__ascii_mbtowc+0x16>
 8008a66:	f06f 0001 	mvn.w	r0, #1
 8008a6a:	e7f8      	b.n	8008a5e <__ascii_mbtowc+0x16>

08008a6c <__ascii_wctomb>:
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	4608      	mov	r0, r1
 8008a70:	b141      	cbz	r1, 8008a84 <__ascii_wctomb+0x18>
 8008a72:	2aff      	cmp	r2, #255	@ 0xff
 8008a74:	d904      	bls.n	8008a80 <__ascii_wctomb+0x14>
 8008a76:	228a      	movs	r2, #138	@ 0x8a
 8008a78:	601a      	str	r2, [r3, #0]
 8008a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a7e:	4770      	bx	lr
 8008a80:	700a      	strb	r2, [r1, #0]
 8008a82:	2001      	movs	r0, #1
 8008a84:	4770      	bx	lr
	...

08008a88 <fiprintf>:
 8008a88:	b40e      	push	{r1, r2, r3}
 8008a8a:	b503      	push	{r0, r1, lr}
 8008a8c:	4601      	mov	r1, r0
 8008a8e:	ab03      	add	r3, sp, #12
 8008a90:	4805      	ldr	r0, [pc, #20]	@ (8008aa8 <fiprintf+0x20>)
 8008a92:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a96:	6800      	ldr	r0, [r0, #0]
 8008a98:	9301      	str	r3, [sp, #4]
 8008a9a:	f7ff fd2d 	bl	80084f8 <_vfiprintf_r>
 8008a9e:	b002      	add	sp, #8
 8008aa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008aa4:	b003      	add	sp, #12
 8008aa6:	4770      	bx	lr
 8008aa8:	20000020 	.word	0x20000020

08008aac <__swhatbuf_r>:
 8008aac:	b570      	push	{r4, r5, r6, lr}
 8008aae:	460c      	mov	r4, r1
 8008ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ab4:	2900      	cmp	r1, #0
 8008ab6:	b096      	sub	sp, #88	@ 0x58
 8008ab8:	4615      	mov	r5, r2
 8008aba:	461e      	mov	r6, r3
 8008abc:	da0d      	bge.n	8008ada <__swhatbuf_r+0x2e>
 8008abe:	89a3      	ldrh	r3, [r4, #12]
 8008ac0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008ac4:	f04f 0100 	mov.w	r1, #0
 8008ac8:	bf14      	ite	ne
 8008aca:	2340      	movne	r3, #64	@ 0x40
 8008acc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008ad0:	2000      	movs	r0, #0
 8008ad2:	6031      	str	r1, [r6, #0]
 8008ad4:	602b      	str	r3, [r5, #0]
 8008ad6:	b016      	add	sp, #88	@ 0x58
 8008ad8:	bd70      	pop	{r4, r5, r6, pc}
 8008ada:	466a      	mov	r2, sp
 8008adc:	f000 f848 	bl	8008b70 <_fstat_r>
 8008ae0:	2800      	cmp	r0, #0
 8008ae2:	dbec      	blt.n	8008abe <__swhatbuf_r+0x12>
 8008ae4:	9901      	ldr	r1, [sp, #4]
 8008ae6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008aea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008aee:	4259      	negs	r1, r3
 8008af0:	4159      	adcs	r1, r3
 8008af2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008af6:	e7eb      	b.n	8008ad0 <__swhatbuf_r+0x24>

08008af8 <__smakebuf_r>:
 8008af8:	898b      	ldrh	r3, [r1, #12]
 8008afa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008afc:	079d      	lsls	r5, r3, #30
 8008afe:	4606      	mov	r6, r0
 8008b00:	460c      	mov	r4, r1
 8008b02:	d507      	bpl.n	8008b14 <__smakebuf_r+0x1c>
 8008b04:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008b08:	6023      	str	r3, [r4, #0]
 8008b0a:	6123      	str	r3, [r4, #16]
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	6163      	str	r3, [r4, #20]
 8008b10:	b003      	add	sp, #12
 8008b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b14:	ab01      	add	r3, sp, #4
 8008b16:	466a      	mov	r2, sp
 8008b18:	f7ff ffc8 	bl	8008aac <__swhatbuf_r>
 8008b1c:	9f00      	ldr	r7, [sp, #0]
 8008b1e:	4605      	mov	r5, r0
 8008b20:	4639      	mov	r1, r7
 8008b22:	4630      	mov	r0, r6
 8008b24:	f7ff f8b8 	bl	8007c98 <_malloc_r>
 8008b28:	b948      	cbnz	r0, 8008b3e <__smakebuf_r+0x46>
 8008b2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b2e:	059a      	lsls	r2, r3, #22
 8008b30:	d4ee      	bmi.n	8008b10 <__smakebuf_r+0x18>
 8008b32:	f023 0303 	bic.w	r3, r3, #3
 8008b36:	f043 0302 	orr.w	r3, r3, #2
 8008b3a:	81a3      	strh	r3, [r4, #12]
 8008b3c:	e7e2      	b.n	8008b04 <__smakebuf_r+0xc>
 8008b3e:	89a3      	ldrh	r3, [r4, #12]
 8008b40:	6020      	str	r0, [r4, #0]
 8008b42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b46:	81a3      	strh	r3, [r4, #12]
 8008b48:	9b01      	ldr	r3, [sp, #4]
 8008b4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008b4e:	b15b      	cbz	r3, 8008b68 <__smakebuf_r+0x70>
 8008b50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b54:	4630      	mov	r0, r6
 8008b56:	f000 f81d 	bl	8008b94 <_isatty_r>
 8008b5a:	b128      	cbz	r0, 8008b68 <__smakebuf_r+0x70>
 8008b5c:	89a3      	ldrh	r3, [r4, #12]
 8008b5e:	f023 0303 	bic.w	r3, r3, #3
 8008b62:	f043 0301 	orr.w	r3, r3, #1
 8008b66:	81a3      	strh	r3, [r4, #12]
 8008b68:	89a3      	ldrh	r3, [r4, #12]
 8008b6a:	431d      	orrs	r5, r3
 8008b6c:	81a5      	strh	r5, [r4, #12]
 8008b6e:	e7cf      	b.n	8008b10 <__smakebuf_r+0x18>

08008b70 <_fstat_r>:
 8008b70:	b538      	push	{r3, r4, r5, lr}
 8008b72:	4d07      	ldr	r5, [pc, #28]	@ (8008b90 <_fstat_r+0x20>)
 8008b74:	2300      	movs	r3, #0
 8008b76:	4604      	mov	r4, r0
 8008b78:	4608      	mov	r0, r1
 8008b7a:	4611      	mov	r1, r2
 8008b7c:	602b      	str	r3, [r5, #0]
 8008b7e:	f7f8 fcbb 	bl	80014f8 <_fstat>
 8008b82:	1c43      	adds	r3, r0, #1
 8008b84:	d102      	bne.n	8008b8c <_fstat_r+0x1c>
 8008b86:	682b      	ldr	r3, [r5, #0]
 8008b88:	b103      	cbz	r3, 8008b8c <_fstat_r+0x1c>
 8008b8a:	6023      	str	r3, [r4, #0]
 8008b8c:	bd38      	pop	{r3, r4, r5, pc}
 8008b8e:	bf00      	nop
 8008b90:	200004b4 	.word	0x200004b4

08008b94 <_isatty_r>:
 8008b94:	b538      	push	{r3, r4, r5, lr}
 8008b96:	4d06      	ldr	r5, [pc, #24]	@ (8008bb0 <_isatty_r+0x1c>)
 8008b98:	2300      	movs	r3, #0
 8008b9a:	4604      	mov	r4, r0
 8008b9c:	4608      	mov	r0, r1
 8008b9e:	602b      	str	r3, [r5, #0]
 8008ba0:	f7f8 fcba 	bl	8001518 <_isatty>
 8008ba4:	1c43      	adds	r3, r0, #1
 8008ba6:	d102      	bne.n	8008bae <_isatty_r+0x1a>
 8008ba8:	682b      	ldr	r3, [r5, #0]
 8008baa:	b103      	cbz	r3, 8008bae <_isatty_r+0x1a>
 8008bac:	6023      	str	r3, [r4, #0]
 8008bae:	bd38      	pop	{r3, r4, r5, pc}
 8008bb0:	200004b4 	.word	0x200004b4

08008bb4 <abort>:
 8008bb4:	b508      	push	{r3, lr}
 8008bb6:	2006      	movs	r0, #6
 8008bb8:	f000 f82c 	bl	8008c14 <raise>
 8008bbc:	2001      	movs	r0, #1
 8008bbe:	f7f8 fc4b 	bl	8001458 <_exit>

08008bc2 <_raise_r>:
 8008bc2:	291f      	cmp	r1, #31
 8008bc4:	b538      	push	{r3, r4, r5, lr}
 8008bc6:	4605      	mov	r5, r0
 8008bc8:	460c      	mov	r4, r1
 8008bca:	d904      	bls.n	8008bd6 <_raise_r+0x14>
 8008bcc:	2316      	movs	r3, #22
 8008bce:	6003      	str	r3, [r0, #0]
 8008bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bd4:	bd38      	pop	{r3, r4, r5, pc}
 8008bd6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008bd8:	b112      	cbz	r2, 8008be0 <_raise_r+0x1e>
 8008bda:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008bde:	b94b      	cbnz	r3, 8008bf4 <_raise_r+0x32>
 8008be0:	4628      	mov	r0, r5
 8008be2:	f000 f831 	bl	8008c48 <_getpid_r>
 8008be6:	4622      	mov	r2, r4
 8008be8:	4601      	mov	r1, r0
 8008bea:	4628      	mov	r0, r5
 8008bec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bf0:	f000 b818 	b.w	8008c24 <_kill_r>
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d00a      	beq.n	8008c0e <_raise_r+0x4c>
 8008bf8:	1c59      	adds	r1, r3, #1
 8008bfa:	d103      	bne.n	8008c04 <_raise_r+0x42>
 8008bfc:	2316      	movs	r3, #22
 8008bfe:	6003      	str	r3, [r0, #0]
 8008c00:	2001      	movs	r0, #1
 8008c02:	e7e7      	b.n	8008bd4 <_raise_r+0x12>
 8008c04:	2100      	movs	r1, #0
 8008c06:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	4798      	blx	r3
 8008c0e:	2000      	movs	r0, #0
 8008c10:	e7e0      	b.n	8008bd4 <_raise_r+0x12>
	...

08008c14 <raise>:
 8008c14:	4b02      	ldr	r3, [pc, #8]	@ (8008c20 <raise+0xc>)
 8008c16:	4601      	mov	r1, r0
 8008c18:	6818      	ldr	r0, [r3, #0]
 8008c1a:	f7ff bfd2 	b.w	8008bc2 <_raise_r>
 8008c1e:	bf00      	nop
 8008c20:	20000020 	.word	0x20000020

08008c24 <_kill_r>:
 8008c24:	b538      	push	{r3, r4, r5, lr}
 8008c26:	4d07      	ldr	r5, [pc, #28]	@ (8008c44 <_kill_r+0x20>)
 8008c28:	2300      	movs	r3, #0
 8008c2a:	4604      	mov	r4, r0
 8008c2c:	4608      	mov	r0, r1
 8008c2e:	4611      	mov	r1, r2
 8008c30:	602b      	str	r3, [r5, #0]
 8008c32:	f7f8 fc01 	bl	8001438 <_kill>
 8008c36:	1c43      	adds	r3, r0, #1
 8008c38:	d102      	bne.n	8008c40 <_kill_r+0x1c>
 8008c3a:	682b      	ldr	r3, [r5, #0]
 8008c3c:	b103      	cbz	r3, 8008c40 <_kill_r+0x1c>
 8008c3e:	6023      	str	r3, [r4, #0]
 8008c40:	bd38      	pop	{r3, r4, r5, pc}
 8008c42:	bf00      	nop
 8008c44:	200004b4 	.word	0x200004b4

08008c48 <_getpid_r>:
 8008c48:	f7f8 bbee 	b.w	8001428 <_getpid>

08008c4c <_init>:
 8008c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4e:	bf00      	nop
 8008c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c52:	bc08      	pop	{r3}
 8008c54:	469e      	mov	lr, r3
 8008c56:	4770      	bx	lr

08008c58 <_fini>:
 8008c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c5a:	bf00      	nop
 8008c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c5e:	bc08      	pop	{r3}
 8008c60:	469e      	mov	lr, r3
 8008c62:	4770      	bx	lr
